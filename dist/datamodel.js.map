{"version":3,"sources":["webpack://DataModel/webpack/universalModuleDefinition","webpack://DataModel/webpack/bootstrap","webpack://DataModel/./src/index.js","webpack://DataModel/./src/enums/data-format.js","webpack://DataModel/./src/enums/dimension-subtype.js","webpack://DataModel/./src/enums/measure-subtype.js","webpack://DataModel/./src/enums/field-type.js","webpack://DataModel/./src/enums/filtering-mode.js","webpack://DataModel/./src/enums/group-by-functions.js","webpack://DataModel/./src/utils/date-time-formatter.js","webpack://DataModel/./src/utils/column-major.js","webpack://DataModel/./src/utils/extend2.js","webpack://DataModel/./src/utils/helper.js","webpack://DataModel/./src/field-store.js","webpack://DataModel/./src/value.js","webpack://DataModel/./src/operator/row-diffset-iterator.js","webpack://DataModel/./src/invalid-aware-types.js","webpack://DataModel/./src/operator/bucket-creator.js","webpack://DataModel/./src/constants/index.js","webpack://DataModel/./src/operator/get-common-schema.js","webpack://DataModel/./src/operator/cross-product.js","webpack://DataModel/./src/operator/merge-sort.js","webpack://DataModel/./src/operator/sort.js","webpack://DataModel/./src/operator/data-builder.js","webpack://DataModel/./src/operator/difference.js","webpack://DataModel/./src/operator/group-by-function.js","webpack://DataModel/./src/utils/reducer-store.js","webpack://DataModel/./src/operator/group-by.js","webpack://DataModel/./src/operator/natural-join-filter-function.js","webpack://DataModel/./src/operator/union.js","webpack://DataModel/./src/operator/outer-join.js","webpack://DataModel/./src/fields/partial-field/index.js","webpack://DataModel/./src/fields/field/index.js","webpack://DataModel/./src/fields/dimension/index.js","webpack://DataModel/./src/fields/measure/index.js","webpack://DataModel/./src/fields/parsers/field-parser/index.js","webpack://DataModel/./src/fields/parsers/categorical-parser/index.js","webpack://DataModel/./src/fields/categorical/index.js","webpack://DataModel/./src/fields/parsers/temporal-parser/index.js","webpack://DataModel/./src/fields/helper.js","webpack://DataModel/./src/fields/temporal/index.js","webpack://DataModel/./src/fields/parsers/binned-parser/index.js","webpack://DataModel/./src/fields/binned/index.js","webpack://DataModel/./src/fields/parsers/continuous-parser/index.js","webpack://DataModel/./src/fields/continuous/index.js","webpack://DataModel/./src/fields/parsers/id-parser.js","webpack://DataModel/./src/fields/id/index.js","webpack://DataModel/./src/fields/field-registry.js","webpack://DataModel/./src/field-creator.js","webpack://DataModel/./src/default-config.js","webpack://DataModel/./src/converter/model/dataConverter.js","webpack://DataModel/./node_modules/d3-dsv/src/dsv.js","webpack://DataModel/./src/converter/utils/dsv-arr.js","webpack://DataModel/./src/converter/utils/dsv-str.js","webpack://DataModel/./src/converter/defaultConverters/dsvStringConverter.js","webpack://DataModel/./src/converter/utils/flat-json.js","webpack://DataModel/./src/converter/defaultConverters/jsonConverter.js","webpack://DataModel/./src/converter/defaultConverters/dsvArrayConverter.js","webpack://DataModel/./src/converter/utils/auto-resolver.js","webpack://DataModel/./src/converter/defaultConverters/autoConverter.js","webpack://DataModel/./src/converter/dataConverterStore.js","webpack://DataModel/./src/helper.js","webpack://DataModel/./src/relation.js","webpack://DataModel/./src/datamodel.js","webpack://DataModel/./src/stats/index.js","webpack://DataModel/./src/export.js","webpack://DataModel/./src/operator/compose.js","webpack://DataModel/./src/operator/pure-operators.js","webpack://DataModel/./src/operator/natural-join.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DataModel","require","default","DataFormat","FLAT_JSON","DSV_STR","DSV_ARR","AUTO","DimensionSubtype","CATEGORICAL","TEMPORAL","BINNED","ID","MeasureSubtype","CONTINUOUS","FieldType","MEASURE","DIMENSION","FilteringMode","NORMAL","INVERSE","ALL","GROUP_BY_FUNCTIONS","SUM","AVG","MIN","MAX","FIRST","LAST","COUNT","STD","convertToNativeDate","date","Date","pad","DateTimeFormatter","format","this","dtParams","undefined","nativeDate","RegExp","escape","text","replace","TOKEN_PREFIX","DATETIME_PARAM_SEQUENCE","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","defaultNumberParser","defVal","val","parsedVal","isFinite","parseInt","defaultRangeParser","range","nVal","toLowerCase","length","getTokenDefinitions","daysDef","short","long","monthsDef","H","index","extract","parser","formatter","getHours","toString","hours","P","M","getMinutes","S","getSeconds","K","getMilliseconds","a","join","day","getDay","A","e","getDate","b","month","getMonth","B","y","result","substring","presentDate","presentYear","Math","trunc","getFullYear","year","Y","getTokenFormalNames","definitions","HOUR_12","AMPM_UPPERCASE","AMPM_LOWERCASE","SHORT_DAY","LONG_DAY","DAY_OF_MONTH","DAY_OF_MONTH_CONSTANT_WIDTH","SHORT_MONTH","LONG_MONTH","MONTH_OF_YEAR","SHORT_YEAR","LONG_YEAR","tokenResolver","defaultResolver","arg","targetParam","hourFormat24","hourFormat12","ampmLower","ampmUpper","amOrpm","isPM","findTokens","tokenPrefix","tokenLiterals","keys","occurrence","forwardChar","indexOf","push","token","formatAs","nDate","formattedStr","String","formattedVal","parse","dateTimeStamp","options","extractTokenValue","dtParamSeq","noBreak","dtParamArr","args","resolverKey","resolverParams","resolverFn","param","resolvedVal","splice","apply","checkIfOnlyYear","unshift","tokenObj","lastOccurrenceIndex","occObj","occIndex","targetText","regexFormat","tokenArr","map","obj","occurrenceLength","extractValues","match","shift","getNativeDate","Number","len","store","fields","forEach","fieldIndex","Array","from","objectToStrFn","checkCyclicRef","parentArr","bIndex","extend2","obj1","obj2","skipUndef","merge","tgtArr","srcArr","item","srcVal","tgtVal","str","cRef","isArray","getUniqueId","getTime","round","random","isArrEqual","arr1","arr2","formatNumber","detectDataFormat","data","isObject","fieldStore","createNamespace","fieldArr","idField","dataId","fieldsObj","_cachedFieldsObj","field","getMeasure","measureFields","_cachedMeasure","schema","type","getDimension","dimensionFields","_cachedDimension","Value","rawValue","formattedValue","getNumberFormattedVal","defineProperties","_value","configurable","writable","_formattedValue","_internalValue","rowDiffsetIterator","rowDiffset","callback","split","diffStr","diffStsArr","start","end","InvalidAwareTypes","config","assign","_invalidAwareValsMap","invalidAwareVals","NULL","NA","NIL","invalid","nil","null","createBinnedFieldData","measureField","buckets","binsCount","binSize","domain","dMin","dMax","ceil","abs","next","generateBuckets","bucketRanges","binnedData","datum","partialField","leftIdx","rightIdx","midIdx","floor","findBucketRange","bins","ROW_ID","DM_DERIVATIVES","SELECT","PROJECT","GROUPBY","COMPOSE","CAL_VAR","BIN","SORT","JOINS","LOGICAL_OPERATORS","getCommonSchema","fs1","fs2","retArr","fs1Arr","defaultFilterFn","crossProduct","dm1","dm2","filterFn","replaceCommonSchema","jointype","applicableFilterFn","dm1FieldStore","getFieldspace","dm2FieldStore","dm1FieldStoreName","dm2FieldStoreName","commonSchemaList","Error","tmpSchema","_rowDiffset","rowAdded","rowPosition","ii","tuple","userArg","formattedData","dm1Fields","prepareJoinData","dm2Fields","detachedRoot","tupleObj","cellVal","iii","defSortFn","a1","b1","sort","arr","lo","hi","sortFn","mid","mainArr","auxArr","mergeSort","resolveStrSortOrder","fDetails","strSortOrder","sortOrder","dataType","sortType","retFunc","getSortFn","groupData","hashMap","Map","groupedData","fieldVal","has","set","createSortingFnArg","groupedDatum","targetFields","targetFieldDetails","label","reduce","acc","idx","applyStandardSort","sortingDetails","fieldName","sortMeta","fieldInSchema","sortingFn","slice","f","applyGroupSort","depColumns","filter","detail","sortedGroupMap","makeGroupMapAndSort","targetCol","currRow","fVal","nMap","row","nextMap","dataBuilder","colIdentifier","idData","addUid","columnWise","retObj","uids","reqSorting","tmpDataArr","colName","subtype","insertInd","dataObj","sDetial","groupSortingIdx","findIndex","standardSortingDetails","groupSortingDetails","pop","sortData","tmpData","difference","hashTable","schemaNameArr","dm1FieldStoreFieldObj","dm2FieldStoreFieldObj","_colIdentifier","prepareDataHelper","dm","addData","hashData","schemaName","getFilteredValues","sum","filteredNumber","curr","avg","totalSum","isNaN","fnList","filteredValues","min","max","sqrt","mean","num","variance","defaultReducerName","ReducerStore","defReducer","entries","reducer","__unregister","delete","Function","reducerStore","groupBy","dataModel","reducers","sFieldArr","dimensions","getFieldArr","reducerObj","measures","defaultReducer","measureName","defAggFn","reducerFn","resolve","getReducerObj","getPartialFieldspace","fieldStoreObj","dbName","dimensionArr","measureArr","rowCount","idMap","hash","_","cachedStore","cloneProvider","naturalJoinFilter","commonSchemaArr","retainTuple","internalValue","union","leftOuterJoin","dataModel1","dataModel2","rightOuterJoin","PartialField","_sanitize","Field","description","displayName","_params","_context","build","Dimension","_cachedDomain","calculateDataDomain","Measure","unit","numberFormat","FieldParser","CategoricalParser","isInvalid","getInvalidType","trim","Categorical","Set","add","TemporalParser","_dtf","calculateContinuousDomain","POSITIVE_INFINITY","NEGATIVE_INFINITY","Temporal","_cachedMinDiff","sortedData","arrLn","minDiff","prevDatum","nextDatum","processedCount","dataFormat","parsedDatum","BinnedParser","matched","parseFloat","Binned","binsArr","ContinuousParser","Continuous","IdValue","valArr","_val","_hash","_valArr","IdParser","values","FieldTypeRegistry","_fieldType","dimension","fieldRegistry","registerFieldType","registerDefaultFields","createFields","dataColumn","headers","headersObj","header","BUILDER","createUnitField","DataConverter","_type","EOL","EOF","objectConverter","columns","JSON","stringify","inferColumns","rows","columnSet","column","width","formatDate","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","getUTCFullYear","getUTCMonth","getUTCDate","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","N","I","eof","eol","j","preformatBody","formatValue","formatRow","test","convert","customConverter","concat","formatBody","formatRows","DSVArr","schemaFields","unitSchema","firstRowHeader","columnMajor","headerMap","h","schemaField","headIndex","DSVStr","fieldSeparator","dsv","d3Dsv","DSVStringConverter","FlatJSON","insertionIndex","schemaFieldsName","JSONConverter","DSVArrayConverter","Auto","converters","AutoDataConverter","DataConverterStore","_getDefaultConverters","converter","converterStore","resp","updateFields","partialFieldspace","fieldStoreName","collID","partialFieldMap","newFields","coll","createUnitFieldFromPartial","persistCurrentDerivation","model","operation","criteriaFn","_derivation","op","meta","criteria","persistAncestorDerivation","sourceDm","newDm","_ancestorDerivation","persistDerivations","selectModeMap","diffIndex","calcDiff","generateRowDiffset","lastInsertedValue","li","selectRowDiffsetIterator","checker","newRowDiffSet","rejRowDiffSet","shouldSelect","shouldReject","checkerResult","rejectRowDiffset","rowSplitDiffsetIterator","splitRowDiffset","dimensionMap","dimensionSet","selectHelper","clonedDm","selectFn","iterator","cachedValueObjects","_partialFieldspace","_cachedValueObjects","cloneWithAllFields","clone","__calculateFieldspace","calculateFieldsConfig","getKey","fn","rowId","keyFn","domainChecker","some","dom","boundsChecker","isWithinDomain","fieldType","filterPropagationModel","propModels","fns","filterByDim","filterByMeasure","clonedModel","modelFieldsConfig","getFieldsConfig","propModel","identifiers","fieldNames","indices","dLen","def","valuesMap","ids","id","rangeKeys","hasData","present","every","select","saveChild","addDiffsetToClonedDm","selectConfig","cloneWithProject","projField","allFields","cloned","projectionSet","actualProjField","splitWithProject","projFieldSet","projFields","sanitizeUnitSchema","sanitizeAndValidateSchema","validateUnitSchema","updateData","relation","defaultConfig","dataHeader","fieldNameAs","as","resolveFieldName","idIndex","rowLength","fill","nameSpace","valueObjects","rawFieldsData","formattedFieldsData","idFieldData","rawData","prepareSelectionData","_dataFormat","applyExistingOperationOnModel","derivations","getDerivations","selectionModel","derivation","params","groupByString","getDerivationArguments","getRootGroupByModel","_parent","find","getRootDataModel","getPathToRootModel","path","propagateToAllDataModels","rootModels","propagationInf","propagationNameSpace","propagateToSource","propagationSourceId","sourceId","addGroupedModel","conf","crit","groupedModel","criterias","actionCriterias","mutableActions","filteredCriteria","entry","excludeModels","sourceActionCriterias","actionInf","actionConf","applyOnSource","action","models","propagationSource","rootModel","propConfig","sourceIdentifiers","inf","propagationModel","filteredModel","getFilteredModel","reverse","handlePropagation","propagateIdentifiers","propModelInf","propagate","children","_children","child","matchingCriteria","propagateImmutableActions","immutableActions","filterImmutableAction","criteriaModel","groupByModel","addToPropNamespace","sourceNamespace","isMutableAction","getNormalizedProFields","fieldConfig","normalizedProjField","constructor","search","Relation","source","_fieldStoreName","_propagationNameSpace","_fieldspace","joinWith","unionWith","differenceWith","defConfig","cloneConfig","extraCloneDm","setOfRowDiffsets","cloneWithSelect","setParent","_fieldConfig","fieldObj","removeChild","sibling","parent","_onPropagation","order","withUid","getAllFields","dataGenerated","fmtFieldIdx","elem","fIdx","fmtFn","datumIdx","fieldsArr","newDataModel","getData","dataInCSVArr","sortedDm","colData","rowsCount","serializedData","rowIdx","colIdx","fieldinst","dependency","replaceVar","fieldsConfig","depVars","retrieveFn","depFieldIndices","fieldSpec","fs","suppliedFields","computedValues","fieldsData","addField","addToNameSpace","payload","rootGroupByModel","eventName","measureFieldName","binFieldName","binField","serialize","getSchema","clonedDMs","splitWithSelect","uniqueFields","commonFields","normalizedProjFieldSets","fieldSet","first","last","count","sd","std","Operators","compose","operations","currentDM","firstChild","dispose","bin","project","calculateVariable","naturalJoin","fullOuterJoin","version","Stats","FieldsUtility","enums"],"mappings":"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","file":"datamodel.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DataModel\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DataModel\"] = factory();\n\telse\n\t\troot[\"DataModel\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const DataModel = require('./export');\n\nmodule.exports = DataModel.default ? DataModel.default : DataModel;\n","/**\n * DataFormat Enum defines the format of the input data.\n * Based on the format of the data the respective adapter is loaded.\n *\n * @readonly\n * @enum {string}\n */\nconst DataFormat = {\n    FLAT_JSON: 'FlatJSON',\n    DSV_STR: 'DSVStr',\n    DSV_ARR: 'DSVArr',\n    AUTO: 'Auto'\n};\n\nexport default DataFormat;\n","/**\n * DimensionSubtype enum defines the sub types of the Dimensional Field.\n *\n * @readonly\n * @enum {string}\n */\nconst DimensionSubtype = {\n    CATEGORICAL: 'categorical',\n    TEMPORAL: 'temporal',\n    BINNED: 'binned',\n    ID: '__id'\n};\n\nexport default DimensionSubtype;\n","/**\n * MeasureSubtype enum defines the sub types of the Measure Field.\n *\n * @readonly\n * @enum {string}\n */\nconst MeasureSubtype = {\n    CONTINUOUS: 'continuous'\n};\n\nexport default MeasureSubtype;\n","/**\n * FieldType enum defines the high level field based on which visuals are controlled.\n * Measure in a high level is numeric field and Dimension in a high level is string field.\n *\n * @readonly\n * @enum {string}\n */\nconst FieldType = {\n    MEASURE: 'measure',\n    DIMENSION: 'dimension'\n};\n\nexport default FieldType;\n","/**\n * Filtering mode enum defines the filering modes of DataModel.\n *\n * @readonly\n * @enum {string}\n */\nconst FilteringMode = {\n    NORMAL: 'normal',\n    INVERSE: 'inverse',\n    ALL: 'all'\n};\n\nexport default FilteringMode;\n","/**\n * Group by function names\n *\n * @readonly\n * @enum {string}\n */\nconst GROUP_BY_FUNCTIONS = {\n    SUM: 'sum',\n    AVG: 'avg',\n    MIN: 'min',\n    MAX: 'max',\n    FIRST: 'first',\n    LAST: 'last',\n    COUNT: 'count',\n    STD: 'std'\n};\n\nexport default GROUP_BY_FUNCTIONS;\n","/**\n * Creates a JS native date object from input\n *\n * @param {string | number | Date} date Input using which date object to be created\n * @return {Date} : JS native date object\n */\nfunction convertToNativeDate (date) {\n    if (date instanceof Date) {\n        return date;\n    }\n\n    return new Date(date);\n}\n/**\n * Apply padding before a number if its less than 1o. This is used when constant digit's number to be returned\n * between 0 - 99\n *\n * @param {number} n Input to be padded\n * @return {string} Padded number\n */\nfunction pad (n) {\n    return (n < 10) ? (`0${n}`) : n;\n}\n/*\n * DateFormatter utility to convert any date format to any other date format\n * DateFormatter parse a date time stamp specified by a user abiding by rules which are defined\n * by user in terms of token. It creates JS native date object from the user specified format.\n * That native date can also be displayed\n * in any specified format.\n * This utility class only takes care of format conversion only\n */\n\n/*\n * Escapes all the special character that are used in regular expression.\n * Like\n * RegExp.escape('sgfd-$') // Output: sgfd\\-\\$\n *\n * @param text {String} : text which is to be escaped\n */\nRegExp.escape = function (text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n/**\n * DateTimeFormatter class to convert any user format of date time stamp to any other format\n * of date time stamp.\n *\n * @param {string} format Format of the date given. For the above date,\n * 'year: %Y, month: %b, day: %d'.\n * @class\n */\n/* istanbul ignore next */ function DateTimeFormatter (format) {\n    this.format = format;\n    this.dtParams = undefined;\n    this.nativeDate = undefined;\n}\n\n// The identifier of the tokens\nDateTimeFormatter.TOKEN_PREFIX = '%';\n\n// JS native Date constructor takes the date params (year, month, etc) in a certail sequence.\n// This defines the sequence of the date parameters in the constructor.\nDateTimeFormatter.DATETIME_PARAM_SEQUENCE = {\n    YEAR: 0,\n    MONTH: 1,\n    DAY: 2,\n    HOUR: 3,\n    MINUTE: 4,\n    SECOND: 5,\n    MILLISECOND: 6\n};\n\n/*\n * This is a default number parsing utility. It tries to parse a number in integer, if parsing is unsuccessful, it\n * gives back a default value.\n *\n * @param: defVal {Number} : Default no if the parsing to integer is not successful\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be parsed.\n */\nDateTimeFormatter.defaultNumberParser = function (defVal) {\n    return function (val) {\n        let parsedVal;\n        if (isFinite(parsedVal = parseInt(val, 10))) {\n            return parsedVal;\n        }\n\n        return defVal;\n    };\n};\n\n/*\n * This is a default number range utility. It tries to find an element in the range. If not found it returns a\n * default no as an index.\n *\n * @param: range {Array} : The list which is to be serached\n * @param: defVal {Number} : Default no if the serach and find does not return anything\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be found\n */\nDateTimeFormatter.defaultRangeParser = function (range, defVal) {\n    return (val) => {\n        let i;\n        let l;\n\n        if (!val) { return defVal; }\n\n        const nVal = val.toLowerCase();\n\n        for (i = 0, l = range.length; i < l; i++) {\n            if (range[i].toLowerCase() === nVal) {\n                return i;\n            }\n        }\n\n        if (i === undefined) {\n            return defVal;\n        }\n        return null;\n    };\n};\n\n/*\n * Defines the tokens which are supporter by the dateformatter. Using this definitation a value gets extracted from\n * the user specifed date string. This also formats the value for display purpose from native JS date.\n * The definition of each token contains the following named properties\n * {\n *     %token_name% : {\n *         name: name of the token, this is used in reverse lookup,\n *         extract: a function that returns the regular expression to extract that piece of information. All the\n *                  regex should be gouped by using ()\n *         parser: a function which receives value extracted by the above regex and parse it to get the date params\n *         formatter: a formatter function that takes milliseconds or JS Date object and format the param\n *                  represented by the token only.\n *     }\n * }\n *\n * @return {Object} : Definition of the all the supported tokens.\n */\nDateTimeFormatter.getTokenDefinitions = function () {\n    const daysDef = {\n        short: [\n            'Sun',\n            'Mon',\n            'Tue',\n            'Wed',\n            'Thu',\n            'Fri',\n            'Sat'\n        ],\n        long: [\n            'Sunday',\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday'\n        ]\n    };\n    const monthsDef = {\n        short: [\n            'Jan',\n            'Feb',\n            'Mar',\n            'Apr',\n            'May',\n            'Jun',\n            'Jul',\n            'Aug',\n            'Sep',\n            'Oct',\n            'Nov',\n            'Dec'\n        ],\n        long: [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ]\n    };\n\n    const definitions = {\n        H: {\n            // 24 hours format\n            name: 'H',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n\n                return d.getHours().toString();\n            }\n        },\n        l: {\n            // 12 hours format\n            name: 'l',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours() % 12;\n\n                return (hours === 0 ? 12 : hours).toString();\n            }\n        },\n        p: {\n            // AM or PM\n            name: 'p',\n            index: 3,\n            extract () { return '(AM|PM)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'AM' : 'PM');\n            }\n        },\n        P: {\n            // am or pm\n            name: 'P',\n            index: 3,\n            extract () { return '(am|pm)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'am' : 'pm');\n            }\n        },\n        M: {\n            // Two digit minutes 00 - 59\n            name: 'M',\n            index: 4,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const mins = d.getMinutes();\n\n                return pad(mins);\n            }\n        },\n        S: {\n            // Two digit seconds 00 - 59\n            name: 'S',\n            index: 5,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const seconds = d.getSeconds();\n\n                return pad(seconds);\n            }\n        },\n        K: {\n            // Milliseconds\n            name: 'K',\n            index: 6,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const ms = d.getMilliseconds();\n\n                return ms.toString();\n            }\n        },\n        a: {\n            // Short name of day, like Mon\n            name: 'a',\n            index: 2,\n            extract () { return `(${daysDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.short[day]).toString();\n            }\n        },\n        A: {\n            // Long name of day, like Monday\n            name: 'A',\n            index: 2,\n            extract () { return `(${daysDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.long[day]).toString();\n            }\n        },\n        e: {\n            // 8 of March, 11 of November\n            name: 'e',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return day.toString();\n            }\n        },\n        d: {\n            // 08 of March, 11 of November\n            name: 'd',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return pad(day);\n            }\n        },\n        b: {\n            // Short month, like Jan\n            name: 'b',\n            index: 1,\n            extract () { return `(${monthsDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.short[month]).toString();\n            }\n        },\n        B: {\n            // Long month, like January\n            name: 'B',\n            index: 1,\n            extract () { return `(${monthsDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.long[month]).toString();\n            }\n        },\n        m: {\n            // Two digit month of year like 01 for January\n            name: 'm',\n            index: 1,\n            extract () { return '(\\\\d+)'; },\n            parser (val) { return DateTimeFormatter.defaultNumberParser()(val) - 1; },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return pad(month + 1);\n            }\n        },\n        y: {\n            // Short year like 90 for 1990\n            name: 'y',\n            index: 0,\n            extract () { return '(\\\\d{2})'; },\n            parser (val) {\n                let result;\n                if (val) {\n                    const l = val.length;\n                    val = val.substring(l - 2, l);\n                }\n                let parsedVal = DateTimeFormatter.defaultNumberParser()(val);\n                let presentDate = new Date();\n                let presentYear = Math.trunc((presentDate.getFullYear()) / 100);\n\n                result = `${presentYear}${parsedVal}`;\n\n                if (convertToNativeDate(result).getFullYear() > presentDate.getFullYear()) {\n                    result = `${presentYear - 1}${parsedVal}`;\n                }\n                return convertToNativeDate(result).getFullYear();\n            },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                let year = d.getFullYear().toString();\n                let l;\n\n                if (year) {\n                    l = year.length;\n                    year = year.substring(l - 2, l);\n                }\n\n                return year;\n            }\n        },\n        Y: {\n            // Long year like 1990\n            name: 'Y',\n            index: 0,\n            extract () { return '(\\\\d{4})'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const year = d.getFullYear().toString();\n\n                return year;\n            }\n        }\n    };\n\n    return definitions;\n};\n\n/*\n * The tokens which works internally is not user friendly in terms of memorizing the names. This gives a formal\n * definition to the informal notations.\n *\n * @return {Object} : Formal definition of the tokens\n */\nDateTimeFormatter.getTokenFormalNames = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n\n    return {\n        HOUR: definitions.H,\n        HOUR_12: definitions.l,\n        AMPM_UPPERCASE: definitions.p,\n        AMPM_LOWERCASE: definitions.P,\n        MINUTE: definitions.M,\n        SECOND: definitions.S,\n        SHORT_DAY: definitions.a,\n        LONG_DAY: definitions.A,\n        DAY_OF_MONTH: definitions.e,\n        DAY_OF_MONTH_CONSTANT_WIDTH: definitions.d,\n        SHORT_MONTH: definitions.b,\n        LONG_MONTH: definitions.B,\n        MONTH_OF_YEAR: definitions.m,\n        SHORT_YEAR: definitions.y,\n        LONG_YEAR: definitions.Y\n    };\n};\n\n/*\n * This defines the rules and declares dependencies that resolves a date parameter (year, month etc) from\n * the date time parameter array.\n *\n * @return {Object} : An object that contains dependencies and a resolver function. The dependencies values are fed\n *                  to the resolver function in that particular sequence only.\n */\nDateTimeFormatter.tokenResolver = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const defaultResolver = (...args) => { // eslint-disable-line require-jsdoc\n        let i = 0;\n        let arg;\n        let targetParam;\n        const l = args.length;\n\n        for (; i < l; i++) {\n            arg = args[i];\n            if (args[i]) {\n                targetParam = arg;\n            }\n        }\n\n        if (!targetParam) { return null; }\n\n        return targetParam[0].parser(targetParam[1]);\n    };\n\n    return {\n        YEAR: [definitions.y, definitions.Y,\n            defaultResolver\n        ],\n        MONTH: [definitions.b, definitions.B, definitions.m,\n            defaultResolver\n        ],\n        DAY: [definitions.a, definitions.A, definitions.e, definitions.d,\n            defaultResolver\n        ],\n        HOUR: [definitions.H, definitions.l, definitions.p, definitions.P,\n            function (hourFormat24, hourFormat12, ampmLower, ampmUpper) {\n                let targetParam;\n                let amOrpm;\n                let isPM;\n                let val;\n\n                if (hourFormat12 && (amOrpm = (ampmLower || ampmUpper))) {\n                    if (amOrpm[0].parser(amOrpm[1]) === 'pm') {\n                        isPM = true;\n                    }\n\n                    targetParam = hourFormat12;\n                } else if (hourFormat12) {\n                    targetParam = hourFormat12;\n                } else {\n                    targetParam = hourFormat24;\n                }\n\n                if (!targetParam) { return null; }\n\n                val = targetParam[0].parser(targetParam[1]);\n                if (isPM) {\n                    val += 12;\n                }\n                return val;\n            }\n        ],\n        MINUTE: [definitions.M,\n            defaultResolver\n        ],\n        SECOND: [definitions.S,\n            defaultResolver\n        ]\n    };\n};\n\n/*\n * Finds token from the format rule specified by a user.\n * @param format {String} : The format of the input date specified by the user\n * @return {Array} : An array of objects which contains the available token and their occurence index in the format\n */\nDateTimeFormatter.findTokens = function (format) {\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenLiterals = Object.keys(definitions);\n    const occurrence = [];\n    let i;\n    let forwardChar;\n\n    while ((i = format.indexOf(tokenPrefix, i + 1)) >= 0) {\n        forwardChar = format[i + 1];\n        if (tokenLiterals.indexOf(forwardChar) === -1) { continue; }\n\n        occurrence.push({\n            index: i,\n            token: forwardChar\n        });\n    }\n\n    return occurrence;\n};\n\n/*\n * Format any JS date to a specified date given by user.\n *\n * @param date {Number | Date} : The date object which is to be formatted\n * @param format {String} : The format using which the date will be formatted for display\n */\nDateTimeFormatter.formatAs = function (date, format) {\n    const nDate = convertToNativeDate(date);\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    let formattedStr = String(format);\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    let token;\n    let formattedVal;\n    let i;\n    let l;\n\n    for (i = 0, l = occurrence.length; i < l; i++) {\n        token = occurrence[i].token;\n        formattedVal = definitions[token].formatter(nDate);\n        formattedStr = formattedStr.replace(new RegExp(tokenPrefix + token, 'g'), formattedVal);\n    }\n\n    return formattedStr;\n};\n\n/*\n * Parses the user specified date string to extract the date time params.\n *\n * @return {Array} : Value of date time params in an array [year, month, day, hour, minutes, seconds, milli]\n */\nDateTimeFormatter.prototype.parse = function (dateTimeStamp, options) {\n    const tokenResolver = DateTimeFormatter.tokenResolver();\n    const dtParams = this.extractTokenValue(dateTimeStamp);\n    const dtParamSeq = DateTimeFormatter.DATETIME_PARAM_SEQUENCE;\n    const noBreak = options && options.noBreak;\n    const dtParamArr = [];\n    const args = [];\n    let resolverKey;\n    let resolverParams;\n    let resolverFn;\n    let val;\n    let i;\n    let param;\n    let resolvedVal;\n    let l;\n    let result = [];\n\n    for (resolverKey in tokenResolver) {\n        if (!{}.hasOwnProperty.call(tokenResolver, resolverKey)) { continue; }\n\n        args.length = 0;\n        resolverParams = tokenResolver[resolverKey];\n        resolverFn = resolverParams.splice(resolverParams.length - 1, 1)[0];\n\n        for (i = 0, l = resolverParams.length; i < l; i++) {\n            param = resolverParams[i];\n            val = dtParams[param.name];\n\n            if (val === undefined) {\n                args.push(null);\n            } else {\n                args.push([param, val]);\n            }\n        }\n\n        resolvedVal = resolverFn.apply(this, args);\n\n        if ((resolvedVal === undefined || resolvedVal === null) && !noBreak) {\n            break;\n        }\n\n        dtParamArr[dtParamSeq[resolverKey]] = resolvedVal;\n    }\n\n    if (dtParamArr.length && this.checkIfOnlyYear(dtParamArr.length))\n     {\n        result.unshift(dtParamArr[0], 0, 1); }\n    else {\n        result.unshift(...dtParamArr);\n    }\n\n    return result;\n};\n\n/*\n * Extract the value of the token from user specified date time string.\n *\n * @return {Object} : An key value pair which contains the tokens as key and value as pair\n */\nDateTimeFormatter.prototype.extractTokenValue = function (dateTimeStamp) {\n    const format = this.format;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const tokenObj = {};\n\n    let lastOccurrenceIndex;\n    let occObj;\n    let occIndex;\n    let targetText;\n    let regexFormat;\n\n    let l;\n    let i;\n\n    regexFormat = String(format);\n\n    const tokenArr = occurrence.map(obj => obj.token);\n    const occurrenceLength = occurrence.length;\n    for (i = occurrenceLength - 1; i >= 0; i--) {\n        occIndex = occurrence[i].index;\n\n        if (occIndex + 1 === regexFormat.length - 1) {\n            lastOccurrenceIndex = occIndex;\n            continue;\n        }\n\n        if (lastOccurrenceIndex === undefined) {\n            lastOccurrenceIndex = regexFormat.length;\n        }\n\n        targetText = regexFormat.substring(occIndex + 2, lastOccurrenceIndex);\n        regexFormat = regexFormat.substring(0, occIndex + 2) +\n            RegExp.escape(targetText) +\n            regexFormat.substring(lastOccurrenceIndex, regexFormat.length);\n\n        lastOccurrenceIndex = occIndex;\n    }\n\n    for (i = 0; i < occurrenceLength; i++) {\n        occObj = occurrence[i];\n        regexFormat = regexFormat.replace(tokenPrefix + occObj.token, definitions[occObj.token].extract());\n    }\n\n    const extractValues = dateTimeStamp.match(new RegExp(regexFormat)) || [];\n    extractValues.shift();\n\n    for (i = 0, l = tokenArr.length; i < l; i++) {\n        tokenObj[tokenArr[i]] = extractValues[i];\n    }\n    return tokenObj;\n};\n\n/*\n * Give back the JS native date formed from  user specified date string\n *\n * @return {Date} : Native JS Date\n */\nDateTimeFormatter.prototype.getNativeDate = function (dateTimeStamp) {\n    let date = null;\n    if (Number.isFinite(dateTimeStamp)) {\n        date = new Date(dateTimeStamp);\n    } else if (!this.format && Date.parse(dateTimeStamp)) {\n        date = new Date(dateTimeStamp);\n    }\n    else {\n        const dtParams = this.dtParams = this.parse(dateTimeStamp);\n        if (dtParams.length) {\n            this.nativeDate = new Date(...dtParams);\n            date = this.nativeDate;\n        }\n    }\n    return date;\n};\n\nDateTimeFormatter.prototype.checkIfOnlyYear = function(len) {\n    return len === 1 && this.format.match(/y|Y/g).length;\n};\n\n/*\n * Represents JS native date to a user specified format.\n *\n * @param format {String} : The format according to which the date is to be represented\n * @return {String} : The formatted date string\n */\nDateTimeFormatter.prototype.formatAs = function (format, dateTimeStamp) {\n    let nativeDate;\n\n    if (dateTimeStamp) {\n        nativeDate = this.nativeDate = this.getNativeDate(dateTimeStamp);\n    } else if (!(nativeDate = this.nativeDate)) {\n        nativeDate = this.getNativeDate(dateTimeStamp);\n    }\n\n    return DateTimeFormatter.formatAs(nativeDate, format);\n};\n\nexport { DateTimeFormatter as default };\n","/**\n * The utility function to calculate major column.\n *\n * @param {Object} store - The store object.\n * @return {Function} Returns the push function.\n */\nexport default (store) => {\n    let i = 0;\n    return (...fields) => {\n        fields.forEach((val, fieldIndex) => {\n            if (!(store[fieldIndex] instanceof Array)) {\n                store[fieldIndex] = Array.from({ length: i });\n            }\n            store[fieldIndex].push(val);\n        });\n        i++;\n    };\n};\n","/* eslint-disable */\nconst OBJECTSTRING = 'object';\nconst objectToStrFn = Object.prototype.toString;\nconst objectToStr = '[object Object]';\nconst arrayToStr = '[object Array]';\n\nfunction checkCyclicRef(obj, parentArr) {\n    let i = parentArr.length;\n    let bIndex = -1;\n\n    while (i) {\n        if (obj === parentArr[i]) {\n            bIndex = i;\n            return bIndex;\n        }\n        i -= 1;\n    }\n\n    return bIndex;\n}\n\nfunction merge(obj1, obj2, skipUndef, tgtArr, srcArr) {\n    var item,\n        srcVal,\n        tgtVal,\n        str,\n        cRef;\n    // check whether obj2 is an array\n    // if array then iterate through it's index\n    // **** MOOTOOLS precution\n\n    if (!srcArr) {\n        tgtArr = [obj1];\n        srcArr = [obj2];\n    }\n    else {\n        tgtArr.push(obj1);\n        srcArr.push(obj2);\n    }\n\n    if (obj2 instanceof Array) {\n        for (item = 0; item < obj2.length; item += 1) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (typeof tgtVal !== OBJECTSTRING) {\n                if (!(skipUndef && tgtVal === undefined)) {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                    srcVal = obj1[item] = tgtVal instanceof Array ? [] : {};\n                }\n                cRef = checkCyclicRef(tgtVal, srcArr);\n                if (cRef !== -1) {\n                    srcVal = obj1[item] = tgtArr[cRef];\n                }\n                else {\n                    merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                }\n            }\n        }\n    }\n    else {\n        for (item in obj2) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (tgtVal !== null && typeof tgtVal === OBJECTSTRING) {\n                // Fix for issue BUG: FWXT-602\n                // IE < 9 Object.prototype.toString.call(null) gives\n                // '[object Object]' instead of '[object Null]'\n                // that's why null value becomes Object in IE < 9\n                str = objectToStrFn.call(tgtVal);\n                if (str === objectToStr) {\n                    if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                        srcVal = obj1[item] = {};\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else if (str === arrayToStr) {\n                    if (srcVal === null || !(srcVal instanceof Array)) {\n                        srcVal = obj1[item] = [];\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (skipUndef && tgtVal === undefined) {\n                    continue;\n                }\n                obj1[item] = tgtVal;\n            }\n        }\n    }\n    return obj1;\n}\n\n\nfunction extend2 (obj1, obj2, skipUndef) {\n    //if none of the arguments are object then return back\n    if (typeof obj1 !== OBJECTSTRING && typeof obj2 !== OBJECTSTRING) {\n        return null;\n    }\n\n    if (typeof obj2 !== OBJECTSTRING || obj2 === null) {\n        return obj1;\n    }\n\n    if (typeof obj1 !== OBJECTSTRING) {\n        obj1 = obj2 instanceof Array ? [] : {};\n    }\n    merge(obj1, obj2, skipUndef);\n    return obj1;\n}\n\nexport { extend2 as default };\n","import { DataFormat } from '../enums';\n\n/**\n * Checks whether the value is an array.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an array otherwise returns false.\n */\nexport function isArray (val) {\n    return Array.isArray(val);\n}\n\n/**\n * Checks whether the value is an object.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an object otherwise returns false.\n */\nexport function isObject (val) {\n    return val === Object(val);\n}\n\n/**\n * Checks whether the value is a string value.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is a string value otherwise returns false.\n */\nexport function isString (val) {\n    return typeof val === 'string';\n}\n\n/**\n * Checks whether the value is callable.\n *\n * @param {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is callable otherwise returns false.\n */\nexport function isCallable (val) {\n    return typeof val === 'function';\n}\n\n/**\n * Returns the unique values from the input array.\n *\n * @param {Array} data - The input array.\n * @return {Array} Returns a new array of unique values.\n */\nexport function uniqueValues (data) {\n    return [...new Set(data)];\n}\n\nexport const getUniqueId = () => `id-${new Date().getTime()}${Math.round(Math.random() * 10000)}`;\n\n/**\n * Checks Whether two arrays have same content.\n *\n * @param {Array} arr1 - The first array.\n * @param {Array} arr2 - The 2nd array.\n * @return {boolean} Returns whether two array have same content.\n */\nexport function isArrEqual(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) {\n        return arr1 === arr2;\n    }\n\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * It is the default number format function for the measure field type.\n *\n * @param {any} val - The input value.\n * @return {number} Returns a number value.\n */\nexport function formatNumber(val) {\n    return val;\n}\n\n/**\n * Returns the detected data format.\n *\n * @param {any} data - The input data to be tested.\n * @return {string} Returns the data format name.\n */\nexport const detectDataFormat = (data) => {\n    if (isString(data)) {\n        return DataFormat.DSV_STR;\n    } else if (isArray(data) && isArray(data[0])) {\n        return DataFormat.DSV_ARR;\n    } else if (isArray(data) && (data.length === 0 || isObject(data[0]))) {\n        return DataFormat.FLAT_JSON;\n    }\n    return null;\n};\n","import { FieldType } from './enums';\nimport { getUniqueId } from './utils';\n\nconst fieldStore = {\n    data: {},\n\n    createNamespace (fieldArr, name, idField) {\n        const dataId = name || getUniqueId();\n\n        this.data[dataId] = {\n            name: dataId,\n            fields: fieldArr,\n            idField,\n            fieldsObj () {\n                let fieldsObj = this._cachedFieldsObj;\n\n                if (!fieldsObj) {\n                    fieldsObj = this._cachedFieldsObj = {};\n                    this.fields.forEach((field) => {\n                        fieldsObj[field.name()] = field;\n                    });\n                }\n                return fieldsObj;\n            },\n            getMeasure () {\n                let measureFields = this._cachedMeasure;\n\n                if (!measureFields) {\n                    measureFields = this._cachedMeasure = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.MEASURE) {\n                            measureFields[field.name()] = field;\n                        }\n                    });\n                }\n                return measureFields;\n            },\n            getDimension () {\n                let dimensionFields = this._cachedDimension;\n\n                if (!this._cachedDimension) {\n                    dimensionFields = this._cachedDimension = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.DIMENSION) {\n                            dimensionFields[field.name()] = field;\n                        }\n                    });\n                }\n                return dimensionFields;\n            },\n        };\n        return this.data[dataId];\n    }\n};\n\nexport default fieldStore;\n","import { getNumberFormattedVal } from './helper';\n\n/**\n * The wrapper class on top of the primitive value of a field.\n *\n * @todo Need to have support for StringValue, NumberValue, DateTimeValue\n * and GeoValue. These types should expose predicate API mostly.\n */\nclass Value {\n\n  /**\n   * Creates new Value instance.\n   *\n   * @param {*} val - the primitive value from the field cell.\n   * @param {string | Field} field - The field from which the value belongs.\n   */\n    constructor (value, rawValue, field) {\n        const formattedValue = getNumberFormattedVal(field, value);\n\n        Object.defineProperties(this, {\n            _value: {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value\n            },\n            _formattedValue: {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: formattedValue\n            },\n            _internalValue: {\n                enumerable: false,\n                configurable: false,\n                writable: false,\n                value: rawValue\n            }\n        });\n\n        this.field = field;\n    }\n\n  /**\n   * Returns the field value.\n   *\n   * @return {*} Returns the current value.\n   */\n    get value () {\n        return this._value;\n    }\n\n    /**\n     * Returns the parsed value of field\n     */\n    get formattedValue () {\n        return this._formattedValue;\n    }\n\n    /**\n     * Returns the internal value of field\n     */\n    get internalValue () {\n        return this._internalValue;\n    }\n\n  /**\n   * Converts to human readable string.\n   *\n   * @override\n   * @return {string} Returns a human readable string of the field value.\n   *\n   */\n    toString () {\n        return String(this.value);\n    }\n\n  /**\n   * Returns the value of the field.\n   *\n   * @override\n   * @return {*} Returns the field value.\n   */\n    valueOf () {\n        return this.value;\n    }\n}\n\nexport default Value;\n","/**\n * Iterates through the diffSet array and call the callback with the current\n * index.\n *\n * @param {string} rowDiffset - The row diffset string e.g. '0-4,6,10-13'.\n * @param {Function} callback - The callback function to be called with every index.\n */\nexport function rowDiffsetIterator (rowDiffset, callback) {\n    if (rowDiffset.length > 0) {\n        const rowDiffArr = rowDiffset.split(',');\n        rowDiffArr.forEach((diffStr) => {\n            const diffStsArr = diffStr.split('-');\n            const start = +(diffStsArr[0]);\n            const end = +(diffStsArr[1] || diffStsArr[0]);\n            if (end >= start) {\n                for (let i = start; i <= end; i += 1) {\n                    callback(i);\n                }\n            }\n        });\n    }\n}\n","/**\n * A parser to parser null, undefined, invalid and NIL values.\n *\n * @public\n * @class\n */\nclass InvalidAwareTypes {\n    /**\n     * Static method which gets/sets the invalid value registry.\n     *\n     * @public\n     * @param {Object} config - The custom configuration supplied by user.\n     * @return {Object} Returns the invalid values registry.\n     */\n    static invalidAwareVals (config) {\n        if (!config) {\n            return InvalidAwareTypes._invalidAwareValsMap;\n        }\n        return Object.assign(InvalidAwareTypes._invalidAwareValsMap, config);\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {string} value - The value of the invalid data type.\n     */\n    constructor (value) {\n        this._value = value;\n    }\n\n    /**\n     * Returns the current value of the instance.\n     *\n     * @public\n     * @return {string} Returns the value of the invalid data type.\n     */\n    value () {\n        return this._value;\n    }\n\n    /**\n     * Returns the current value of the instance in string format.\n     *\n     * @public\n     * @return {string} Returns the value of the invalid data type.\n     */\n    toString () {\n        return String(this._value);\n    }\n\n    static isInvalid(val) {\n        return (val instanceof InvalidAwareTypes) || !!InvalidAwareTypes.invalidAwareVals()[val];\n    }\n\n    static getInvalidType(val) {\n        return val instanceof InvalidAwareTypes ? val : InvalidAwareTypes.invalidAwareVals()[val];\n    }\n}\n\n/**\n * Enums for Invalid types.\n */\nInvalidAwareTypes.NULL = new InvalidAwareTypes('null');\nInvalidAwareTypes.NA = new InvalidAwareTypes('na');\nInvalidAwareTypes.NIL = new InvalidAwareTypes('nil');\n\n/**\n * Default Registry for mapping the invalid values.\n *\n * @private\n */\nInvalidAwareTypes._invalidAwareValsMap = {\n    invalid: InvalidAwareTypes.NA,\n    nil: InvalidAwareTypes.NIL,\n    null: InvalidAwareTypes.NULL,\n    undefined: InvalidAwareTypes.NA\n};\n\nexport default InvalidAwareTypes;\n","import { rowDiffsetIterator } from './row-diffset-iterator';\nimport InvalidAwareTypes from '../invalid-aware-types';\n\nconst generateBuckets = (binSize, start, end) => {\n    const buckets = [];\n    let next = start;\n\n    while (next < end) {\n        buckets.push(next);\n        next += binSize;\n    }\n    buckets.push(next);\n\n    return buckets;\n};\n\nconst findBucketRange = (bucketRanges, value) => {\n    let leftIdx = 0;\n    let rightIdx = bucketRanges.length - 1;\n    let midIdx;\n    let range;\n\n    // Here use binary search as the bucketRanges is a sorted array\n    while (leftIdx <= rightIdx) {\n        midIdx = leftIdx + Math.floor((rightIdx - leftIdx) / 2);\n        range = bucketRanges[midIdx];\n\n        if (value >= range.start && value < range.end) {\n            return range;\n        } else if (value >= range.end) {\n            leftIdx = midIdx + 1;\n        } else if (value < range.start) {\n            rightIdx = midIdx - 1;\n        }\n    }\n\n    return null;\n};\n\n /**\n  * Creates the bin data from input measure field and supplied configs.\n  *\n  * @param {Measure} measureField - The Measure field instance.\n  * @param {string} rowDiffset - The datamodel rowDiffset values.\n  * @param {Object} config - The config object.\n  * @return {Object} Returns the binned data and the corresponding bins.\n  */\nexport function createBinnedFieldData (measureField, rowDiffset, config) {\n    let { buckets, binsCount, binSize, start, end } = config;\n    const [dMin, dMax] = measureField.domain();\n\n    if (!buckets) {\n        start = (start !== 0 && (!start || start > dMin)) ? dMin : start;\n        end = (end !== 0 && (!end || end < dMax)) ? (dMax + 1) : end;\n\n        if (binsCount) {\n            binSize = Math.ceil(Math.abs(end - start) / binsCount);\n        }\n\n        buckets = generateBuckets(binSize, start, end);\n    }\n\n    if (buckets[0] > dMin) {\n        buckets.unshift(dMin);\n    }\n    if (buckets[buckets.length - 1] <= dMax) {\n        buckets.push(dMax + 1);\n    }\n\n    const bucketRanges = [];\n    for (let i = 0; i < buckets.length - 1; i++) {\n        bucketRanges.push({\n            start: buckets[i],\n            end: buckets[i + 1]\n        });\n    }\n\n    const binnedData = [];\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const datum = measureField.partialField.data[i];\n        if (datum instanceof InvalidAwareTypes) {\n            binnedData.push(datum);\n            return;\n        }\n\n        const range = findBucketRange(bucketRanges, datum);\n        binnedData.push(`${range.start}-${range.end}`);\n    });\n\n    return { binnedData, bins: buckets };\n}\n","export { DataFormat, FilteringMode } from '../enums';\n/**\n * The event name for data propagation.\n */\nexport const PROPAGATION = 'propagation';\n\n/**\n * The name of the unique row id column in DataModel.\n */\nexport const ROW_ID = '__id__';\n\n/**\n * The enums for operation names performed on DataModel.\n */\nexport const DM_DERIVATIVES = {\n    SELECT: 'select',\n    PROJECT: 'project',\n    GROUPBY: 'group',\n    COMPOSE: 'compose',\n    CAL_VAR: 'calculatedVariable',\n    BIN: 'bin',\n    SORT: 'sort'\n};\n\nexport const JOINS = {\n    CROSS: 'cross',\n    LEFTOUTER: 'leftOuter',\n    RIGHTOUTER: 'rightOuter',\n    NATURAL: 'natural',\n    FULLOUTER: 'fullOuter'\n};\n\nexport const LOGICAL_OPERATORS = {\n    AND: 'and',\n    OR: 'or'\n};\n","/**\n * The helper function that returns an array of common schema\n * from two fieldStore instances.\n *\n * @param {FieldStore} fs1 - The first FieldStore instance.\n * @param {FieldStore} fs2 - The second FieldStore instance.\n * @return {Array} An array containing the common schema.\n */\nexport function getCommonSchema (fs1, fs2) {\n    const retArr = [];\n    const fs1Arr = [];\n    fs1.fields.forEach((field) => {\n        fs1Arr.push(field.schema().name);\n    });\n    fs2.fields.forEach((field) => {\n        if (fs1Arr.indexOf(field.schema().name) !== -1) {\n            retArr.push(field.schema().name);\n        }\n    });\n    return retArr;\n}\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { getCommonSchema } from './get-common-schema';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { JOINS } from '../constants';\nimport { prepareJoinData } from '../helper';\n/**\n * Default filter function for crossProduct.\n *\n * @return {boolean} Always returns true.\n */\nfunction defaultFilterFn() { return true; }\n\n/**\n * Implementation of cross product operation between two DataModel instances.\n * It internally creates the data and schema for the new DataModel.\n *\n * @param {DataModel} dataModel1 - The left DataModel instance.\n * @param {DataModel} dataModel2 - The right DataModel instance.\n * @param {Function} filterFn - The filter function which is used to filter the tuples.\n * @param {boolean} [replaceCommonSchema=false] - The flag if the common name schema should be there.\n * @return {DataModel} Returns The newly created DataModel instance from the crossProduct operation.\n */\nexport function crossProduct (dm1, dm2, filterFn, replaceCommonSchema = false, jointype = JOINS.CROSS) {\n    const schema = [];\n    const data = [];\n    const applicableFilterFn = filterFn || defaultFilterFn;\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreName = dm1FieldStore.name;\n    const dm2FieldStoreName = dm2FieldStore.name;\n    const name = `${dm1FieldStore.name}.${dm2FieldStore.name}`;\n    const commonSchemaList = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    if (dm1FieldStoreName === dm2FieldStoreName) {\n        throw new Error('DataModels must have different alias names');\n    }\n    // Here prepare the schema\n    dm1FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1 && !replaceCommonSchema) {\n            tmpSchema.name = `${dm1FieldStore.name}.${tmpSchema.name}`;\n        }\n        schema.push(tmpSchema);\n    });\n    dm2FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1) {\n            if (!replaceCommonSchema) {\n                tmpSchema.name = `${dm2FieldStore.name}.${tmpSchema.name}`;\n                schema.push(tmpSchema);\n            }\n        } else {\n            schema.push(tmpSchema);\n        }\n    });\n\n    // Here prepare Data\n    rowDiffsetIterator(dm1._rowDiffset, (i) => {\n        let rowAdded = false;\n        let rowPosition;\n        rowDiffsetIterator(dm2._rowDiffset, (ii) => {\n            const tuple = [];\n            const userArg = {};\n            userArg[dm1FieldStoreName] = {};\n            userArg[dm2FieldStoreName] = {};\n            dm1FieldStore.fields.forEach((field) => {\n                tuple.push(field.partialField.data[i]);\n                userArg[dm1FieldStoreName][field.name()] = {\n                    rawValue: field.partialField.data[i],\n                    formattedValue: field.formattedData()[i],\n                };\n            });\n            dm2FieldStore.fields.forEach((field) => {\n                if (!(commonSchemaList.indexOf(field.schema().name) !== -1 && replaceCommonSchema)) {\n                    tuple.push(field.partialField.data[ii]);\n                }\n                userArg[dm2FieldStoreName][field.name()] = {\n                    rawValue: field.partialField.data[ii],\n                    formattedValue: field.formattedData()[ii],\n                };\n            });\n\n            let cachedStore = {};\n            let cloneProvider1 = () => dm1.detachedRoot();\n            let cloneProvider2 = () => dm2.detachedRoot();\n\n            const dm1Fields = prepareJoinData(userArg[dm1FieldStoreName]);\n            const dm2Fields = prepareJoinData(userArg[dm2FieldStoreName]);\n            if (applicableFilterFn(dm1Fields, dm2Fields, cloneProvider1, cloneProvider2, cachedStore)) {\n                const tupleObj = {};\n                tuple.forEach((cellVal, iii) => {\n                    tupleObj[schema[iii].name] = cellVal;\n                });\n                if (rowAdded && JOINS.CROSS !== jointype) {\n                    data[rowPosition] = tupleObj;\n                }\n                else {\n                    data.push(tupleObj);\n                    rowAdded = true;\n                    rowPosition = i;\n                }\n            } else if ((jointype === JOINS.LEFTOUTER || jointype === JOINS.RIGHTOUTER) && !rowAdded) {\n                const tupleObj = {};\n                let len = dm1FieldStore.fields.length - 1;\n                tuple.forEach((cellVal, iii) => {\n                    if (iii <= len) {\n                        tupleObj[schema[iii].name] = cellVal;\n                    }\n                    else {\n                        tupleObj[schema[iii].name] = null;\n                    }\n                });\n                rowAdded = true;\n                rowPosition = i;\n                data.push(tupleObj);\n            }\n        });\n    });\n\n    return new DataModel(data, schema, { name });\n}\n","/**\n * The default sort function.\n *\n * @param {*} a - The first value.\n * @param {*} b - The second value.\n * @return {number} Returns the comparison result e.g. 1 or 0 or -1.\n */\nfunction defSortFn (a, b) {\n    const a1 = `${a}`;\n    const b1 = `${b}`;\n    if (a1 < b1) {\n        return -1;\n    }\n    if (a1 > b1) {\n        return 1;\n    }\n    return 0;\n}\n\n/**\n * The helper function for merge sort which creates the sorted array\n * from the two halves of the input array.\n *\n * @param {Array} arr - The target array which needs to be merged.\n * @param {number} lo - The starting index of the first array half.\n * @param {number} mid - The ending index of the first array half.\n * @param {number} hi - The ending index of the second array half.\n * @param {Function} sortFn - The sort function.\n */\nfunction merge (arr, lo, mid, hi, sortFn) {\n    const mainArr = arr;\n    const auxArr = [];\n    for (let i = lo; i <= hi; i += 1) {\n        auxArr[i] = mainArr[i];\n    }\n    let a = lo;\n    let b = mid + 1;\n\n    for (let i = lo; i <= hi; i += 1) {\n        if (a > mid) {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        } else if (b > hi) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else if (sortFn(auxArr[a], auxArr[b]) <= 0) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        }\n    }\n}\n\n/**\n * The helper function for merge sort which would be called\n * recursively for sorting the array halves.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {number} lo - The starting index of the array half.\n * @param {number} hi - The ending index of the array half.\n * @param {Function} sortFn - The sort function.\n * @return {Array} Returns the target array itself.\n */\nfunction sort (arr, lo, hi, sortFn) {\n    if (hi === lo) { return arr; }\n\n    const mid = lo + Math.floor((hi - lo) / 2);\n    sort(arr, lo, mid, sortFn);\n    sort(arr, mid + 1, hi, sortFn);\n    merge(arr, lo, mid, hi, sortFn);\n\n    return arr;\n}\n\n/**\n * The implementation of merge sort.\n * It is used in DataModel for stable sorting as it is not sure\n * what the sorting algorithm used by browsers is stable or not.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {Function} [sortFn=defSortFn] - The sort function.\n * @return {Array} Returns the input array itself in sorted order.\n */\nexport function mergeSort (arr, sortFn = defSortFn) {\n    if (arr.length > 1) {\n        sort(arr, 0, arr.length - 1, sortFn);\n    }\n    return arr;\n}\n","import { DimensionSubtype, MeasureSubtype } from '../enums';\nimport { mergeSort } from './merge-sort';\nimport { fieldInSchema } from '../helper';\nimport { isCallable, isArray } from '../utils';\n\n/**\n * Generates the sorting functions to sort the data of a DataModel instance\n * according to the input data type.\n *\n * @param {string} dataType - The data type e.g. 'measure', 'datetime' etc.\n * @param {string} sortType - The sorting order i.e. 'asc' or 'desc'.\n * @return {Function} Returns the the sorting function.\n */\nfunction getSortFn (dataType, sortType) {\n    let retFunc;\n\n    switch (dataType) {\n    case MeasureSubtype.CONTINUOUS:\n    case DimensionSubtype.TEMPORAL:\n        if (sortType === 'asc') {\n            retFunc = (a, b) => a - b;\n        } else {\n            retFunc = (a, b) => b - a;\n        }\n        break;\n    default:\n        if (sortType === 'asc') {\n            retFunc = (a, b) => {\n                a = `${a}`;\n                b = `${b}`;\n                if (a === b) {\n                    return 0;\n                }\n                return a > b ? 1 : -1;\n            };\n        } else {\n            retFunc = (a, b) => {\n                a = `${a}`;\n                b = `${b}`;\n                if (a === b) {\n                    return 0;\n                }\n                return a > b ? -1 : 1;\n            };\n        }\n    }\n\n    return retFunc;\n}\n\n/**\n * Resolves the actual sorting function based on sorting string value.\n *\n * @param {Object} fDetails - The target field info.\n * @param {string} strSortOrder - The sort order value.\n * @return {Function} Returns the sorting function.\n */\nfunction resolveStrSortOrder (fDetails, strSortOrder) {\n    const sortOrder = String(strSortOrder).toLowerCase() === 'desc' ? 'desc' : 'asc';\n    return getSortFn(fDetails.type, sortOrder);\n}\n\n/**\n * Groups the data according to the specified target field.\n *\n * @param {Array} data - The input data array.\n * @param {number} fieldIndex - The target field index within schema array.\n * @return {Array} Returns an array containing the grouped data.\n */\nfunction groupData (data, fieldIndex) {\n    const hashMap = new Map();\n    const groupedData = [];\n\n    data.forEach((datum) => {\n        const fieldVal = datum[fieldIndex];\n        if (hashMap.has(fieldVal)) {\n            groupedData[hashMap.get(fieldVal)][1].push(datum);\n        } else {\n            groupedData.push([fieldVal, [datum]]);\n            hashMap.set(fieldVal, groupedData.length - 1);\n        }\n    });\n\n    return groupedData;\n}\n\n/**\n * Creates the argument value used for sorting function when sort is done\n * with another fields.\n *\n * @param {Array} groupedDatum - The grouped datum for a single dimension field value.\n * @param {Array} targetFields - An array of the sorting fields.\n * @param {Array} targetFieldDetails - An array of the sorting field details in schema.\n * @return {Object} Returns an object containing the value of sorting fields and the target field name.\n */\nfunction createSortingFnArg (groupedDatum, targetFields, targetFieldDetails) {\n    const arg = {\n        label: groupedDatum[0]\n    };\n\n    targetFields.reduce((acc, next, idx) => {\n        acc[next] = groupedDatum[1].map(datum => datum[targetFieldDetails[idx].index]);\n        return acc;\n    }, arg);\n\n    return arg;\n}\n\n/**\n * Sorts the data by applying the standard sorting mechanism.\n *\n * @param {Array} data - The input data array.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n */\nfunction applyStandardSort (data, schema, sortingDetails) {\n    let fieldName;\n    let sortMeta;\n    let fDetails;\n    let i = sortingDetails.length - 1;\n\n    for (; i >= 0; i--) {\n        fieldName = sortingDetails[i][0];\n        sortMeta = sortingDetails[i][1];\n        fDetails = fieldInSchema(schema, fieldName);\n\n        if (!fDetails) {\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        if (isCallable(sortMeta)) {\n            // eslint-disable-next-line no-loop-func\n            mergeSort(data, (a, b) => sortMeta(a[fDetails.index], b[fDetails.index]));\n        } else if (isArray(sortMeta)) {\n            const groupedData = groupData(data, fDetails.index);\n            const sortingFn = sortMeta[sortMeta.length - 1];\n            const targetFields = sortMeta.slice(0, sortMeta.length - 1);\n            const targetFieldDetails = targetFields.map(f => fieldInSchema(schema, f));\n\n            groupedData.forEach((groupedDatum) => {\n                groupedDatum.push(createSortingFnArg(groupedDatum, targetFields, targetFieldDetails));\n            });\n\n            mergeSort(groupedData, (a, b) => {\n                const m = a[2];\n                const n = b[2];\n                return sortingFn(m, n);\n            });\n\n            // Empty the array\n            data.length = 0;\n            groupedData.forEach((datum) => {\n                data.push(...datum[1]);\n            });\n        } else {\n            const sortFn = resolveStrSortOrder(fDetails, sortMeta);\n            // eslint-disable-next-line no-loop-func\n            mergeSort(data, (a, b) => sortFn(a[fDetails.index], b[fDetails.index]));\n        }\n    }\n}\n\n/**\n * Creates a map based on grouping.\n *\n * @param {Array} depColumns - The dependency columns' info.\n * @param {Array} data - The input data.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - The sorting details for standard sorting.\n * @return {Map} Returns a map.\n */\nconst makeGroupMapAndSort = (depColumns, data, schema, sortingDetails) => {\n    if (depColumns.length === 0) { return data; }\n\n    const targetCol = depColumns[0];\n    const map = new Map();\n\n    data.reduce((acc, currRow) => {\n        const fVal = currRow[targetCol.index];\n        if (acc.has(fVal)) {\n            acc.get(fVal).push(currRow);\n        } else {\n            acc.set(fVal, [currRow]);\n        }\n        return acc;\n    }, map);\n\n    for (let [key, val] of map) {\n        const nMap = makeGroupMapAndSort(depColumns.slice(1), val, schema, sortingDetails);\n        map.set(key, nMap);\n        if (Array.isArray(nMap)) {\n            applyStandardSort(nMap, schema, sortingDetails);\n        }\n    }\n\n    return map;\n};\n\n/**\n * Sorts the data by retaining the position/order of a particular field.\n *\n * @param {Array} data - The input data array.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n * @param {Array} depColumns - The dependency column list.\n * @return {Array} Returns the sorted data.\n */\nfunction applyGroupSort (data, schema, sortingDetails, depColumns) {\n    sortingDetails = sortingDetails.filter((detail) => {\n        if (detail[1] === null) {\n            depColumns.push(detail[0]);\n            return false;\n        }\n        return true;\n    });\n    if (sortingDetails.length === 0) { return data; }\n\n    depColumns = depColumns.map(c => fieldInSchema(schema, c));\n\n    const sortedGroupMap = makeGroupMapAndSort(depColumns, data, schema, sortingDetails);\n    return data.map((row) => {\n        let i = 0;\n        let nextMap = sortedGroupMap;\n\n        while (!Array.isArray(nextMap)) {\n            nextMap = nextMap.get(row[depColumns[i++].index]);\n        }\n\n        return nextMap.shift();\n    });\n}\n\n/**\n * Sorts the data.\n *\n * @param {Object} dataObj - An object containing the data and schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n */\nexport function sortData (dataObj, sortingDetails) {\n    let { schema, data } = dataObj;\n\n    sortingDetails = sortingDetails.filter(sDetial => !!fieldInSchema(schema, sDetial[0]));\n    if (sortingDetails.length === 0) { return; }\n\n    let groupSortingIdx = sortingDetails.findIndex(sDetial => sDetial[1] === null);\n    groupSortingIdx = groupSortingIdx !== -1 ? groupSortingIdx : sortingDetails.length;\n\n    const standardSortingDetails = sortingDetails.slice(0, groupSortingIdx);\n    const groupSortingDetails = sortingDetails.slice(groupSortingIdx);\n\n    applyStandardSort(data, schema, standardSortingDetails);\n    data = applyGroupSort(data, schema, groupSortingDetails, standardSortingDetails.map(detail => detail[0]));\n\n    dataObj.uids = data.map(row => row.pop());\n    dataObj.data = data;\n}\n","import { rowDiffsetIterator } from './row-diffset-iterator';\nimport { sortData } from './sort';\nimport { FieldType, DimensionSubtype } from '../enums';\nimport { ROW_ID } from '../constants';\n\n/**\n * Builds the actual data array.\n *\n * @param {Array} fieldStore - An array of field.\n * @param {string} rowDiffset - A string consisting of which rows to be included eg. '0-2,4,6';\n * @param {string} colIdentifier - A string consisting of the details of which column\n * to be included eg 'date,sales,profit';\n * @param {Object} sortingDetails - An object containing the sorting details of the DataModel instance.\n * @param {Object} options - The options required to create the type of the data.\n * @return {Object} Returns an object containing the multidimensional array and the relative schema.\n */\nexport function dataBuilder ({ fields: fieldStore, idField }, rowDiffset, colIdentifier, sortingDetails, options) {\n    const idData = idField.data();\n\n    const defOptions = {\n        addUid: false,\n        columnWise: false\n    };\n    options = Object.assign({}, defOptions, options);\n\n    const retObj = {\n        schema: [],\n        data: [],\n        uids: []\n    };\n    const addUid = options.addUid;\n    const reqSorting = sortingDetails && sortingDetails.length > 0;\n    // It stores the fields according to the colIdentifier argument\n    const tmpDataArr = [];\n    // Stores the fields according to the colIdentifier argument\n    const colIArr = colIdentifier.split(',');\n\n    colIArr.forEach((colName) => {\n        for (let i = 0; i < fieldStore.length; i += 1) {\n            const name = fieldStore[i].name();\n            if (name === colName) {\n                tmpDataArr.push(fieldStore[i]);\n                break;\n            }\n        }\n    });\n\n    // Inserts the schema to the schema object\n    tmpDataArr.forEach((field) => {\n        /** @todo Need to use extend2 here otherwise user can overwrite the schema. */\n        retObj.schema.push(field.schema());\n    });\n\n    if (addUid) {\n        retObj.schema.push({\n            name: ROW_ID,\n            type: FieldType.DIMENSION,\n            subtype: DimensionSubtype.ID\n        });\n    }\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        retObj.data.push([]);\n        const insertInd = retObj.data.length - 1;\n        let start = 0;\n        tmpDataArr.forEach((field, ii) => {\n            retObj.data[insertInd][ii + start] = field.partialField.data[i];\n        });\n        if (addUid) {\n            retObj.data[insertInd][tmpDataArr.length] = idData[i];\n        }\n        // Creates an array of unique identifiers for each row\n        retObj.uids.push(idData[i]);\n\n        // If sorting needed then there is the need to expose the index\n        // mapping from the old index to its new index\n        if (reqSorting) { retObj.data[insertInd].push(idData[i]); }\n    });\n\n    // Handles the sort functionality\n    if (reqSorting) {\n        sortData(retObj, sortingDetails);\n    }\n\n    if (options.columnWise) {\n        const tmpData = Array(...Array(retObj.schema.length)).map(() => []);\n        retObj.data.forEach((tuple) => {\n            tuple.forEach((data, i) => {\n                tmpData[i].push(data);\n            });\n        });\n        retObj.data = tmpData;\n    }\n\n    return retObj;\n}\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n\n/**\n * Performs the union operation between two dm instances.\n *\n * @todo Fix the conflicts between union and difference terminology here.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function difference (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n   // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     * @param {boolean} addData - If true only tuple will be added to the data.\n     */\n    function prepareDataHelper(dm, fieldsObj, addData) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                if (addData) { data.push(tuple); }\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj, false);\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj, true);\n\n    return new DataModel(data, schema, { name });\n}\n\n","import { isArray } from '../utils';\nimport InvalidAwareTypes from '../invalid-aware-types';\nimport { GROUP_BY_FUNCTIONS } from '../enums';\n\nconst { SUM, AVG, FIRST, LAST, COUNT, STD, MIN, MAX } = GROUP_BY_FUNCTIONS;\n\nfunction getFilteredValues(arr) {\n    return arr.filter(item => !(item instanceof InvalidAwareTypes));\n}\n/**\n * Reducer function that returns the sum of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the sum of the array.\n */\nfunction sum (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        const filteredNumber = getFilteredValues(arr);\n        const totalSum = filteredNumber.length ?\n                            filteredNumber.reduce((acc, curr) => acc + curr, 0)\n                            : InvalidAwareTypes.NULL;\n        return totalSum;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that returns the average of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the mean value of the array.\n */\nfunction avg (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        const totalSum = sum(arr);\n        const len = arr.length || 1;\n        return (Number.isNaN(totalSum) || totalSum instanceof InvalidAwareTypes) ?\n                 InvalidAwareTypes.NULL : totalSum / len;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the min value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the minimum value of the array.\n */\nfunction min (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = getFilteredValues(arr);\n\n        return (filteredValues.length) ? Math.min(...filteredValues) : InvalidAwareTypes.NULL;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the max value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the maximum value of the array.\n */\nfunction max (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = getFilteredValues(arr);\n\n        return (filteredValues.length) ? Math.max(...filteredValues) : InvalidAwareTypes.NULL;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the first value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the first value of the array.\n */\nfunction first (arr) {\n    return arr[0];\n}\n\n/**\n * Reducer function that gives the last value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the last value of the array.\n */\nfunction last (arr) {\n    return arr[arr.length - 1];\n}\n\n/**\n * Reducer function that gives the count value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the length of the array.\n */\nfunction count (arr) {\n    if (isArray(arr)) {\n        return arr.length;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Calculates the variance of the input array.\n *\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the variance of the input array.\n */\nfunction variance (arr) {\n    let mean = avg(arr);\n    return avg(arr.map(num => (num - mean) ** 2));\n}\n\n/**\n * Calculates the square root of the variance of the input array.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the square root of the variance.\n */\nfunction std (arr) {\n    return Math.sqrt(variance(arr));\n}\n\n\nconst fnList = {\n    [SUM]: sum,\n    [AVG]: avg,\n    [MIN]: min,\n    [MAX]: max,\n    [FIRST]: first,\n    [LAST]: last,\n    [COUNT]: count,\n    [STD]: std\n};\n\nconst defaultReducerName = SUM;\n\nexport {\n    defaultReducerName,\n    sum as defReducer,\n    fnList,\n};\n","import { defReducer, fnList } from '../operator';\n\n/**\n * A page level storage which stores, registers, unregisters reducers for all the datamodel instances. There is only one\n * reducer store available in a page. All the datamodel instances receive same instance of reducer store. DataModel\n * out of the box provides handful of {@link reducer | reducers} which can be used as reducer funciton.\n *\n * @public\n * @namespace DataModel\n */\nclass ReducerStore {\n    constructor () {\n        this.store = new Map();\n        this.store.set('defReducer', defReducer);\n\n        Object.entries(fnList).forEach((key) => {\n            this.store.set(key[0], key[1]);\n        });\n    }\n\n    /**\n     * Changes the `defaultReducer` globally. For all the fields which does not have `defAggFn` mentioned in schema, the\n     * value of `defaultReducer` is used for aggregation.\n     *\n     * @public\n     * @param {string} [reducer='sum'] - The name of the default reducer. It picks up the definition from store by doing\n     * name lookup. If no name is found then it takes `sum` as the default reducer.\n     * @return {ReducerStore} Returns instance of the singleton store in page.\n     */\n    defaultReducer (...params) {\n        if (!params.length) {\n            return this.store.get('defReducer');\n        }\n\n        let reducer = params[0];\n\n        if (typeof reducer === 'function') {\n            this.store.set('defReducer', reducer);\n        } else {\n            reducer = String(reducer);\n            if (Object.keys(fnList).indexOf(reducer) !== -1) {\n                this.store.set('defReducer', fnList[reducer]);\n            } else {\n                throw new Error(`Reducer ${reducer} not found in registry`);\n            }\n        }\n        return this;\n    }\n\n    /**\n     *\n     * Registers a {@link reducer | reducer}.\n     * A {@link reducer | reducer} has to be registered before it is used.\n     *\n     * @example\n     *  // find the mean squared value of a given set\n     *  const reducerStore = DataModel.Reducers();\n     *\n     *  reducers.register('meanSquared', (arr) => {\n     *      const squaredVal = arr.map(item => item * item);\n     *      let sum = 0;\n     *      for (let i = 0, l = squaredVal.length; i < l; i++) {\n     *          sum += squaredVal[i++];\n     *      }\n     *\n     *      return sum;\n     *  })\n     *\n     *  // datamodel (dm) is already prepared with cars.json\n     *  const dm1 = dm.groupBy(['origin'], {\n     *      accleration: 'meanSquared'\n     *  });\n     *\n     * @public\n     *\n     * @param {string} name formal name for a reducer. If the given name already exists in store it is overridden by new\n     *      definition.\n     * @param {Function} reducer definition of {@link reducer} function.\n     *\n     * @return {Function} function for unregistering the reducer.\n     */\n    register (name, reducer) {\n        if (typeof reducer !== 'function') {\n            throw new Error('Reducer should be a function');\n        }\n\n        name = String(name);\n        this.store.set(name, reducer);\n\n        return () => { this.__unregister(name); };\n    }\n\n    __unregister (name) {\n        if (this.store.has(name)) {\n            this.store.delete(name);\n        }\n    }\n\n    resolve (name) {\n        if (name instanceof Function) {\n            return name;\n        }\n        return this.store.get(name);\n    }\n}\n\nconst reducerStore = (function () {\n    let store = null;\n\n    function getStore () {\n        if (store === null) {\n            store = new ReducerStore();\n        }\n        return store;\n    }\n    return getStore();\n}());\n\nexport default reducerStore;\n","import { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport DataModel from '../export';\nimport reducerStore from '../utils/reducer-store';\nimport { defaultReducerName } from './group-by-function';\nimport { FieldType, DimensionSubtype } from '../enums';\nimport { ROW_ID } from '../constants';\n\n/**\n * This function sanitize the user given field and return a common Array structure field\n * list\n * @param  {DataModel} dataModel the dataModel operating on\n * @param  {Array} fieldArr  user input of field Array\n * @return {Array}           arrays of field name\n */\nfunction getFieldArr (dataModel, fieldArr) {\n    const retArr = [];\n    const fieldStore = dataModel.getFieldspace();\n    const dimensions = fieldStore.getDimension();\n\n    Object.entries(dimensions).forEach(([key]) => {\n        if (fieldArr && fieldArr.length) {\n            if (fieldArr.indexOf(key) !== -1) {\n                retArr.push(key);\n            }\n        } else {\n            retArr.push(key);\n        }\n    });\n\n    return retArr;\n}\n\n/**\n * This sanitize the reducer provide by the user and create a common type of object.\n * user can give function Also\n * @param  {DataModel} dataModel     dataModel to worked on\n * @param  {Object|function} [reducers={}] reducer provided by the users\n * @return {Object}               object containing reducer function for every measure\n */\nfunction getReducerObj (dataModel, reducers = {}) {\n    const retObj = {};\n    const fieldStore = dataModel.getFieldspace();\n    const measures = fieldStore.getMeasure();\n    const defReducer = reducerStore.defaultReducer();\n\n    Object.keys(measures).forEach((measureName) => {\n        if (typeof reducers[measureName] !== 'string') {\n            reducers[measureName] = measures[measureName].defAggFn();\n        }\n        const reducerFn = reducerStore.resolve(reducers[measureName]);\n        if (reducerFn) {\n            retObj[measureName] = reducerFn;\n        } else {\n            retObj[measureName] = defReducer;\n            reducers[measureName] = defaultReducerName;\n        }\n    });\n    return retObj;\n}\n\n/**\n * main function which perform the group-by operations which reduce the measures value is the\n * fields are common according to the reducer function provided\n * @param  {DataModel} dataModel the dataModel to worked\n * @param  {Array} fieldArr  fields according to which the groupby should be worked\n * @param  {Object|Function} reducers  reducers function\n * @param {DataModel} existingDataModel Existing datamodel instance\n * @return {DataModel} new dataModel with the group by\n */\nfunction groupBy (dataModel, fieldArr, reducers) {\n    const sFieldArr = getFieldArr(dataModel, fieldArr);\n    const reducerObj = getReducerObj(dataModel, reducers);\n    const fieldStore = dataModel.getFieldspace();\n    const idData = dataModel.getPartialFieldspace().idField.data();\n    const fieldStoreObj = fieldStore.fieldsObj();\n    const dbName = fieldStore.name;\n    const dimensionArr = [];\n    const measureArr = [];\n    const schema = [];\n    const hashMap = {};\n    const data = [];\n    let newDataModel;\n\n    // Prepare the schema\n    Object.entries(fieldStoreObj).forEach(([key, value]) => {\n        if (sFieldArr.indexOf(key) !== -1 || reducerObj[key]) {\n            schema.push(extend2({}, value.schema()));\n\n            switch (value.schema().type) {\n            case FieldType.MEASURE:\n                measureArr.push(key);\n                break;\n            default:\n            case FieldType.DIMENSION:\n                dimensionArr.push(key);\n            }\n        }\n    });\n    // Prepare the data\n    let rowCount = 0;\n    const idMap = [];\n    rowDiffsetIterator(dataModel._rowDiffset, (i) => {\n        let hash = '';\n        dimensionArr.forEach((_) => {\n            hash = `${hash}-${fieldStoreObj[_].partialField.data[i]}`;\n        });\n        if (hashMap[hash] === undefined) {\n            hashMap[hash] = rowCount;\n            data.push({});\n            idMap.push([]);\n            dimensionArr.forEach((_) => {\n                data[rowCount][_] = fieldStoreObj[_].partialField.data[i];\n            });\n            measureArr.forEach((_) => {\n                data[rowCount][_] = [fieldStoreObj[_].partialField.data[i]];\n            });\n            idMap[rowCount] = [`${idData[i]}`];\n            rowCount += 1;\n        } else {\n            measureArr.forEach((_) => {\n                data[hashMap[hash]][_].push(fieldStoreObj[_].partialField.data[i]);\n            });\n            idMap[hashMap[hash]].push(`${idData[i]}`);\n        }\n    });\n\n    // reduction\n    let cachedStore = {};\n    let cloneProvider = () => dataModel.detachedRoot();\n    data.forEach((row, i) => {\n        const tuple = row;\n        measureArr.forEach((_) => {\n            tuple[_] = reducerObj[_](row[_], cloneProvider, cachedStore);\n        });\n        tuple[ROW_ID] = idMap[i];\n    });\n\n    schema.push({\n        name: ROW_ID,\n        type: FieldType.DIMENSION,\n        subtype: DimensionSubtype.ID\n    });\n\n    newDataModel = new DataModel(data, schema, { name: dbName });\n    return newDataModel;\n}\n\nexport { groupBy, getFieldArr, getReducerObj };\n","import { getCommonSchema } from './get-common-schema';\n\n/**\n * The filter function used in natural join.\n * It generates a function that will have the logic to join two\n * DataModel instances by the process of natural join.\n *\n * @param {DataModel} dm1 - The left DataModel instance.\n * @param {DataModel} dm2 - The right DataModel instance.\n * @return {Function} Returns a function that is used in cross-product operation.\n */\nexport function naturalJoinFilter (dm1, dm2) {\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    // const dm1FieldStoreName = dm1FieldStore.name;\n    // const dm2FieldStoreName = dm2FieldStore.name;\n    const commonSchemaArr = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    return (dm1Fields, dm2Fields) => {\n        let retainTuple = true;\n        commonSchemaArr.forEach((fieldName) => {\n            if (dm1Fields[fieldName].internalValue ===\n                dm2Fields[fieldName].internalValue && retainTuple) {\n                retainTuple = true;\n            } else {\n                retainTuple = false;\n            }\n        });\n        return retainTuple;\n    };\n}\n","import DataModel from '../export';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n/**\n * Performs the union operation between two dm instances.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function union (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n    // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     */\n    function prepareDataHelper (dm, fieldsObj) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                data.push(tuple);\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj);\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj);\n\n    return new DataModel(data, schema, { name });\n}\n","import { crossProduct } from './cross-product';\nimport { JOINS } from '../constants';\nimport { union } from './union';\n\n\nexport function leftOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel1, dataModel2, filterFn, false, JOINS.LEFTOUTER);\n}\n\nexport function rightOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel2, dataModel1, filterFn, false, JOINS.RIGHTOUTER);\n}\n\nexport function fullOuterJoin (dataModel1, dataModel2, filterFn) {\n    return union(leftOuterJoin(dataModel1, dataModel2, filterFn), rightOuterJoin(dataModel1, dataModel2, filterFn));\n}\n","/**\n * Stores the full data and the metadata of a field. It provides\n * a single source of data from which the future Field\n * instance can get a subset of it with a rowDiffset config.\n *\n * @class\n * @public\n */\nexport default class PartialField {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {string} name - The name of the field.\n     * @param {Array} data - The data array.\n     * @param {Object} schema - The schema object of the corresponding field.\n     * @param {FieldParser} parser - The parser instance corresponding to that field.\n     */\n    constructor (name, data, schema, parser) {\n        this.name = name;\n        this.schema = schema;\n        this.parser = parser;\n        this.data = this._sanitize(data);\n    }\n\n    /**\n     * Sanitizes the field data.\n     *\n     * @private\n     * @param {Array} data - The actual input data.\n     * @return {Array} Returns the sanitized data.\n     */\n    _sanitize (data) {\n        return data.map(datum => this.parser.parse(datum, { format: this.schema.format }));\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport PartialField from '../partial-field';\n\n/**\n * In {@link DataModel}, every tabular data consists of column, a column is stored as field.\n * Field contains all the data for a given column in an array.\n *\n * Each record consists of several fields; the fields of all records form the columns.\n * Examples of fields: name, gender, sex etc.\n *\n * In DataModel, each field can have multiple attributes which describes its data and behaviour.\n * A field can have two types of data: Measure and Dimension.\n *\n * A Dimension Field is the context on which a data is categorized and the measure is the numerical values that\n * quantify the data set.\n * In short a dimension is the lens through which you are looking at your measure data.\n *\n * Refer to {@link Schema} to get info about possible field attributes.\n *\n * @public\n * @class\n */\nexport default class Field {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        this.partialField = partialField;\n        this.rowDiffset = rowDiffset;\n    }\n\n    static parser() {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Generates the field type specific domain.\n     *\n     * @public\n     * @abstract\n     */\n    domain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the the field schema.\n     *\n     * @public\n     * @return {string} Returns the field schema.\n     */\n    schema () {\n        return this.partialField.schema;\n    }\n\n    /**\n     * Returns the name of the field.\n     *\n     * @public\n     * @return {string} Returns the name of the field.\n     */\n    name () {\n        return this.partialField.name;\n    }\n\n    /**\n     * Returns the type of the field.\n     *\n     * @public\n     * @return {string} Returns the type of the field.\n     */\n    type () {\n        return this.partialField.schema.type;\n    }\n\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return this.partialField.schema.subtype;\n    }\n\n    /**\n     * Returns the description of the field.\n     *\n     * @public\n     * @return {string} Returns the description of the field.\n     */\n    description () {\n        return this.partialField.schema.description;\n    }\n\n    /**\n     * Returns the display name of the field.\n     *\n     * @public\n     * @return {string} Returns the display name of the field.\n     */\n    displayName () {\n        return this.partialField.schema.displayName || this.partialField.schema.name;\n    }\n\n    /**\n     * Returns the data associated with the field.\n     *\n     * @public\n     * @return {Array} Returns the data.\n     */\n    data () {\n        const data = [];\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            data.push(this.partialField.data[i]);\n        });\n        return data;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @abstract\n     */\n    formattedData () {\n        throw new Error('Not yet implemented');\n    }\n\n    static get BUILDER() {\n        const builder = {\n            _params: {},\n            _context: this,\n            fieldName(name) {\n                this._params.name = name;\n                return this;\n            },\n            schema(schema) {\n                this._params.schema = schema;\n                return this;\n            },\n            data(data) {\n                this._params.data = data;\n                return this;\n            },\n            partialField(partialField) {\n                this._params.partialField = partialField;\n                return this;\n            },\n            rowDiffset(rowDiffset) {\n                this._params.rowDiffset = rowDiffset;\n                return this;\n            },\n            build() {\n                let partialField = null;\n                if (this._params.partialField instanceof PartialField) {\n                    partialField = this._params.partialField;\n                } else if (this._params.schema && this._params.data) {\n                    partialField = new PartialField(this._params.name,\n                                        this._params.data,\n                                        this._params.schema,\n                                        this._context.parser());\n                }\n                else {\n                    throw new Error('Invalid Field parameters');\n                }\n                return new this._context(partialField, this._params.rowDiffset);\n            }\n        };\n        return builder;\n    }\n}\n","import Field from '../field';\n\n/**\n * Represents dimension field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Dimension extends Field {\n    /**\n     * Returns the domain for the dimension field.\n     *\n     * @override\n     * @public\n     * @return {any} Returns the calculated domain.\n     */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @abstract\n     */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n     /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","import { formatNumber } from '../../utils';\nimport { defaultReducerName } from '../../operator/group-by-function';\nimport Field from '../field';\n\n/**\n * Represents measure field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Measure extends Field {\n  /**\n   * Returns the domain for the measure field.\n   *\n   * @override\n   * @public\n   * @return {any} Returns the calculated domain.\n   */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n  /**\n   * Returns the unit of the measure field.\n   *\n   * @public\n   * @return {string} Returns unit of the field.\n   */\n    unit () {\n        return this.partialField.schema.unit;\n    }\n\n  /**\n   * Returns the aggregation function name of the measure field.\n   *\n   * @public\n   * @return {string} Returns aggregation function name of the field.\n   */\n    defAggFn () {\n        return this.partialField.schema.defAggFn || defaultReducerName;\n    }\n\n  /**\n   * Returns the number format of the measure field.\n   *\n   * @public\n   * @return {Function} Returns number format of the field.\n   */\n    numberFormat () {\n        const { numberFormat } = this.partialField.schema;\n        return numberFormat instanceof Function ? numberFormat : formatNumber;\n    }\n\n  /**\n   * Calculates the corresponding field domain.\n   *\n   * @public\n   * @abstract\n   */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","/**\n * A interface to represent a parser which is responsible to parse the field.\n *\n * @public\n * @interface\n */\nexport default class FieldParser {\n    /**\n     * Parses a single value of a field and return the sanitized form.\n     *\n     * @public\n     * @abstract\n     */\n    parse () {\n        throw new Error('Not yet implemented');\n    }\n}\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the categorical values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class CategoricalParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the stringified form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the stringified value.\n   */\n    parse (val) {\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            result = String(val).trim();\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport { DimensionSubtype } from '../../enums';\nimport Dimension from '../dimension';\nimport CategoricalParser from '../parsers/categorical-parser';\n/**\n * Represents categorical field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Categorical extends Dimension {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return DimensionSubtype.CATEGORICAL;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        const hash = new Set();\n        const domain = [];\n\n        // here don't use this.data() as the iteration will be occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (!hash.has(datum)) {\n                hash.add(datum);\n                domain.push(datum);\n            }\n        });\n        return domain;\n    }\n\n    static parser() {\n        return new CategoricalParser();\n    }\n}\n","import { DateTimeFormatter } from '../../../utils';\nimport FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the temporal values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class TemporalParser extends FieldParser {\n\n    /**\n     * Parses a single value of a field and returns the millisecond value.\n     *\n     * @public\n     * @param {string|number} val - The value of the field.\n     * @return {number} Returns the millisecond value.\n     */\n    parse (val, { format }) {\n        let result;\n        // check if invalid date value\n        if (!this._dtf) {\n            this._dtf = new DateTimeFormatter(format);\n        }\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let nativeDate = this._dtf.getNativeDate(val);\n            result = nativeDate ? nativeDate.getTime() : InvalidAwareTypes.NA;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import { rowDiffsetIterator } from '../operator/row-diffset-iterator';\nimport InvalidAwareTypes from '../invalid-aware-types';\n\nexport const calculateContinuousDomain = (data, rowDiffset) => {\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    // here don't use this.data() as the iteration will be occurred two times on same data.\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const datum = data[i];\n        if (datum instanceof InvalidAwareTypes) {\n            return;\n        }\n\n        if (datum < min) {\n            min = datum;\n        }\n        if (datum > max) {\n            max = datum;\n        }\n    });\n\n    return [min, max];\n};\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport Dimension from '../dimension';\nimport { DateTimeFormatter } from '../../utils';\nimport InvalidAwareTypes from '../../invalid-aware-types';\nimport TemporalParser from '../parsers/temporal-parser';\nimport { calculateContinuousDomain } from '../helper';\n\n/**\n * Represents temporal field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Temporal extends Dimension {\n     /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        super(partialField, rowDiffset);\n\n        this._cachedMinDiff = null;\n    }\n\n     /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        return calculateContinuousDomain(this.partialField.data, this.rowDiffset);\n    }\n\n\n    /**\n     * Calculates the minimum consecutive difference from the associated field data.\n     *\n     * @public\n     * @return {number} Returns the minimum consecutive diff in milliseconds.\n     */\n    minimumConsecutiveDifference () {\n        if (this._cachedMinDiff) {\n            return this._cachedMinDiff;\n        }\n\n        const sortedData = this.data().filter(item => !(item instanceof InvalidAwareTypes)).sort((a, b) => a - b);\n        const arrLn = sortedData.length;\n        let minDiff = Number.POSITIVE_INFINITY;\n        let prevDatum;\n        let nextDatum;\n        let processedCount = 0;\n\n        for (let i = 1; i < arrLn; i++) {\n            prevDatum = sortedData[i - 1];\n            nextDatum = sortedData[i];\n\n            if (nextDatum === prevDatum) {\n                continue;\n            }\n\n            minDiff = Math.min(minDiff, nextDatum - sortedData[i - 1]);\n            processedCount++;\n        }\n\n        if (!processedCount) {\n            minDiff = null;\n        }\n        this._cachedMinDiff = minDiff;\n\n        return this._cachedMinDiff;\n    }\n\n    /**\n     * Returns the format specified in the input schema while creating field.\n     *\n     * @public\n     * @return {string} Returns the datetime format.\n     */\n    format () {\n        return this.partialField.schema.format;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data\n     * If data is of type invalid or has missing format use the raw value\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        const data = [];\n        const dataFormat = this.format();\n\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            // If value is of invalid type or format is missing\n            if (InvalidAwareTypes.isInvalid(datum) || (!dataFormat && Number.isFinite(datum))) {\n                // Use the invalid map value or the raw value\n                const parsedDatum = InvalidAwareTypes.getInvalidType(datum) || datum;\n                data.push(parsedDatum);\n            } else {\n                data.push(DateTimeFormatter.formatAs(datum, dataFormat));\n            }\n        });\n        return data;\n    }\n\n    static parser() {\n        return new TemporalParser();\n    }\n}\n\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the binned values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class BinnedParser extends FieldParser {\n  /**\n   * Parses a single binned value of a field and returns the sanitized value.\n   *\n   * @public\n   * @param {string} val - The value of the field.\n   * @return {string} Returns the sanitized value.\n   */\n    parse (val) {\n        const regex = /^\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*-\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*$/;\n        val = String(val);\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let matched = val.match(regex);\n            result = matched ? `${Number.parseFloat(matched[1])}-${Number.parseFloat(matched[2])}`\n                             : InvalidAwareTypes.NA;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import Dimension from '../dimension';\nimport BinnedParser from '../parsers/binned-parser';\n\n/**\n * Represents binned field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Binned extends Dimension {\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the last and first values of bins config array.\n     */\n    calculateDataDomain () {\n        const binsArr = this.partialField.schema.bins;\n        return [binsArr[0], binsArr[binsArr.length - 1]];\n    }\n\n    /**\n     * Returns the bins config provided while creating the field instance.\n     *\n     * @public\n     * @return {Array} Returns the bins array config.\n     */\n    bins () {\n        return this.partialField.schema.bins;\n    }\n\n    static parser() {\n        return new BinnedParser();\n    }\n}\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the continuous values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class ContinuousParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the number form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the number value.\n   */\n    parse (val) {\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let parsedVal = parseFloat(val, 10);\n            result = Number.isNaN(parsedVal) ? InvalidAwareTypes.NA : parsedVal;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import { MeasureSubtype } from '../../enums';\nimport Measure from '../measure';\nimport ContinuousParser from '../parsers/continuous-parser';\nimport { calculateContinuousDomain } from '../helper';\n\n/**\n * Represents continuous field subtype.\n *\n * @public\n * @class\n * @extends Measure\n */\nexport default class Continuous extends Measure {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return MeasureSubtype.CONTINUOUS;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the min and max values.\n     */\n    calculateDataDomain () {\n        return calculateContinuousDomain(this.partialField.data, this.rowDiffset);\n    }\n\n    static parser() {\n        return new ContinuousParser();\n    }\n}\n","import { FieldParser } from '..';\n/**\n * Wrapper around row identifier value. Row id value contains the unique id of each row which\n * remains same across all datamodels of same source.\n */\nexport class IdValue {\n    constructor (val) {\n        const valArr = val instanceof Array ? val.map(Number) : [Number(val)];\n        this._val = new Set(valArr);\n        this._hash = valArr[0];\n        this._valArr = valArr;\n        return this;\n    }\n\n    toString () {\n        return this._hash;\n    }\n\n    values () {\n        return this._valArr;\n    }\n}\n\n/**\n * A FieldParser which parses the id values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class IdParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the stringified form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the instance of id value.\n   */\n    parse (val) {\n        const result = val instanceof IdValue ? new IdValue(val.values()) : new IdValue(val);\n        return result;\n    }\n}\n","import { DimensionSubtype } from '../../enums';\nimport IdParser from '../parsers/id-parser';\nimport Categorical from '../categorical';\n\n/**\n * Represents id field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class ID extends Categorical {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return DimensionSubtype.ID;\n    }\n\n    static parser () {\n        return new IdParser();\n    }\n}\n","import Categorical from './categorical';\nimport Temporal from './temporal';\nimport Binned from './binned';\nimport Continuous from './continuous';\nimport { DimensionSubtype, MeasureSubtype } from '../enums';\nimport ID from './id';\n\n\nclass FieldTypeRegistry {\n    constructor() {\n        this._fieldType = new Map();\n    }\n\n    registerFieldType(subtype, dimension) {\n        this._fieldType.set(subtype, dimension);\n        return this;\n    }\n\n    has(type) {\n        return this._fieldType.has(type);\n    }\n\n    get(type) {\n        return this._fieldType.get(type);\n    }\n}\n\nconst registerDefaultFields = (store) => {\n    store\n                    .registerFieldType(DimensionSubtype.CATEGORICAL, Categorical)\n                    .registerFieldType(DimensionSubtype.ID, ID)\n                    .registerFieldType(DimensionSubtype.TEMPORAL, Temporal)\n                    .registerFieldType(DimensionSubtype.BINNED, Binned)\n                    .registerFieldType(MeasureSubtype.CONTINUOUS, Continuous);\n};\n\nconst fieldRegistry = (function () {\n    let store = null;\n    function getStore () {\n        store = new FieldTypeRegistry();\n        registerDefaultFields(store);\n        return store;\n    }\n    return store || getStore();\n}());\n\nexport default fieldRegistry;\n\n","import { FieldType, DimensionSubtype, MeasureSubtype } from './enums';\nimport { fieldRegistry } from './fields';\n\n/**\n * Creates a field instance according to the provided data and schema.\n *\n * @param {Array} data - The field data array.\n * @param {Object} schema - The field schema object.\n * @return {Field} Returns the newly created field instance.\n */\nfunction createUnitField(data, schema) {\n    data = data || [];\n\n    if (fieldRegistry.has(schema.subtype)) {\n        return fieldRegistry.get(schema.subtype)\n                        .BUILDER\n                        .fieldName(schema.name)\n                        .schema(schema)\n                        .data(data)\n                        .rowDiffset(`0-${data.length - 1}`)\n                        .build();\n    }\n    return fieldRegistry\n                    .get(schema.type === FieldType.MEASURE ? MeasureSubtype.CONTINUOUS : DimensionSubtype.CATEGORICAL)\n                    .BUILDER\n                    .fieldName(schema.name)\n                    .schema(schema)\n                    .data(data)\n                    .rowDiffset(`0-${data.length - 1}`)\n                    .build();\n}\n\n\n/**\n * Creates a field instance from partialField and rowDiffset.\n *\n * @param {PartialField} partialField - The corresponding partial field.\n * @param {string} rowDiffset - The data subset config.\n * @return {Field} Returns the newly created field instance.\n */\nexport function createUnitFieldFromPartial(partialField, rowDiffset) {\n    const { schema } = partialField;\n\n    if (fieldRegistry.has(schema.subtype)) {\n        return fieldRegistry.get(schema.subtype)\n                        .BUILDER\n                        .partialField(partialField)\n                        .rowDiffset(rowDiffset)\n                        .build();\n    }\n    return fieldRegistry\n                    .get(schema.type === FieldType.MEASURE ? MeasureSubtype.CONTINUOUS : DimensionSubtype.CATEGORICAL)\n                    .BUILDER\n                    .partialField(partialField)\n                    .rowDiffset(rowDiffset)\n                    .build();\n}\n\n/**\n * Creates the field instances with input data and schema.\n *\n * @param {Array} dataColumn - The data array for fields.\n * @param {Array} schema - The schema array for fields.\n * @param {Array} headers - The array of header names.\n * @return {Array.<Field>} Returns an array of newly created field instances.\n */\nexport function createFields(dataColumn, schema, headers) {\n    const headersObj = {};\n\n    if (!(headers && headers.length)) {\n        headers = schema.map(item => item.name);\n    }\n\n    headers.forEach((header, i) => {\n        headersObj[header] = i;\n    });\n\n    return schema.map(item => createUnitField(dataColumn[headersObj[item.name]], item));\n}\n","import { DataFormat } from './enums';\n\nexport default {\n    dataFormat: DataFormat.AUTO\n};\n","/**\n * Interface for all data converters\n */\nexport default class DataConverter {\n    constructor(type) {\n        this._type = type;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    convert() {\n        throw new Error('Convert method not implemented.');\n    }\n\n}\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import { columnMajor } from '../../utils';\n\n/**\n * Parses and converts data formatted in DSV array to a manageable internal format.\n *\n * @param {Array.<Array>} arr - A 2D array containing of the DSV data.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv data is header or not.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    [\"a\", \"b\", \"c\"],\n *    [1, 2, 3],\n *    [4, 5, 6],\n *    [7, 8, 9]\n * ];\n */\nfunction DSVArr(arr, schema, options) {\n    if (!Array.isArray(schema)) {\n        throw new Error('Schema missing or is in an unsupported format');\n    }\n    const defaultOption = {\n        firstRowHeader: true,\n    };\n    const schemaFields = schema.map(unitSchema => unitSchema.name);\n    options = Object.assign({}, defaultOption, options);\n\n    const columns = [];\n    const push = columnMajor(columns);\n\n    let headers = schemaFields;\n    if (options.firstRowHeader) {\n        // If header present then remove the first header row.\n        // Do in-place mutation to save space.\n        headers = arr.splice(0, 1)[0];\n    }\n    // create a map of the headers\n    const headerMap = headers.reduce((acc, h, i) => (\n        Object.assign(acc, { [h]: i })\n    ), {});\n\n    arr.forEach((fields) => {\n        const field = [];\n        schemaFields.forEach((schemaField) => {\n            const headIndex = headerMap[schemaField];\n            field.push(fields[headIndex]);\n        });\n        return push(...field);\n    });\n    return [schemaFields, columns];\n}\n\nexport default DSVArr;\n","import { dsvFormat as d3Dsv } from 'd3-dsv';\nimport DSVArr from './dsv-arr';\n\n/**\n * Parses and converts data formatted in DSV string to a manageable internal format.\n *\n * @todo Support to be given for https://tools.ietf.org/html/rfc4180.\n * @todo Sample implementation https://github.com/knrz/CSV.js/.\n *\n * @param {string} str - The input DSV string.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv string data is header or not.\n * @param {string} [options.fieldSeparator=\",\"] - The separator of two consecutive field.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = `\n * a,b,c\n * 1,2,3\n * 4,5,6\n * 7,8,9\n * `\n */\nfunction DSVStr (str, schema, options) {\n    const defaultOption = {\n        firstRowHeader: true,\n        fieldSeparator: ','\n    };\n    options = Object.assign({}, defaultOption, options);\n\n    const dsv = d3Dsv(options.fieldSeparator);\n    return DSVArr(dsv.parseRows(str), schema, options);\n}\n\nexport default DSVStr;\n","import DataConverter from '../model/dataConverter';\nimport DSVStr from '../utils/dsv-str';\nimport DataFormat from '../../enums/data-format';\n\nexport default class DSVStringConverter extends DataConverter {\n    constructor() {\n        super(DataFormat.DSV_STR);\n    }\n\n    convert(data, schema, options) {\n        return DSVStr(data, schema, options);\n    }\n}\n","import { columnMajor } from '../../utils';\n\n/**\n * Parses and converts data formatted in JSON to a manageable internal format.\n *\n * @param {Array.<Object>} arr - The input data formatted in JSON.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    {\n *      \"a\": 1,\n *      \"b\": 2,\n *      \"c\": 3\n *    },\n *    {\n *      \"a\": 4,\n *      \"b\": 5,\n *      \"c\": 6\n *    },\n *    {\n *      \"a\": 7,\n *      \"b\": 8,\n *      \"c\": 9\n *    }\n * ];\n */\nfunction FlatJSON (arr, schema) {\n    if (!Array.isArray(schema)) {\n        throw new Error('Schema missing or is in an unsupported format');\n    }\n\n    const header = {};\n    let i = 0;\n    let insertionIndex;\n    const columns = [];\n    const push = columnMajor(columns);\n    const schemaFieldsName = schema.map(unitSchema => unitSchema.name);\n\n    arr.forEach((item) => {\n        const fields = [];\n        schemaFieldsName.forEach((unitSchema) => {\n            if (unitSchema in header) {\n                insertionIndex = header[unitSchema];\n            } else {\n                header[unitSchema] = i++;\n                insertionIndex = i - 1;\n            }\n            fields[insertionIndex] = item[unitSchema];\n        });\n        push(...fields);\n    });\n\n    return [Object.keys(header), columns];\n}\n\nexport default FlatJSON;\n","import DataConverter from '../model/dataConverter';\nimport FlatJSON from '../utils/flat-json';\nimport DataFormat from '../../enums/data-format';\n\nexport default class JSONConverter extends DataConverter {\n    constructor() {\n        super(DataFormat.FLAT_JSON);\n    }\n\n    convert(data, schema, options) {\n        return FlatJSON(data, schema, options);\n    }\n}\n","import DataConverter from '../model/dataConverter';\nimport DSVArr from '../utils/dsv-arr';\nimport DataFormat from '../../enums/data-format';\n\nexport default class DSVArrayConverter extends DataConverter {\n    constructor() {\n        super(DataFormat.DSV_ARR);\n    }\n\n    convert(data, schema, options) {\n        return DSVArr(data, schema, options);\n    }\n}\n","import FlatJSON from './flat-json';\nimport DSVArr from './dsv-arr';\nimport DSVStr from './dsv-str';\nimport { detectDataFormat } from '../../utils';\n\n/**\n * Parses the input data and detect the format automatically.\n *\n * @param {string|Array} data - The input data.\n * @param {Object} options - An optional config specific to data format.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n */\nfunction Auto (data, schema, options) {\n    const converters = { FlatJSON, DSVStr, DSVArr };\n    const dataFormat = detectDataFormat(data);\n\n    if (!dataFormat) {\n        throw new Error('Couldn\\'t detect the data format');\n    }\n\n    return converters[dataFormat](data, schema, options);\n}\n\nexport default Auto;\n","import DataConverter from '../model/dataConverter';\nimport AUTO from '../utils/auto-resolver';\nimport DataFormat from '../../enums/data-format';\n\nexport default class AutoDataConverter extends DataConverter {\n    constructor() {\n        super(DataFormat.AUTO);\n    }\n\n    convert(data, schema, options) {\n        return AUTO(data, schema, options);\n    }\n}\n","import DataConverter from './model/dataConverter';\nimport { DSVStringConverter, DSVArrayConverter, JSONConverter, AutoDataConverter } from './defaultConverters';\n\nclass DataConverterStore {\n    constructor() {\n        this.store = new Map();\n        this.converters(this._getDefaultConverters());\n    }\n\n    _getDefaultConverters() {\n        return [\n            new DSVStringConverter(),\n            new DSVArrayConverter(),\n            new JSONConverter(),\n            new AutoDataConverter()\n        ];\n    }\n\n    /**\n     * Sets the given converters in the store and returns the store\n     * @param  {Array<DataConverter>} converters : contains array of converter instance\n     * @return { Map<String,DataConverter> }\n     */\n    converters(converters = []) {\n        converters.forEach(converter => this.store.set(converter.type, converter));\n        return this.store;\n    }\n\n    /**\n     * Registers a Converter of type DataConverter\n     * @param {DataConverter} converter : converter Instance\n     * @returns self\n     */\n    register(converter) {\n        if (converter instanceof DataConverter) {\n            this.store.set(converter.type, converter);\n            return this;\n        }\n        return null;\n    }\n\n    /**\n     * Rempves a converter from store\n     * @param {DataConverter} converter : converter Instance\n     * @returns self\n     */\n\n    unregister(converter) {\n        this.store.delete(converter.type);\n        return this;\n    }\n\n    get(name) {\n        if (this.store.has(name)) {\n            return this.store.get(name);\n        }\n        return null;\n    }\n\n}\n\nconst converterStore = (function () {\n    let store = null;\n\n    function getStore () {\n        store = new DataConverterStore();\n        return store;\n    }\n    return store || getStore();\n}());\n\nexport default converterStore;\n","import { FieldType, FilteringMode, DimensionSubtype, MeasureSubtype, DataFormat } from './enums';\nimport fieldStore from './field-store';\nimport Value from './value';\nimport {\n    rowDiffsetIterator\n} from './operator';\nimport { DM_DERIVATIVES, LOGICAL_OPERATORS, ROW_ID } from './constants';\nimport { createFields, createUnitFieldFromPartial } from './field-creator';\nimport defaultConfig from './default-config';\nimport { converterStore } from './converter';\nimport { fieldRegistry } from './fields';\nimport { extend2, detectDataFormat } from './utils';\n\n/**\n * Prepares the selection data.\n */\nfunction prepareSelectionData (fields, formattedData, rawData, i) {\n    const resp = {};\n\n    for (const [key, field] of fields.entries()) {\n        resp[field.name()] = new Value(formattedData[key][i], rawData[key][i], field);\n    }\n    return resp;\n}\n\nexport function prepareJoinData (fields) {\n    const resp = {};\n\n    for (const key in fields) {\n        resp[key] = new Value(fields[key].formattedValue, fields[key].rawValue, key);\n    }\n    return resp;\n}\n\nexport const updateFields = ([rowDiffset, colIdentifier], partialFieldspace, fieldStoreName) => {\n    let collID = colIdentifier.length ? colIdentifier.split(',') : [];\n    let partialFieldMap = partialFieldspace.fieldsObj();\n    let newFields = collID.map(coll => createUnitFieldFromPartial(partialFieldMap[coll].partialField, rowDiffset));\n    return fieldStore.createNamespace(newFields, fieldStoreName);\n};\n\nexport const persistCurrentDerivation = (model, operation, config = {}, criteriaFn) => {\n    if (operation === DM_DERIVATIVES.COMPOSE) {\n        model._derivation.length = 0;\n        model._derivation.push(...criteriaFn);\n    } else {\n        model._derivation.push({\n            op: operation,\n            meta: config,\n            criteria: criteriaFn\n        });\n    }\n};\nexport const persistAncestorDerivation = (sourceDm, newDm) => {\n    newDm._ancestorDerivation.push(...sourceDm._ancestorDerivation, ...sourceDm._derivation);\n};\n\nexport const persistDerivations = (sourceDm, model, operation, config = {}, criteriaFn) => {\n    persistCurrentDerivation(model, operation, config, criteriaFn);\n    persistAncestorDerivation(sourceDm, model);\n};\n\nconst selectModeMap = {\n    [FilteringMode.NORMAL]: {\n        diffIndex: ['rowDiffset'],\n        calcDiff: [true, false]\n    },\n    [FilteringMode.INVERSE]: {\n        diffIndex: ['rejectRowDiffset'],\n        calcDiff: [false, true]\n    },\n    [FilteringMode.ALL]: {\n        diffIndex: ['rowDiffset', 'rejectRowDiffset'],\n        calcDiff: [true, true]\n    }\n};\n\nconst generateRowDiffset = (rowDiffset, i, lastInsertedValue) => {\n    if (lastInsertedValue !== -1 && i === (lastInsertedValue + 1)) {\n        const li = rowDiffset.length - 1;\n\n        rowDiffset[li] = `${rowDiffset[li].split('-')[0]}-${i}`;\n    } else {\n        rowDiffset.push(`${i}`);\n    }\n};\n\nexport const selectRowDiffsetIterator = (rowDiffset, checker, mode) => {\n    let lastInsertedValueSel = -1;\n    let lastInsertedValueRej = -1;\n    const newRowDiffSet = [];\n    const rejRowDiffSet = [];\n\n    const [shouldSelect, shouldReject] = selectModeMap[mode].calcDiff;\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const checkerResult = checker(i);\n        checkerResult && shouldSelect && generateRowDiffset(newRowDiffSet, i, lastInsertedValueSel);\n        !checkerResult && shouldReject && generateRowDiffset(rejRowDiffSet, i, lastInsertedValueRej);\n    });\n    return {\n        rowDiffset: newRowDiffSet.join(','),\n        rejectRowDiffset: rejRowDiffSet.join(',')\n    };\n};\n\n\nexport const rowSplitDiffsetIterator = (rowDiffset, checker, mode, dimensionArr, fieldStoreObj) => {\n    let lastInsertedValue = {};\n    const splitRowDiffset = {};\n    const dimensionMap = {};\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        if (checker(i)) {\n            let hash = '';\n\n            let dimensionSet = { keys: {} };\n\n            dimensionArr.forEach((_) => {\n                const data = fieldStoreObj[_].partialField.data[i];\n                hash = `${hash}-${data}`;\n                dimensionSet.keys[_] = data;\n            });\n\n            if (splitRowDiffset[hash] === undefined) {\n                splitRowDiffset[hash] = [];\n                lastInsertedValue[hash] = -1;\n                dimensionMap[hash] = dimensionSet;\n            }\n\n            generateRowDiffset(splitRowDiffset[hash], i, lastInsertedValue[hash]);\n            lastInsertedValue[hash] = i;\n        }\n    });\n\n    return {\n        splitRowDiffset,\n        dimensionMap\n    };\n};\n\n\nexport const selectHelper = (clonedDm, selectFn, config, sourceDm, iterator) => {\n    let cachedStore = {};\n    let cloneProvider = () => sourceDm.detachedRoot();\n    const { mode } = config;\n    const rowDiffset = clonedDm._rowDiffset;\n    const cachedValueObjects = clonedDm._partialFieldspace._cachedValueObjects;\n\n    const selectorHelperFn = index => selectFn(\n        cachedValueObjects[index],\n        index,\n        cloneProvider,\n        cachedStore\n    );\n\n    return iterator(rowDiffset, selectorHelperFn, mode);\n};\n\nexport const cloneWithAllFields = (model) => {\n    const clonedDm = model.clone(false);\n    const partialFieldspace = model.getPartialFieldspace();\n    clonedDm._colIdentifier = partialFieldspace.fields.map(f => f.name()).join(',');\n\n    // flush out cached namespace values on addition of new fields\n    partialFieldspace._cachedFieldsObj = null;\n    partialFieldspace._cachedDimension = null;\n    partialFieldspace._cachedMeasure = null;\n    clonedDm.__calculateFieldspace().calculateFieldsConfig();\n\n    return clonedDm;\n};\n\nconst getKey = (arr, data, fn, rowId) => {\n    let key = fn(arr, data, 0, rowId);\n\n    for (let i = 1, len = arr.length; i < len; i++) {\n        key = `${key},${fn(arr, data, i, rowId)}`;\n    }\n    return key;\n};\n\nconst keyFn = (arr, fields, idx, rowId) => {\n    const field = arr[idx];\n    const val = field === ROW_ID ? rowId : fields[field].internalValue;\n    return val;\n};\n\nconst domainChecker = (val, domain) => {\n    const domainArr = domain[0] instanceof Array ? domain : [domain];\n    return domainArr.some(dom => val >= dom[0] && val <= dom[1]);\n};\n\nconst boundsChecker = {\n    [MeasureSubtype.CONTINUOUS]: domainChecker,\n    [DimensionSubtype.TEMPORAL]: domainChecker\n};\n\nconst isWithinDomain = (value, domain, fieldType) => boundsChecker[fieldType](value, domain);\n\nexport const filterPropagationModel = (model, propModels, config = {}) => {\n    let fns = [];\n    const operation = config.operation || LOGICAL_OPERATORS.AND;\n    const { filterByDim = true, filterByMeasure = false, clone = true } = config;\n    const clonedModel = clone ? cloneWithAllFields(model) : model;\n    const modelFieldsConfig = clonedModel.getFieldsConfig();\n    const uids = model.getPartialFieldspace().idField.data();\n\n    if (!propModels.length) {\n        fns = [() => false];\n    } else {\n        fns = propModels.map(propModel => (({ criteria = {} }) => {\n            const { identifiers = [[], []], range } = criteria;\n            let [fieldNames = [], values = []] = identifiers;\n            const indices = fieldNames.reduce((map, name, i) => {\n                map[name] = i;\n                return map;\n            }, {});\n            fieldNames = fieldNames.filter(field => (field in modelFieldsConfig &&\n                modelFieldsConfig[field].def.type === FieldType.DIMENSION) || field === ROW_ID);\n            const dLen = fieldNames.length;\n            const valuesMap = {};\n\n            if (dLen) {\n                for (let i = 1, len = identifiers.length; i < len; i++) {\n                    const row = identifiers[i];\n                    let key;\n                    if (ROW_ID in indices) {\n                        const ids = row[indices[ROW_ID]];\n                        if (ids) {\n                            ids.values().forEach((id) => {\n                                key = `${fieldNames.map((field) => {\n                                    const idx = indices[field];\n                                    return field === ROW_ID ? id : row[idx];\n                                })}`;\n                                valuesMap[key] = 1;\n                            });\n                        }\n                    } else {\n                        key = `${fieldNames.map((field) => {\n                            const idx = indices[field];\n                            return row[idx];\n                        })}`;\n                        valuesMap[key] = 1;\n                    }\n                }\n            }\n            let rangeKeys = Object.keys(range || {}).filter(field => field in modelFieldsConfig);\n            const hasData = values.length || rangeKeys.length;\n\n            if (!filterByMeasure) {\n                rangeKeys = rangeKeys.filter(field => modelFieldsConfig[field].def.type !== FieldType.MEASURE);\n            }\n\n            if (!filterByDim) {\n                rangeKeys = rangeKeys.filter(field => modelFieldsConfig[field].def.type !== FieldType.DIMENSION);\n            }\n\n            return hasData ? (fields, i) => {\n                let present = true;\n                if (filterByDim) {\n                    present = dLen ? valuesMap[getKey(fieldNames, fields, keyFn, uids[i])] : true;\n                }\n\n                return rangeKeys.every((field) => {\n                    const val = fields[field].internalValue;\n                    return isWithinDomain(val, range[field], modelFieldsConfig[field].def.subtype);\n                }) && present;\n            } : () => false;\n        })(propModel));\n    }\n\n    let filteredModel;\n    if (operation === LOGICAL_OPERATORS.AND) {\n        filteredModel = clonedModel.select((fields, i) => fns.every(fn => fn(fields, i)), {\n            saveChild: false\n        });\n    } else {\n        filteredModel = clonedModel.select((fields, i) => fns.some(fn => fn(fields, i)), {\n            saveChild: false\n        });\n    }\n\n    return filteredModel;\n};\n\n\nexport const splitWithSelect = (sourceDm, dimensionArr, reducerFn = val => val, config) => {\n    const {\n        saveChild,\n    } = config;\n    const fieldStoreObj = sourceDm.getFieldspace().fieldsObj();\n\n    const {\n        splitRowDiffset,\n        dimensionMap\n    } = selectHelper(\n        sourceDm.clone(saveChild),\n        reducerFn,\n        config,\n        sourceDm,\n        (...params) => rowSplitDiffsetIterator(...params, dimensionArr, fieldStoreObj)\n        );\n\n    const clonedDMs = [];\n    Object.keys(splitRowDiffset).sort().forEach((e) => {\n        if (splitRowDiffset[e]) {\n            const cloned = sourceDm.clone(saveChild);\n            const derivation = dimensionMap[e];\n            cloned._rowDiffset = splitRowDiffset[e].join(',');\n            cloned.__calculateFieldspace().calculateFieldsConfig();\n\n            const derivationFormula = fields => dimensionArr.every(_ => fields[_].internalValue === derivation.keys[_]);\n            // Store reference to child model and selector function\n            if (saveChild) {\n                persistDerivations(sourceDm, cloned, DM_DERIVATIVES.SELECT, config, derivationFormula);\n            }\n            cloned._derivation[cloned._derivation.length - 1].meta = dimensionMap[e];\n\n            clonedDMs.push(cloned);\n        }\n    });\n\n\n    return clonedDMs;\n};\nexport const addDiffsetToClonedDm = (clonedDm, rowDiffset, sourceDm, selectConfig, selectFn) => {\n    clonedDm._rowDiffset = rowDiffset;\n    clonedDm.__calculateFieldspace().calculateFieldsConfig();\n    persistDerivations(\n        sourceDm,\n        clonedDm,\n        DM_DERIVATIVES.SELECT,\n         { config: selectConfig },\n          selectFn\n    );\n};\n\n\nexport const cloneWithSelect = (sourceDm, selectFn, selectConfig, cloneConfig) => {\n    let extraCloneDm = {};\n\n    let { mode } = selectConfig;\n\n    const cloned = sourceDm.clone(cloneConfig.saveChild);\n    const setOfRowDiffsets = selectHelper(\n        cloned,\n        selectFn,\n        selectConfig,\n        sourceDm,\n        selectRowDiffsetIterator\n    );\n    const diffIndex = selectModeMap[mode].diffIndex;\n\n    addDiffsetToClonedDm(cloned, setOfRowDiffsets[diffIndex[0]], sourceDm, selectConfig, selectFn);\n\n    if (diffIndex.length > 1) {\n        extraCloneDm = sourceDm.clone(cloneConfig.saveChild);\n        addDiffsetToClonedDm(extraCloneDm, setOfRowDiffsets[diffIndex[1]], sourceDm, selectConfig, selectFn);\n        return [cloned, extraCloneDm];\n    }\n\n    return cloned;\n};\n\nexport const cloneWithProject = (sourceDm, projField, config, allFields) => {\n    const cloned = sourceDm.clone(config.saveChild);\n    let projectionSet = projField;\n    if (config.mode === FilteringMode.INVERSE) {\n        projectionSet = allFields.filter(fieldName => projField.indexOf(fieldName) === -1);\n    }\n    // cloned._colIdentifier = sourceDm._colIdentifier.split(',')\n    //                         .filter(coll => projectionSet.indexOf(coll) !== -1).join();\n    cloned._colIdentifier = projectionSet.join(',');\n    cloned.__calculateFieldspace().calculateFieldsConfig();\n\n    persistDerivations(\n        sourceDm,\n        cloned,\n        DM_DERIVATIVES.PROJECT,\n        { projField, config, actualProjField: projectionSet },\n        null\n    );\n\n    return cloned;\n};\n\n\nexport const splitWithProject = (sourceDm, projFieldSet, config, allFields) =>\n    projFieldSet.map(projFields =>\n        cloneWithProject(sourceDm, projFields, config, allFields));\n\nexport const sanitizeUnitSchema = (unitSchema) => {\n    // Do deep clone of the unit schema as the user might change it later.\n    unitSchema = extend2({}, unitSchema);\n    if (!unitSchema.type) {\n        unitSchema.type = FieldType.DIMENSION;\n    }\n\n    if (!unitSchema.subtype) {\n        switch (unitSchema.type) {\n        case FieldType.MEASURE:\n            unitSchema.subtype = MeasureSubtype.CONTINUOUS;\n            break;\n        default:\n        case FieldType.DIMENSION:\n            unitSchema.subtype = DimensionSubtype.CATEGORICAL;\n            break;\n        }\n    }\n\n    return unitSchema;\n};\n\nexport const validateUnitSchema = (unitSchema) => {\n    const { type, subtype, name } = unitSchema;\n    if (type === FieldType.DIMENSION || type === FieldType.MEASURE) {\n        if (!fieldRegistry.has(subtype)) {\n            throw new Error(`DataModel doesn't support measure field subtype ${subtype} used for ${name} field`);\n        }\n    } else {\n        throw new Error(`DataModel doesn't support field type ${type} used for ${name} field`);\n    }\n};\n\nexport const sanitizeAndValidateSchema = schema => schema.map((unitSchema) => {\n    unitSchema = sanitizeUnitSchema(unitSchema);\n    validateUnitSchema(unitSchema);\n    return unitSchema;\n});\n\nexport const resolveFieldName = (schema, dataHeader) => {\n    schema.forEach((unitSchema) => {\n        const fieldNameAs = unitSchema.as;\n        if (!fieldNameAs) { return; }\n\n        const idx = dataHeader.indexOf(unitSchema.name);\n        dataHeader[idx] = fieldNameAs;\n        unitSchema.name = fieldNameAs;\n        delete unitSchema.as;\n    });\n};\n\nexport const updateData = (relation, data, schema, options) => {\n    schema = sanitizeAndValidateSchema(schema);\n    options = Object.assign(Object.assign({}, defaultConfig), options);\n    const converter = converterStore.get(options.dataFormat);\n\n\n    if (!converter) {\n        throw new Error(`No converter function found for ${options.dataFormat} format`);\n    }\n\n    let [header, formattedData] = converter.convert(data, schema, options);\n    resolveFieldName(schema, header);\n\n    const idIndex = schema.findIndex(field => field.subtype === DimensionSubtype.ID);\n    let idData;\n\n    if (idIndex !== -1) {\n        idData = formattedData[idIndex] || [];\n        formattedData = formattedData.filter((d, i) => i !== idIndex);\n        header = header.filter((d, i) => i !== idIndex);\n        schema = schema.filter(field => field.subtype !== DimensionSubtype.ID);\n    } else {\n        const rowLength = (formattedData[0] && formattedData[0].length) || 0;\n        idData = new Array(rowLength).fill().map((d, i) => i);\n    }\n\n    const fieldArr = createFields(formattedData, schema, header);\n\n    const idField = createFields([idData], [{\n        name: ROW_ID,\n        type: 'dimension',\n        subtype: DimensionSubtype.ID\n    }], [ROW_ID])[0];\n\n\n    // This will create a new fieldStore with the fields\n    const nameSpace = fieldStore.createNamespace(fieldArr, options.name, idField);\n    relation._partialFieldspace = nameSpace;\n\n    // If data is provided create the default colIdentifier and rowDiffset\n    relation._rowDiffset = formattedData.length && formattedData[0].length ? `0-${formattedData[0].length - 1}` : '';\n\n    // This stores the value objects which is passed to the filter method when selection operation is done.\n    const valueObjects = [];\n    const { fields } = nameSpace;\n    const rawFieldsData = fields.map(field => field.data());\n    const formattedFieldsData = fields.map(field => field.formattedData());\n    const idFieldData = idField.data();\n    rowDiffsetIterator(relation._rowDiffset, (i) => {\n        valueObjects[i] = prepareSelectionData(fields, formattedFieldsData, rawFieldsData, i);\n        valueObjects[i][ROW_ID] = new Value(idFieldData[i], idFieldData[i], idField);\n    });\n    nameSpace._cachedValueObjects = valueObjects;\n    relation._colIdentifier = (schema.map(_ => _.name)).join();\n    relation._dataFormat = options.dataFormat === DataFormat.AUTO ? detectDataFormat(data) : options.dataFormat;\n    return relation;\n};\n\nexport const fieldInSchema = (schema, field) => {\n    let i = 0;\n\n    for (; i < schema.length; ++i) {\n        if (field === schema[i].name) {\n            return {\n                name: field,\n                type: schema[i].subtype || schema[i].type,\n                index: i,\n            };\n        }\n    }\n    return null;\n};\n\nexport const getDerivationArguments = (derivation) => {\n    let params = [];\n    let operation;\n    operation = derivation.op;\n    switch (operation) {\n    case DM_DERIVATIVES.SELECT:\n        params = [derivation.criteria];\n        break;\n    case DM_DERIVATIVES.PROJECT:\n        params = [derivation.meta.actualProjField];\n        break;\n    case DM_DERIVATIVES.SORT:\n        params = [derivation.criteria];\n        break;\n    case DM_DERIVATIVES.GROUPBY:\n        operation = 'groupBy';\n        params = [derivation.meta.groupByString.split(','), derivation.criteria];\n        break;\n    default:\n        operation = null;\n    }\n\n    return {\n        operation,\n        params\n    };\n};\n\nconst applyExistingOperationOnModel = (propModel, dataModel) => {\n    const derivations = dataModel.getDerivations();\n    let selectionModel = propModel;\n\n    derivations.forEach((derivation) => {\n        if (!derivation) {\n            return;\n        }\n\n        const { operation, params } = getDerivationArguments(derivation);\n        if (operation) {\n            selectionModel = selectionModel[operation](...params, {\n                saveChild: false\n            });\n        }\n    });\n\n    return selectionModel;\n};\n\nconst getFilteredModel = (propModel, path) => {\n    for (let i = 0, len = path.length; i < len; i++) {\n        const model = path[i];\n        propModel = applyExistingOperationOnModel(propModel, model);\n    }\n    return propModel;\n};\n\nconst propagateIdentifiers = (dataModel, propModel, config = {}, propModelInf = {}) => {\n    const excludeModels = propModelInf.excludeModels || [];\n    const criterias = propModelInf.criteria;\n\n    const propagate = excludeModels.length ? excludeModels.indexOf(dataModel) === -1 : true;\n\n    propagate && dataModel.handlePropagation(propModel, config);\n\n    const children = dataModel._children;\n    children.forEach((child) => {\n        const matchingCriteria = criterias.filter(val => val.groupedModel === child);\n        let selectionModel = applyExistingOperationOnModel(propModel, child);\n\n        if (matchingCriteria.length) {\n            selectionModel = filterPropagationModel(selectionModel, matchingCriteria, {\n                filterByDim: false,\n                filterByMeasure: true,\n                clone: false\n            });\n        }\n        propagateIdentifiers(child, selectionModel, config, propModelInf);\n    });\n};\n\nexport const getRootGroupByModel = (model) => {\n    while (model._parent && model._derivation.find(d => d.op !== DM_DERIVATIVES.GROUPBY)) {\n        model = model._parent;\n    }\n    return model;\n};\n\nexport const getRootDataModel = (model) => {\n    while (model._parent) {\n        model = model._parent;\n    }\n    return model;\n};\n\nexport const getPathToRootModel = (model, path = []) => {\n    while (model._parent) {\n        path.push(model);\n        model = model._parent;\n    }\n    return path;\n};\n\nexport const propagateToAllDataModels = (identifiers, rootModels, propagationInf, config) => {\n    let criteria;\n    const { propagationNameSpace, propagateToSource } = propagationInf;\n    const propagationSourceId = propagationInf.sourceId;\n    const filterFn = (entry) => {\n        const filter = config.filterFn || (() => true);\n        return filter(entry, config);\n    };\n\n    const addGroupedModel = ({ config: conf, model }) => {\n        const { criteria: crit } = conf;\n        let groupedModel;\n\n        if (crit !== null && crit.fields.some(d => d.type === FieldType.MEASURE)) {\n            groupedModel = getRootGroupByModel(model);\n        }\n        return Object.assign({}, conf, {\n            groupedModel\n        });\n    };\n\n    let criterias = [];\n\n    if (identifiers === null) {\n        criterias = [{\n            criteria: []\n        }];\n        criteria = [];\n    } else {\n        let actionCriterias = Object.values(propagationNameSpace.mutableActions);\n        if (propagateToSource !== false) {\n            actionCriterias = actionCriterias.filter(d => d.config.sourceId !== propagationSourceId);\n        }\n\n        const filteredCriteria = actionCriterias.filter(filterFn);\n\n        const excludeModels = [];\n\n        if (propagateToSource !== false) {\n            const sourceActionCriterias = Object.values(propagationNameSpace.mutableActions);\n\n            sourceActionCriterias.forEach((actionInf) => {\n                const actionConf = actionInf.config;\n                if (actionConf.applyOnSource === false && actionConf.action === config.action &&\n                        actionConf.sourceId !== propagationSourceId) {\n                    excludeModels.push(actionInf.model);\n                    criteria = sourceActionCriterias.filter(d => d !== actionInf).map(addGroupedModel);\n                    criteria.length && criterias.push({\n                        criteria,\n                        models: actionInf.model,\n                        path: getPathToRootModel(actionInf.model)\n                    });\n                }\n            });\n        }\n\n\n        criteria = [].concat(...[...filteredCriteria.map(addGroupedModel), {\n            criteria: identifiers,\n            groupedModel: identifiers !== null && identifiers.fields.some(d => d.type === FieldType.MEASURE) ?\n                getRootGroupByModel(propagationInf.propagationSource) : null\n        }]).filter(d => d !== null);\n        criterias.push({\n            criteria,\n            excludeModels: [...excludeModels, ...config.excludeModels || []]\n        });\n    }\n\n    const rootModel = rootModels.model;\n\n    const propConfig = Object.assign({\n        sourceIdentifiers: identifiers,\n        propagationSourceId\n    }, config);\n\n    criterias.forEach((inf) => {\n        const { criteria: crit } = inf;\n        const propagationModel = filterPropagationModel(rootModel, crit, {\n            filterByMeasure: !!crit.find(d => d.groupedModel === rootModel)\n        });\n        const path = inf.path;\n\n        if (path) {\n            const filteredModel = getFilteredModel(propagationModel, path.reverse());\n            inf.models.handlePropagation(filteredModel, propConfig);\n        } else {\n            propagateIdentifiers(rootModel, propagationModel, propConfig, {\n                excludeModels: inf.excludeModels,\n                criteria: crit\n            });\n        }\n    });\n};\n\nexport const propagateImmutableActions = (propagationNameSpace, rootModel, propagationInf) => {\n    const immutableActions = propagationNameSpace.immutableActions;\n\n    for (const action in immutableActions) {\n        const actionInf = immutableActions[action];\n        const actionConf = actionInf.config;\n        const propagationSourceId = propagationInf.config.sourceId;\n        const filterImmutableAction = propagationInf.propConfig.filterImmutableAction ?\n            propagationInf.propConfig.filterImmutableAction(actionConf, propagationInf.config) : true;\n        if (actionConf.sourceId !== propagationSourceId && filterImmutableAction) {\n            const criteriaModel = actionConf.criteria;\n            propagateToAllDataModels(criteriaModel, {\n                model: rootModel,\n                groupByModel: getRootGroupByModel(actionInf.model)\n            }, {\n                propagationNameSpace,\n                propagateToSource: false,\n                sourceId: propagationSourceId,\n                propagationSource: actionInf.model\n            }, actionConf);\n        }\n    }\n};\n\nexport const addToPropNamespace = (propagationNameSpace, config = {}, model) => {\n    let sourceNamespace;\n    const isMutableAction = config.isMutableAction;\n    const criteria = config.criteria;\n    const key = `${config.action}-${config.sourceId}`;\n\n    if (isMutableAction) {\n        sourceNamespace = propagationNameSpace.mutableActions;\n    } else {\n        sourceNamespace = propagationNameSpace.immutableActions;\n    }\n\n    if (criteria === null) {\n        delete sourceNamespace[key];\n    } else {\n        sourceNamespace[key] = {\n            model,\n            config\n        };\n    }\n\n    return this;\n};\n\n\nexport const getNormalizedProFields = (projField, allFields, fieldConfig) => {\n    const normalizedProjField = projField.reduce((acc, field) => {\n        if (field.constructor.name === 'RegExp') {\n            acc.push(...allFields.filter(fieldName => fieldName.search(field) !== -1));\n        } else if (field in fieldConfig) {\n            acc.push(field);\n        }\n        return acc;\n    }, []);\n    return Array.from(new Set(normalizedProjField)).map(field => field.trim());\n};\n\n/**\n * Get the numberFormatted value if numberFormat present,\n * else returns the supplied value.\n * @param {Object} field Field Instance\n * @param {Number|String} value\n * @return {Number|String}\n */\nexport const getNumberFormattedVal = (field, value) => {\n    if (field.numberFormat) {\n        return field.numberFormat()(value);\n    }\n    return value;\n};\n","import { FilteringMode } from './enums';\nimport { getUniqueId } from './utils';\nimport {\n    updateFields,\n    cloneWithSelect,\n    cloneWithProject,\n    updateData,\n    getNormalizedProFields\n} from './helper';\nimport { crossProduct, difference, naturalJoinFilter, union } from './operator';\n\n/**\n * Relation provides the definitions of basic operators of relational algebra like *selection*, *projection*, *union*,\n * *difference* etc.\n *\n * It is extended by {@link DataModel} to inherit the functionalities of relational algebra concept.\n *\n * @class\n * @public\n * @module Relation\n * @namespace DataModel\n */\nclass Relation {\n\n    /**\n     * Creates a new Relation instance by providing underlying data and schema.\n     *\n     * @private\n     *\n     * @param {Object | string | Relation} data - The input tabular data in dsv or json format or\n     * an existing Relation instance object.\n     * @param {Array} schema - An array of data schema.\n     * @param {Object} [options] - The optional options.\n     */\n    constructor (...params) {\n        let source;\n\n        this._parent = null;\n        this._derivation = [];\n        this._ancestorDerivation = [];\n        this._children = [];\n\n        if (params.length === 1 && ((source = params[0]) instanceof Relation)) {\n            // parent datamodel was passed as part of source\n            this._colIdentifier = source._colIdentifier;\n            this._rowDiffset = source._rowDiffset;\n            this._dataFormat = source._dataFormat;\n            this._parent = source;\n            this._partialFieldspace = this._parent._partialFieldspace;\n            this._fieldStoreName = getUniqueId();\n            this.__calculateFieldspace().calculateFieldsConfig();\n        } else {\n            updateData(this, ...params);\n            this._fieldStoreName = this._partialFieldspace.name;\n            this.__calculateFieldspace().calculateFieldsConfig();\n            this._propagationNameSpace = {\n                mutableActions: {},\n                immutableActions: {}\n            };\n        }\n    }\n\n    /**\n     * Retrieves the {@link Schema | schema} details for every {@link Field | field} as an array.\n     *\n     * @public\n     *\n     * @return {Array.<Schema>} Array of fields schema.\n     *      ```\n     *      [\n     *          { name: 'Name', type: 'dimension' },\n     *          { name: 'Miles_per_Gallon', type: 'measure', numberFormat: (val) => `${val} miles / gallon` },\n     *          { name: 'Cylinder', type: 'dimension' },\n     *          { name: 'Displacement', type: 'measure', defAggFn: 'max' },\n     *          { name: 'HorsePower', type: 'measure', defAggFn: 'max' },\n     *          { name: 'Weight_in_lbs', type: 'measure', defAggFn: 'avg',  },\n     *          { name: 'Acceleration', type: 'measure', defAggFn: 'avg' },\n     *          { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *          { name: 'Origin' }\n     *      ]\n     *      ```\n     */\n    getSchema () {\n        return this.getFieldspace().fields.map(d => d.schema());\n    }\n\n    /**\n     * Returns the name of the {@link DataModel} instance. If no name was specified during {@link DataModel}\n     * initialization, then it returns a auto-generated name.\n     *\n     * @public\n     *\n     * @return {string} Name of the DataModel instance.\n     */\n    getName() {\n        return this._fieldStoreName;\n    }\n\n    getFieldspace () {\n        return this._fieldspace;\n    }\n\n    __calculateFieldspace () {\n        this._fieldspace = updateFields([this._rowDiffset, this._colIdentifier],\n             this.getPartialFieldspace(), this._fieldStoreName);\n        return this;\n    }\n\n    getPartialFieldspace () {\n        return this._partialFieldspace;\n    }\n\n    /**\n     * Performs {@link link_of_cross_product | cross-product} between two {@link DataModel} instances and returns a\n     * new {@link DataModel} instance containing the results. This operation is also called theta join.\n     *\n     * Cross product takes two set and create one set where each value of one set is paired with each value of another\n     * set.\n     *\n     * This method takes an optional predicate which filters the generated result rows. If the predicate returns true\n     * the combined row is included in the resulatant table.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.join(originDM)));\n     *\n     *  console.log(carsDM.join(originDM,\n     *      obj => obj.[originDM.getName()].Origin === obj.[carsDM.getName()].Origin));\n     *\n     * @text\n     * This is chained version of `join` operator. `join` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel to be joined with the current instance DataModel.\n     * @param {SelectionPredicate} filterFn - The predicate function that will filter the result of the crossProduct.\n     *\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    join (joinWith, filterFn) {\n        return crossProduct(this, joinWith, filterFn);\n    }\n\n    /**\n     * {@link natural_join | Natural join} is a special kind of cross-product join where filtering of rows are performed\n     * internally by resolving common fields are from both table and the rows with common value are included.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.naturalJoin(originDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel with which the current instance of DataModel on which the method is\n     *      called will be joined.\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    naturalJoin (joinWith) {\n        return crossProduct(this, joinWith, naturalJoinFilter(this, joinWith), true);\n    }\n\n    /**\n     * {@link link_to_union | Union} operation can be termed as vertical stacking of all rows from both the DataModel\n     * instances, provided that both of the {@link DataModel} instances should have same column names.\n     *\n     * @example\n     * console.log(EuropeanMakerDM.union(USAMakerDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} unionWith - DataModel instance for which union has to be applied with the instance on which\n     *      the method is called\n     *\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    union (unionWith) {\n        return union(this, unionWith);\n    }\n\n    /**\n     * {@link link_to_difference | Difference } operation only include rows which are present in the datamodel on which\n     * it was called but not on the one passed as argument.\n     *\n     * @example\n     * console.log(highPowerDM.difference(highExpensiveDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} differenceWith - DataModel instance for which difference has to be applied with the instance\n     *      on which the method is called\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    difference (differenceWith) {\n        return difference(this, differenceWith);\n    }\n\n    /**\n     * {@link link_to_selection | Selection} is a row filtering operation. It expects a predicate and an optional mode\n     * which control which all rows should be included in the resultant DataModel instance.\n     *\n     * {@link SelectionPredicate} is a function which returns a boolean value. For selection operation the selection\n     * function is called for each row of DataModel instance with the current row passed as argument.\n     *\n     * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n     * of rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resultant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  // with selection mode NORMAL:\n     *  const normDt = dt.select(fields => fields.Origin.value === \"USA\")\n     *  console.log(normDt));\n     *\n     * // with selection mode INVERSE:\n     * const inverDt = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.INVERSE })\n     * console.log(inverDt);\n     *\n     * // with selection mode ALL:\n     * const dtArr = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.ALL })\n     * // print the selected parts\n     * console.log(dtArr[0]);\n     * // print the inverted parts\n     * console.log(dtArr[1]);\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Function} selectFn - The predicate function which is called for each row with the current row.\n     * ```\n     *  function (row, i, cloneProvider, store)  { ... }\n     * ```\n     * @param {Object} config - The configuration object to control the inclusion exclusion of a row in resultant\n     * DataModel instance.\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection.\n     * @return {DataModel} Returns the new DataModel instance(s) after operation.\n     */\n    select (selectFn, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n        config.mode = config.mode || defConfig.mode;\n\n        const cloneConfig = { saveChild: config.saveChild };\n        return cloneWithSelect(\n            this,\n            selectFn,\n            config,\n            cloneConfig\n        );\n    }\n\n    /**\n     * Retrieves a boolean value if the current {@link DataModel} instance has data.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'CarName', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     * const data = [];\n     *\n     * const dt = new DataModel(data, schema);\n     * console.log(dt.isEmpty());\n     *\n     * @public\n     *\n     * @return {Boolean} True if the datamodel has no data, otherwise false.\n     */\n    isEmpty () {\n        return !this._rowDiffset.length || !this._colIdentifier.length;\n    }\n\n    /**\n     * Creates a clone from the current DataModel instance with child parent relationship.\n     *\n     * @private\n     * @param {boolean} [saveChild=true] - Whether the cloned instance would be recorded in the parent instance.\n     * @return {DataModel} - Returns the newly cloned DataModel instance.\n     */\n    clone (saveChild = true) {\n        const clonedDm = new this.constructor(this);\n        if (saveChild) {\n            clonedDm.setParent(this);\n        } else {\n            clonedDm.setParent(null);\n        }\n        return clonedDm;\n    }\n\n    /**\n     * {@link Projection} is filter column (field) operation. It expects list of fields' name and either include those\n     * or exclude those based on {@link FilteringMode} on the resultant variable.\n     *\n     * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n     * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resulatant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *\n     *  // with projection mode NORMAL:\n     *  const normDt = dt.project([\"Name\", \"HorsePower\"]);\n     *  console.log(normDt.getData());\n     *\n     *  // with projection mode INVERSE:\n     *  const inverDt = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.INVERSE })\n     *  console.log(inverDt.getData());\n     *\n     *  // with selection mode ALL:\n     *  const dtArr = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.ALL })\n     *  // print the normal parts\n     *  console.log(dtArr[0].getData());\n     *  // print the inverted parts\n     *  console.log(dtArr[1].getData());\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n     * @param {Object} [config] - An optional config to control the creation of new DataModel\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n     *\n     * @return {DataModel} Returns the new DataModel instance after operation.\n     */\n    project (projField, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n        const fieldConfig = this.getFieldsConfig();\n        const allFields = Object.keys(fieldConfig);\n        const { mode } = config;\n        const normalizedProjField = getNormalizedProFields(projField, allFields, fieldConfig);\n\n        let dataModel;\n\n        if (mode === FilteringMode.ALL) {\n            let projectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.NORMAL,\n                saveChild: config.saveChild\n            }, allFields);\n            let rejectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.INVERSE,\n                saveChild: config.saveChild\n            }, allFields);\n            dataModel = [projectionClone, rejectionClone];\n        } else {\n            let projectionClone = cloneWithProject(this, normalizedProjField, config, allFields);\n            dataModel = projectionClone;\n        }\n\n        return dataModel;\n    }\n\n    getFieldsConfig () {\n        return this._fieldConfig;\n    }\n\n    calculateFieldsConfig () {\n        this._fieldConfig = this._fieldspace.fields.reduce((acc, fieldObj, i) => {\n            acc[fieldObj.name()] = {\n                index: i,\n                def: fieldObj.schema(),\n            };\n            return acc;\n        }, {});\n        return this;\n    }\n\n\n    /**\n     * Frees up the resources associated with the current DataModel instance and breaks all the links instance has in\n     * the DAG.\n     *\n     * @public\n     */\n    dispose () {\n        this._parent && this._parent.removeChild(this);\n        this._parent = null;\n        this._children.forEach((child) => {\n            child._parent = null;\n        });\n        this._children = [];\n    }\n\n    /**\n     * Removes the specified child {@link DataModel} from the child list of the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\")\n     * dt.removeChild(dt2);\n     *\n     * @private\n     *\n     * @param {DataModel} child - Delegates the parent to remove this child.\n     */\n    removeChild (child) {\n        let idx = this._children.findIndex(sibling => sibling === child);\n        idx !== -1 ? this._children.splice(idx, 1) : true;\n    }\n\n    /**\n     * Sets the specified {@link DataModel} as a parent for the current {@link DataModel} instance.\n     *\n     * @param {DataModel} parent - The datamodel instance which will act as parent.\n     */\n    setParent (parent) {\n        this._parent && this._parent.removeChild(this);\n        this._parent = parent;\n        parent && parent._children.push(this);\n    }\n\n    /**\n     * Returns the parent {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const parentDm = dt2.getParent();\n     *\n     * @return {DataModel} Returns the parent DataModel instance.\n     */\n    getParent () {\n        return this._parent;\n    }\n\n    /**\n     * Returns the immediate child {@link DataModel} instances.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const childDm1 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const childDm2 = dt.select(fields => fields.Origin.value === \"Japan\");\n     * const childDm3 = dt.groupBy([\"Origin\"]);\n     *\n     * @return {DataModel[]} Returns the immediate child DataModel instances.\n     */\n    getChildren () {\n        return this._children;\n    }\n\n    /**\n     * Returns the in-between operation meta data while creating the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *   { name: 'Name', type: 'dimension' },\n     *   { name: 'HorsePower', type: 'measure' },\n     *   { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *   { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *   { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *   { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *   { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const dt3 = dt2.groupBy([\"Origin\"]);\n     * const derivations = dt3.getDerivations();\n     *\n     * @return {Any[]} Returns the derivation meta data.\n     */\n    getDerivations () {\n        return this._derivation;\n    }\n\n    /**\n     * Returns the in-between operation meta data happened from root {@link DataModel} to current instance.\n     *\n     * @example\n     * const schema = [\n     *   { name: 'Name', type: 'dimension' },\n     *   { name: 'HorsePower', type: 'measure' },\n     *   { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *   { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *   { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *   { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *   { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const dt3 = dt2.groupBy([\"Origin\"]);\n     * const ancDerivations = dt3.getAncestorDerivations();\n     *\n     * @return {Any[]} Returns the previous derivation meta data.\n     */\n    getAncestorDerivations () {\n        return this._ancestorDerivation;\n    }\n}\n\nexport default Relation;\n","/* eslint-disable default-case */\n\nimport { FieldType, DimensionSubtype, DataFormat, FilteringMode } from './enums';\nimport {\n    persistDerivations,\n    getRootGroupByModel,\n    propagateToAllDataModels,\n    getRootDataModel,\n    propagateImmutableActions,\n    addToPropNamespace,\n    sanitizeUnitSchema,\n    splitWithSelect,\n    splitWithProject,\n    getNormalizedProFields\n} from './helper';\nimport { DM_DERIVATIVES, PROPAGATION } from './constants';\nimport {\n    dataBuilder,\n    rowDiffsetIterator,\n    groupBy\n} from './operator';\nimport { createBinnedFieldData } from './operator/bucket-creator';\nimport Relation from './relation';\nimport reducerStore from './utils/reducer-store';\nimport { createFields } from './field-creator';\nimport InvalidAwareTypes from './invalid-aware-types';\nimport Value from './value';\nimport { converterStore } from './converter';\nimport { fieldRegistry } from './fields';\n\n/**\n * DataModel is an in-browser representation of tabular data. It supports\n * {@link https://en.wikipedia.org/wiki/Relational_algebra | relational algebra} operators as well as generic data\n * processing opearators.\n * DataModel extends {@link Relation} class which defines all the relational algebra opreators. DataModel gives\n * definition of generic data processing operators which are not relational algebra complient.\n *\n * @public\n * @class\n * @extends Relation\n * @memberof Datamodel\n */\nclass DataModel extends Relation {\n    /**\n     * Creates a new DataModel instance by providing data and schema. Data could be in the form of\n     * - Flat JSON\n     * - DSV String\n     * - 2D Array\n     *\n     * By default DataModel finds suitable adapter to serialize the data. DataModel also expects a\n     * {@link Schema | schema} for identifying the variables present in data.\n     *\n     * @constructor\n     * @example\n     * const data = loadData('cars.csv');\n     * const schema = [\n     *      { name: 'Name', type: 'dimension' },\n     *      { name: 'Miles_per_Gallon', type: 'measure', unit : 'cm', scale: '1000', numberformat: val => `${val}G`},\n     *      { name: 'Cylinders', type: 'dimension' },\n     *      { name: 'Displacement', type: 'measure' },\n     *      { name: 'Horsepower', type: 'measure' },\n     *      { name: 'Weight_in_lbs', type: 'measure' },\n     *      { name: 'Acceleration', type: 'measure' },\n     *      { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *      { name: 'Origin', type: 'dimension' }\n     * ];\n     * const dm = new DataModel(data, schema, { name: 'Cars' });\n     * table(dm);\n     *\n     * @public\n     *\n     * @param {Array.<Object> | string | Array.<Array>} data Input data in any of the mentioned formats\n     * @param {Array.<Schema>} schema Defination of the variables. Order of the variables in data and order of the\n     *      variables in schema has to be same.\n     * @param {object} [options] Optional arguments to specify more settings regarding the creation part\n     * @param {string} [options.name] Name of the datamodel instance. If no name is given an auto generated name is\n     *      assigned to the instance.\n     * @param {string} [options.fieldSeparator=','] specify field separator type if the data is of type dsv string.\n     */\n    constructor (...args) {\n        super(...args);\n\n        this._onPropagation = [];\n    }\n\n    /**\n     * Reducers are simple functions which reduces an array of numbers to a representative number of the set.\n     * Like an array of numbers `[10, 20, 5, 15]` can be reduced to `12.5` if average / mean reducer function is\n     * applied. All the measure fields in datamodel (variables in data) needs a reducer to handle aggregation.\n     *\n     * @public\n     *\n     * @return {ReducerStore} Singleton instance of {@link ReducerStore}.\n     */\n    static get Reducers () {\n        return reducerStore;\n    }\n\n    /**\n     * Converters are functions that transforms data in various format tpo datamodel consumabe format.\n     */\n    static get Converters() {\n        return converterStore;\n    }\n\n    /**\n     * Register new type of fields\n     */\n    static get FieldTypes() {\n        return fieldRegistry;\n    }\n\n    /**\n     * Configure null, undefined, invalid values in the source data\n     *\n     * @public\n     *\n     * @param {Object} [config] - Configuration to control how null, undefined and non-parsable values are\n     * represented in DataModel.\n     * @param {string} [config.undefined] - Define how an undefined value will be represented.\n     * @param {string} [config.null] - Define how a null value will be represented.\n     * @param {string} [config.invalid] - Define how a non-parsable value will be represented.\n     */\n    static configureInvalidAwareTypes (config) {\n        return InvalidAwareTypes.invalidAwareVals(config);\n    }\n\n    /**\n     * Retrieve the data attached to an instance in JSON format.\n     *\n     * @example\n     * // DataModel instance is already prepared and assigned to dm variable\n     *  const data = dm.getData({\n     *      order: 'column',\n     *      formatter: {\n     *          origin: (val) => val === 'European Union' ? 'EU' : val;\n     *      }\n     *  });\n     *  console.log(data);\n     *\n     * @public\n     *\n     * @param {Object} [options] Options to control how the raw data is to be returned.\n     * @param {string} [options.order='row'] Defines if data is retieved in row order or column order. Possible values\n     *      are `'rows'` and `'columns'`\n     * @param {Function} [options.formatter=null] Formats the output data. This expects an object, where the keys are\n     *      the name of the variable needs to be formatted. The formatter function is called for each row passing the\n     *      value of the cell for a particular row as arguments. The formatter is a function in the form of\n     *      `function (value, rowId, schema) => { ... }`\n     *      Know more about {@link Fomatter}.\n     *\n     * @return {Array} Returns a multidimensional array of the data with schema. The return format looks like\n     *      ```\n     *          {\n     *              data,\n     *              schema\n     *          }\n     *      ```\n     */\n    getData (options) {\n        const defOptions = {\n            order: 'row',\n            formatter: null,\n            withUid: false,\n            getAllFields: false,\n            sort: []\n        };\n        options = Object.assign({}, defOptions, options);\n        const { idField, fields } = this.getPartialFieldspace();\n\n        const dataGenerated = dataBuilder.call(\n            this,\n            { fields, idField },\n            this._rowDiffset,\n            options.getAllFields ? fields.map(d => d.name()).join() : this._colIdentifier,\n            options.sort,\n            {\n                columnWise: options.order === 'column',\n                addUid: !!options.withUid\n            }\n        );\n\n        if (!options.formatter) {\n            return dataGenerated;\n        }\n\n        const { formatter } = options;\n        const { data, schema, uids } = dataGenerated;\n        const fieldNames = schema.map((e => e.name));\n        const fmtFieldNames = Object.keys(formatter);\n        const fmtFieldIdx = fmtFieldNames.reduce((acc, next) => {\n            const idx = fieldNames.indexOf(next);\n            if (idx !== -1) {\n                acc.push([idx, formatter[next]]);\n            }\n            return acc;\n        }, []);\n\n        if (options.order === 'column') {\n            fmtFieldIdx.forEach((elem) => {\n                const fIdx = elem[0];\n                const fmtFn = elem[1];\n\n                data[fIdx].forEach((datum, datumIdx) => {\n                    data[fIdx][datumIdx] = fmtFn.call(\n                        undefined,\n                        datum,\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        } else {\n            data.forEach((datum, datumIdx) => {\n                fmtFieldIdx.forEach((elem) => {\n                    const fIdx = elem[0];\n                    const fmtFn = elem[1];\n\n                    datum[fIdx] = fmtFn.call(\n                        undefined,\n                        datum[fIdx],\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        }\n\n        return dataGenerated;\n    }\n\n    /**\n     * Returns the unique ids in an array.\n     *\n     * @return {Array} Returns an array of ids.\n     */\n    getUids () {\n        const rowDiffset = this._rowDiffset;\n        const ids = [];\n        const idData = this.getPartialFieldspace().idField.data();\n\n        rowDiffsetIterator(rowDiffset, (i) => {\n            ids.push(idData[i]);\n        });\n\n        return ids;\n    }\n    /**\n     * Groups the data using particular dimensions and by reducing measures. It expects a list of dimensions using which\n     * it projects the datamodel and perform aggregations to reduce the duplicate tuples. Refer this\n     * {@link link_to_one_example_with_group_by | document} to know the intuition behind groupBy.\n     *\n     * DataModel by default provides definition of few {@link reducer | Reducers}.\n     * {@link ReducerStore | User defined reducers} can also be registered.\n     *\n     * This is the chained implementation of `groupBy`.\n     * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n     *\n     * @example\n     * const groupedDM = dm.groupBy(['Year'], { horsepower: 'max' } );\n     * console.log(groupedDm);\n     *\n     * @public\n     *\n     * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n     * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n     *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n     *      schema of the variable.\n     *\n     * @return {DataModel} Returns a new DataModel instance after performing the groupby.\n     */\n    groupBy (fieldsArr, reducers = {}, config = { saveChild: true }) {\n        const groupByString = `${fieldsArr.join()}`;\n        let params = [this, fieldsArr, reducers];\n        const newDataModel = groupBy(...params);\n\n        persistDerivations(\n            this,\n            newDataModel,\n            DM_DERIVATIVES.GROUPBY,\n            { fieldsArr, groupByString, defaultReducer: reducerStore.defaultReducer() },\n            reducers\n        );\n        if (config.saveChild) {\n            newDataModel.setParent(this);\n        } else {\n            newDataModel.setParent(null);\n        }\n\n        return newDataModel;\n    }\n\n    /**\n     * Performs sorting operation on the current {@link DataModel} instance according to the specified sorting details.\n     * Like every other operator it doesn't mutate the current DataModel instance on which it was called, instead\n     * returns a new DataModel instance containing the sorted data.\n     *\n     * DataModel support multi level sorting by listing the variables using which sorting needs to be performed and\n     * the type of sorting `ASC` or `DESC`.\n     *\n     * In the following example, data is sorted by `Origin` field in `DESC` order in first level followed by another\n     * level of sorting by `Acceleration` in `ASC` order.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * let sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\"] // Default value is ASC\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * // Sort with a custom sorting function\n     * sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\", (a, b) => a - b] // Custom sorting function\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @text\n     * DataModel also provides another sorting mechanism out of the box where sort is applied to a variable using\n     * another variable which determines the order.\n     * Like the above DataModel contains three fields `Origin`, `Name` and `Acceleration`. Now, the data in this\n     * model can be sorted by `Origin` field according to the average value of all `Acceleration` for a\n     * particular `Origin` value.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * const sortedDm = dm.sort([\n     *     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @public\n     *\n     * @param {Array.<Array>} sortingDetails - Sorting details based on which the sorting will be performed.\n     * @return {DataModel} Returns a new instance of DataModel with sorted data.\n     */\n    sort (sortingDetails, config = { saveChild: false }) {\n        const rawData = this.getData({\n            order: 'row',\n            sort: sortingDetails,\n            withUid: true\n        });\n\n        const header = rawData.schema.map(field => field.name);\n        const dataInCSVArr = [header].concat(rawData.data);\n        const sortedDm = new this.constructor(dataInCSVArr, rawData.schema, { dataFormat: 'DSVArr' });\n\n        persistDerivations(\n            this,\n            sortedDm,\n            DM_DERIVATIVES.SORT,\n            config,\n            sortingDetails\n        );\n\n        if (config.saveChild) {\n            sortedDm.setParent(this);\n        } else {\n            sortedDm.setParent(null);\n        }\n\n        return sortedDm;\n    }\n\n    /**\n     * Performs the serialization operation on the current {@link DataModel} instance according to the specified data\n     * type. When an {@link DataModel} instance is created, it de-serializes the input data into its internal format,\n     * and during its serialization process, it converts its internal data format to the specified data type and returns\n     * that data regardless what type of data is used during the {@link DataModel} initialization.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance.\n     * const csvData = dm.serialize(DataModel.DataFormat.DSV_STR, { fieldSeparator: \",\" });\n     * console.log(csvData); // The csv formatted data.\n     *\n     * const jsonData = dm.serialize(DataModel.DataFormat.FLAT_JSON);\n     * console.log(jsonData); // The json data.\n     *\n     * @public\n     *\n     * @param {string} type - The data type name for serialization.\n     * @param {Object} options - The optional option object.\n     * @param {string} options.fieldSeparator - The field separator character for DSV data type.\n     * @return {Array|string} Returns the serialized data.\n     */\n    serialize (type, options) {\n        type = type || this._dataFormat;\n        options = Object.assign({}, { fieldSeparator: ',' }, options);\n\n        const fields = this.getFieldspace().fields;\n        const colData = fields.map(f => f.formattedData());\n        const rowsCount = colData[0].length;\n        let serializedData;\n        let rowIdx;\n        let colIdx;\n\n        if (type === DataFormat.FLAT_JSON) {\n            serializedData = [];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = {};\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row[fields[colIdx].name()] = colData[colIdx][rowIdx];\n                }\n                serializedData.push(row);\n            }\n        } else if (type === DataFormat.DSV_STR) {\n            serializedData = [fields.map(f => f.name()).join(options.fieldSeparator)];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row.join(options.fieldSeparator));\n            }\n            serializedData = serializedData.join('\\n');\n        } else if (type === DataFormat.DSV_ARR) {\n            serializedData = [fields.map(f => f.name())];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row);\n            }\n        } else {\n            throw new Error(`Data type ${type} is not supported`);\n        }\n\n        return serializedData;\n    }\n\n    addField (field) {\n        const fieldName = field.name();\n        this._colIdentifier += `,${fieldName}`;\n        const partialFieldspace = this._partialFieldspace;\n        const cachedValueObjects = partialFieldspace._cachedValueObjects;\n        const formattedData = field.formattedData();\n        const rawData = field.partialField.data;\n\n        if (!partialFieldspace.fieldsObj()[field.name()]) {\n            partialFieldspace.fields.push(field);\n            cachedValueObjects.forEach((obj, i) => {\n                obj[field.name()] = new Value(formattedData[i], rawData[i], field);\n            });\n        } else {\n            const fieldIndex = partialFieldspace.fields.findIndex(fieldinst => fieldinst.name() === fieldName);\n            fieldIndex >= 0 && (partialFieldspace.fields[fieldIndex] = field);\n        }\n\n        // flush out cached namespace values on addition of new fields\n        partialFieldspace._cachedFieldsObj = null;\n        partialFieldspace._cachedDimension = null;\n        partialFieldspace._cachedMeasure = null;\n\n        this.__calculateFieldspace().calculateFieldsConfig();\n        return this;\n    }\n\n    /**\n    * Creates a new variable calculated from existing variables. This method expects the definition of the newly created\n    * variable and a function which resolves the value of the new variable from existing variables.\n    *\n    * Can create a new measure based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const newDm = dataModel.calculateVariable({\n    *      name: 'powerToWeight',\n    *      type: 'measure'\n    *  }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n    *\n    *\n    * Can create a new dimension based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const child = dataModel.calculateVariable(\n    *     {\n    *       name: 'Efficiency',\n    *       type: 'dimension'\n    *     }, ['horsepower', (hp) => {\n    *      if (hp < 80) { return 'low'; },\n    *      else if (hp < 120) { return 'moderate'; }\n    *      else { return 'high' }\n    *  }]);\n    *\n    * @public\n    *\n    * @param {Object} schema - The schema of newly defined variable.\n    * @param {Array.<string|function>} dependency - An array containing the dependency variable names and a resolver\n    * function as the last element.\n    * @param {Object} config - An optional config object.\n    * @param {boolean} [config.saveChild] - Whether the newly created DataModel will be a child.\n    * @param {boolean} [config.replaceVar] - Whether the newly created variable will replace the existing variable.\n    * @return {DataModel} Returns an instance of DataModel with the new field.\n    */\n    calculateVariable (schema, dependency, config) {\n        schema = sanitizeUnitSchema(schema);\n        config = Object.assign({}, { saveChild: true, replaceVar: false }, config);\n\n        const fieldsConfig = this.getFieldsConfig();\n        const depVars = dependency.slice(0, dependency.length - 1);\n        const retrieveFn = dependency[dependency.length - 1];\n\n        if (fieldsConfig[schema.name] && !config.replaceVar) {\n            throw new Error(`${schema.name} field already exists in datamodel`);\n        }\n\n        const depFieldIndices = depVars.map((field) => {\n            const fieldSpec = fieldsConfig[field];\n            if (!fieldSpec) {\n                // @todo dont throw error here, use warning in production mode\n                throw new Error(`${field} is not a valid column name.`);\n            }\n            return fieldSpec.index;\n        });\n\n        const clone = this.clone(config.saveChild);\n\n        const fs = clone.getFieldspace().fields;\n        const suppliedFields = depFieldIndices.map(idx => fs[idx]);\n\n        let cachedStore = {};\n        let cloneProvider = () => this.detachedRoot();\n\n        const computedValues = [];\n        rowDiffsetIterator(clone._rowDiffset, (i) => {\n            const fieldsData = suppliedFields.map(field => field.partialField.data[i]);\n            computedValues[i] = retrieveFn(...fieldsData, i, cloneProvider, cachedStore);\n        });\n        const [field] = createFields([computedValues], [schema], [schema.name]);\n        clone.addField(field);\n\n        persistDerivations(\n            this,\n            clone,\n            DM_DERIVATIVES.CAL_VAR,\n            { config: schema, fields: depVars },\n            retrieveFn\n        );\n\n        return clone;\n    }\n\n    /**\n     * Propagates changes across all the connected DataModel instances.\n     *\n     * @param {Array} identifiers - A list of identifiers that were interacted with.\n     * @param {Object} payload - The interaction specific details.\n     *\n     * @return {DataModel} DataModel instance.\n     */\n    propagate (identifiers, config = {}, addToNameSpace, propConfig = {}) {\n        const isMutableAction = config.isMutableAction;\n        const propagationSourceId = config.sourceId;\n        const payload = config.payload;\n        const rootModel = getRootDataModel(this);\n        const propagationNameSpace = rootModel._propagationNameSpace;\n        const rootGroupByModel = getRootGroupByModel(this);\n        const rootModels = {\n            groupByModel: rootGroupByModel,\n            model: rootModel\n        };\n\n        addToNameSpace && addToPropNamespace(propagationNameSpace, config, this);\n        propagateToAllDataModels(identifiers, rootModels, { propagationNameSpace,\n            sourceId: propagationSourceId,\n            propagationSource: this },\n            Object.assign({\n                payload\n            }, config));\n\n        if (isMutableAction) {\n            propagateImmutableActions(propagationNameSpace, rootModel, {\n                config,\n                propConfig\n            }, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Associates a callback with an event name.\n     *\n     * @param {string} eventName - The name of the event.\n     * @param {Function} callback - The callback to invoke.\n     * @return {DataModel} Returns this current DataModel instance itself.\n     */\n    on (eventName, callback) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation.push(callback);\n            break;\n        }\n        return this;\n    }\n\n    /**\n     * Unsubscribes the callbacks for the provided event name.\n     *\n     * @param {string} eventName - The name of the event to unsubscribe.\n     * @return {DataModel} Returns the current DataModel instance itself.\n     */\n    unsubscribe (eventName) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation = [];\n            break;\n\n        }\n        return this;\n    }\n\n    /**\n     * This method is used to invoke the method associated with propagation.\n     *\n     * @param {Object} payload The interaction payload.\n     * @param {DataModel} identifiers The propagated DataModel.\n     * @memberof DataModel\n     */\n    handlePropagation (propModel, payload) {\n        let propListeners = this._onPropagation;\n        propListeners.forEach(fn => fn.call(this, propModel, payload));\n    }\n\n    /**\n     * Performs the binning operation on a measure field based on the binning configuration. Binning means discretizing\n     * values of a measure. Binning configuration contains an array; subsequent values from the array marks the boundary\n     * of buckets in [inclusive, exclusive) range format. This operation does not mutate the subject measure field,\n     * instead, it creates a new field (variable) of type dimension and subtype binned.\n     *\n     * Binning can be configured by\n     * - providing custom bin configuration with non-uniform buckets,\n     * - providing bins count,\n     * - providing each bin size,\n     *\n     * When custom `buckets` are provided as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', buckets: [30, 80, 100, 110] }\n     *  const binnedDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binsCount` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', binsCount: 5, start: 0, end: 100 }\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binSize` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHorsepower', binSize: 20, start: 5}\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @public\n     *\n     * @param {string} measureFieldName - The name of the target measure field.\n     * @param {Object} config - The config object.\n     * @param {string} [config.name] - The name of the new field which will be created.\n     * @param {string} [config.buckets] - An array containing the bucket ranges.\n     * @param {string} [config.binSize] - The size of each bin. It is ignored when buckets are given.\n     * @param {string} [config.binsCount] - The total number of bins to generate. It is ignored when buckets are given.\n     * @param {string} [config.start] - The start value of the bucket ranges. It is ignored when buckets are given.\n     * @param {string} [config.end] - The end value of the bucket ranges. It is ignored when buckets are given.\n     * @return {DataModel} Returns a new {@link DataModel} instance with the new field.\n     */\n    bin (measureFieldName, config) {\n        const fieldsConfig = this.getFieldsConfig();\n\n        if (!fieldsConfig[measureFieldName]) {\n            throw new Error(`Field ${measureFieldName} doesn't exist`);\n        }\n\n        const binFieldName = config.name || `${measureFieldName}_binned`;\n\n        if (fieldsConfig[binFieldName]) {\n            throw new Error(`Field ${binFieldName} already exists`);\n        }\n\n        const measureField = this.getFieldspace().fieldsObj()[measureFieldName];\n        const { binnedData, bins } = createBinnedFieldData(measureField, this._rowDiffset, config);\n\n        const binField = createFields([binnedData], [\n            {\n                name: binFieldName,\n                type: FieldType.DIMENSION,\n                subtype: DimensionSubtype.BINNED,\n                bins\n            }], [binFieldName])[0];\n\n        const clone = this.clone(config.saveChild);\n        clone.addField(binField);\n\n        persistDerivations(\n            this,\n            clone,\n            DM_DERIVATIVES.BIN,\n             { measureFieldName, config, binFieldName },\n             null\n        );\n\n        return clone;\n    }\n\n    /**\n     * Creates a new {@link DataModel} instance with completely detached root from current {@link DataModel} instance,\n     * the new {@link DataModel} instance has no parent-children relationship with the current one, but has same data as\n     * the current one.\n     * This API is useful when a completely different {@link DataModel} but with same data as the current instance is\n     * needed.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *  const detachedDm = dm.detachedRoot();\n     *\n     * // has different namespace\n     * console.log(dm.getPartialFieldspace().name);\n     * console.log(detachedDm.getPartialFieldspace().name);\n     *\n     * // has same data\n     * console.log(dm.getData());\n     * console.log(detachedDm.getData());\n     *\n     * @public\n     *\n     * @return {DataModel} Returns a detached {@link DataModel} instance.\n     */\n    detachedRoot () {\n        const data = this.serialize(DataFormat.FLAT_JSON);\n        const schema = this.getSchema();\n\n        return new DataModel(data, schema);\n    }\n\n    /**\n     * Creates a set of new {@link DataModel} instances by splitting the set of rows in the source {@link DataModel}\n     * instance based on a set of dimensions.\n     *\n     * For each unique dimensional value, a new split is created which creates a unique {@link DataModel} instance for\n     *  that split\n     *\n     * If multiple dimensions are provided, it splits the source {@link DataModel} instance with all possible\n     * combinations of the dimensional values for all the dimensions provided\n     *\n     * Additionally, it also accepts a predicate function to reduce the set of rows provided. A\n     * {@link link_to_selection | Selection} is performed on all the split {@link DataModel} instances based on\n     * the predicate function\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDt = dt.splitByRow(['Origin'])\n     *  console.log(splitDt));\n     * // This should give three unique DataModel instances, one each having rows only for 'USA',\n     * // 'Europe' and 'Japan' respectively\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDtMulti = dt.splitByRow(['Origin', 'Cylinders'])\n     *  console.log(splitDtMulti));\n     * // This should give DataModel instances for all unique combinations of Origin and Cylinder values\n     *\n     * @example\n     * // with predicate function:\n     * const splitWithPredDt = dt.select(['Origin'], fields => fields.Origin.value === \"USA\")\n     * console.log(splitWithPredDt);\n     * // This should not include the DataModel for the Origin : 'USA'\n     *\n     *\n     * @public\n     *\n     * @param {Array} dimensionArr - Set of dimensions based on which the split should occur\n     * @param {Object} config - The configuration object\n     * @param {string} [config.saveChild] - Configuration to save child or not\n     * @param {string}[config.mode=FilteringMode.NORMAL] -The mode of the selection.\n     * @return {Array}  Returns the new DataModel instances after operation.\n     */\n    splitByRow (dimensionArr, reducerFn, config) {\n        const fieldsConfig = this.getFieldsConfig();\n\n        dimensionArr.forEach((fieldName) => {\n            if (!fieldsConfig[fieldName]) {\n                throw new Error(`Field ${fieldName} doesn't exist in the schema`);\n            }\n        });\n\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n\n        config = Object.assign({}, defConfig, config);\n\n        return splitWithSelect(this, dimensionArr, reducerFn, config);\n    }\n\n    /**\n     * Creates a set of new {@link DataModel} instances by splitting the set of fields in the source {@link DataModel}\n     * instance based on a set of common and unique field names provided.\n     *\n     * Each DataModel created contains a set of fields which are common to all and a set of unique fields.\n     * It also accepts configurations such as saveChild and mode(inverse or normal) to include/exclude the respective\n     * fields\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDt = dt.splitByColumn( [['Acceleration'], ['Horsepower']], ['Origin'])\n     *  console.log(splitDt));\n     * // This should give two unique DataModel instances, both having the field 'Origin' and\n     * // one each having 'Acceleration' and 'Horsepower' fields respectively\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDtInv = dt.splitByColumn( [['Acceleration'], ['Horsepower'],['Origin', 'Cylinders'],\n     *                           {mode: 'inverse'})\n     *  console.log(splitDtInv));\n     * // This should give DataModel instances in the following way:\n     * // All DataModel Instances do not have the fields 'Origin' and 'Cylinders'\n     * // One DataModel Instance has rest of the fields except 'Acceleration' and the other DataModel instance\n     * // has rest of the fields except 'Horsepower'\n     *\n     *\n     *\n     * @public\n     *\n     * @param {Array} uniqueFields - Set of unique fields included in each datamModel instance\n     * @param {Array} commonFields - Set of common fields included in all datamModel instances\n     * @param {Object} config - The configuration object\n     * @param {string} [config.saveChild] - Configuration to save child or not\n     * @param {string}[config.mode=FilteringMode.NORMAL] -The mode of the selection.\n     * @return {Array}  Returns the new DataModel instances after operation.\n     */\n    splitByColumn (uniqueFields = [], commonFields = [], config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        const fieldConfig = this.getFieldsConfig();\n        const allFields = Object.keys(fieldConfig);\n        const normalizedProjFieldSets = [[commonFields]];\n\n        config = Object.assign({}, defConfig, config);\n        uniqueFields = uniqueFields.length ? uniqueFields : [[]];\n\n\n        uniqueFields.forEach((fieldSet, i) => {\n            normalizedProjFieldSets[i] = getNormalizedProFields(\n                [...fieldSet, ...commonFields],\n                allFields,\n                fieldConfig);\n        });\n\n        return splitWithProject(this, normalizedProjFieldSets, config, allFields);\n    }\n\n\n}\n\nexport default DataModel;\n","import { fnList } from '../operator/group-by-function';\n\nexport const { sum, avg, min, max, first, last, count, std: sd } = fnList;\n","import DataModel from './datamodel';\nimport {\n  compose,\n  bin,\n  select,\n  project,\n  groupby as groupBy,\n  calculateVariable,\n  sort,\n  crossProduct,\n  difference,\n  naturalJoin,\n  leftOuterJoin,\n  rightOuterJoin,\n  fullOuterJoin,\n  union,\n  rowDiffsetIterator\n} from './operator';\nimport * as Stats from './stats';\nimport * as enums from './enums';\nimport { DataConverter } from './converter';\nimport { DateTimeFormatter } from './utils';\nimport { DataFormat, FilteringMode, DM_DERIVATIVES } from './constants';\nimport InvalidAwareTypes from './invalid-aware-types';\nimport pkg from '../package.json';\nimport * as FieldsUtility from './fields';\n\nconst Operators = {\n    compose,\n    bin,\n    select,\n    project,\n    groupBy,\n    calculateVariable,\n    sort,\n    crossProduct,\n    difference,\n    naturalJoin,\n    leftOuterJoin,\n    rightOuterJoin,\n    fullOuterJoin,\n    union,\n    rowDiffsetIterator\n};\n\nconst version = pkg.version;\nObject.assign(DataModel, {\n    Operators,\n    Stats,\n    DM_DERIVATIVES,\n    DateTimeFormatter,\n    DataFormat,\n    FilteringMode,\n    InvalidAwareTypes,\n    version,\n    DataConverter,\n    FieldsUtility\n}, enums);\n\nexport default DataModel;\n","import { persistDerivations } from '../helper';\nimport { DM_DERIVATIVES } from '../constants';\n\n/**\n * DataModel's opearators are exposed as composable functional operators as well as chainable operators. Chainable\n * operators are called on the instances of {@link Datamodel} and {@link Relation} class.\n *\n * Those same operators can be used as composable operators from `DataModel.Operators` namespace.\n *\n * All these operators have similar behaviour. All these operators when called with the argument returns a function\n * which expects a DataModel instance.\n *\n * @public\n * @module Operators\n * @namespace DataModel\n */\n\n/**\n * This is functional version of selection operator. {@link link_to_selection | Selection} is a row filtering operation.\n * It takes {@link SelectionPredicate | predicate} for filtering criteria and returns a function.\n * The returned function is called with the DataModel instance on which the action needs to be performed.\n *\n * {@link SelectionPredicate} is a function which returns a boolean value. For selection opearation the selection\n * function is called for each row of DataModel instance with the current row passed as argument.\n *\n * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n * of rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * [Warn] Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * [Error] `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @example\n * const select = DataModel.Operators.select;\n * usaCarsFn = select(fields => fields.Origin.value === 'USA');\n * usaCarsDm = usaCarsFn(dm);\n * console.log(usaCarsDm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {SelectionPredicate} selectFn - Predicate funciton which is called for each row with the current row\n *      ```\n *          function (row, i)  { ... }\n *      ```\n * @param {Object} [config] - The configuration object to control the inclusion exclusion of a row in resultant\n *      DataModel instance\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const select = (...args) => dm => dm.select(...args);\n\n/**\n * This is functional version of projection operator. {@link link_to_projection | Projection} is a column filtering\n * operation.It expects list of fields name and either include those or exclude those based on {@link FilteringMode} on\n * the  resultant variable.It returns a function which is called with the DataModel instance on which the action needs\n * to be performed.\n *\n * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n * @param {Object} [config] - An optional config to control the creation of new DataModel\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const project = (...args) => dm => dm.project(...args);\n\n/**\n * This is functional version of binnig operator. Binning happens on a measure field based on a binning configuration.\n * Binning in DataModel does not aggregate the number of rows present in DataModel instance after binning, it just adds\n * a new field with the binned value. Refer binning {@link example_of_binning | example} to have a intuition of what\n * binning is and the use case.\n *\n * Binning can be configured by\n * - providing custom bin configuration with non uniform buckets\n * - providing bin count\n * - providing each bin size\n *\n * When custom buckets are provided as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const buckets = {\n *      start: 30\n *      stops: [80, 100, 110]\n *  };\n *  const config = { buckets, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(dm);\n *\n * @text\n * When `binCount` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binCount: 5, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @text\n * When `binSize` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binSize: 200, name: 'binnedHorsepower' }\n *  const binnedDm = dataModel.bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {String} name Name of measure which will be used to create bin\n * @param {Object} config Config required for bin creation\n * @param {Array.<Number>} config.bucketObj.stops Defination of bucket ranges. Two subsequent number from arrays\n *      are picked and a range is created. The first number from range is inclusive and the second number from range\n *      is exclusive.\n * @param {Number} [config.bucketObj.startAt] Force the start of the bin from a particular number.\n *      If not mentioned, the start of the bin or the lower domain of the data if stops is not mentioned, else its\n *      the first value of the stop.\n * @param {Number} config.binSize Bucket size for each bin\n * @param {Number} config.binCount Number of bins which will be created\n * @param {String} config.name Name of the new binned field to be created\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const bin = (...args) => dm => dm.bin(...args);\n\n/**\n * This is functional version of `groupBy` operator.Groups the data using particular dimensions and by reducing\n * measures. It expects a list of dimensions using which it projects the datamodel and perform aggregations to reduce\n * the duplicate tuples. Refer this {@link link_to_one_example_with_group_by | document} to know the intuition behind\n * groupBy.\n *\n * DataModel by default provides definition of few {@link reducer | Reducers}.\n * {@link ReducerStore | User defined reducers} can also be registered.\n *\n * This is the chained implementation of `groupBy`.\n * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n *\n * @example\n * const groupBy = DataModel.Operators.groupBy;\n * const groupedFn = groupBy(['Year'], { horsepower: 'max' } );\n * groupedDM = groupByFn(dm);\n *\n * @public\n *\n * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n *      schema of the variable.\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const groupBy = (...args) => dm => dm.groupBy(...args);\n\n/**\n * Enables composing operators to run multiple operations and save group of operataion as named opration on a DataModel.\n * The resulting DataModel will be the result of all the operation provided. The operations provided will be executed in\n * a serial manner ie. result of one operation will be the input for the next operations (like pipe operator in unix).\n *\n * Suported operations in compose are\n * - `select`\n * - `project`\n * - `groupBy`\n * - `bin`\n * - `compose`\n *\n * @example\n * const compose = DataModel.Operators.compose;\n * const select = DataModel.Operators.select;\n * const project = DataModel.Operators.project;\n *\n * let composedFn = compose(\n *    select(fields => fields.netprofit.value <= 15),\n *    project(['netprofit', 'netsales']));\n *\n * const dataModel = new DataModel(data1, schema1);\n *\n * let composedDm = composedFn(dataModel);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<Operators>} operators: An array of operation that will be applied on the\n * datatable.\n *\n * @returns {DataModel} Instance of resultant DataModel\n */\nexport const compose = (...operations) =>\n    (dm, config = { saveChild: true }) => {\n        let currentDM = dm;\n        let firstChild;\n        const derivations = [];\n\n        operations.forEach((operation) => {\n            currentDM = operation(currentDM);\n            derivations.push(...currentDM._derivation);\n            if (!firstChild) {\n                firstChild = currentDM;\n            }\n        });\n\n        if (firstChild && firstChild !== currentDM) {\n            firstChild.dispose();\n        }\n\n        // reset all ancestorDerivation saved in-between compose\n        currentDM._ancestorDerivation = [];\n        persistDerivations(\n            dm,\n            currentDM,\n            DM_DERIVATIVES.COMPOSE,\n            null,\n            derivations\n        );\n\n        if (config.saveChild) {\n            currentDM.setParent(dm);\n        } else {\n            currentDM.setParent(null);\n        }\n\n        return currentDM;\n    };\n","/**\n * Wrapper on calculateVariable() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const calculateVariable = (...args) => dm => dm.calculateVariable(...args);\n\n/**\n * Wrapper on sort() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const sort = (...args) => dm => dm.sort(...args);\n","import { crossProduct } from './cross-product';\nimport { naturalJoinFilter } from './natural-join-filter-function';\n\nexport function naturalJoin (dataModel1, dataModel2) {\n    return crossProduct(dataModel1, dataModel2, naturalJoinFilter(dataModel1, dataModel2), true);\n}\n"],"sourceRoot":""}