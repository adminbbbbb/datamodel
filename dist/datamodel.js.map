{"version":3,"sources":["webpack://DataModel/webpack/universalModuleDefinition","webpack://DataModel/webpack/bootstrap","webpack://DataModel/./src/index.js","webpack://DataModel/./src/enums/data-format.js","webpack://DataModel/./src/enums/dimension-subtype.js","webpack://DataModel/./src/enums/measure-subtype.js","webpack://DataModel/./src/enums/field-type.js","webpack://DataModel/./src/enums/filtering-mode.js","webpack://DataModel/./src/enums/group-by-functions.js","webpack://DataModel/./src/utils/date-time-formatter.js","webpack://DataModel/./src/utils/column-major.js","webpack://DataModel/./src/utils/extend2.js","webpack://DataModel/./src/utils/helper.js","webpack://DataModel/./src/field-store.js","webpack://DataModel/./src/value.js","webpack://DataModel/./src/operator/row-diffset-iterator.js","webpack://DataModel/./src/invalid-aware-types.js","webpack://DataModel/./src/operator/bucket-creator.js","webpack://DataModel/./src/constants/index.js","webpack://DataModel/./src/operator/get-common-schema.js","webpack://DataModel/./src/operator/cross-product.js","webpack://DataModel/./src/operator/merge-sort.js","webpack://DataModel/./src/operator/sort.js","webpack://DataModel/./src/operator/data-builder.js","webpack://DataModel/./src/operator/difference.js","webpack://DataModel/./src/operator/group-by-function.js","webpack://DataModel/./src/utils/reducer-store.js","webpack://DataModel/./src/operator/group-by.js","webpack://DataModel/./src/operator/natural-join-filter-function.js","webpack://DataModel/./src/operator/union.js","webpack://DataModel/./src/operator/outer-join.js","webpack://DataModel/./src/fields/field/index.js","webpack://DataModel/./src/fields/dimension/index.js","webpack://DataModel/./src/fields/categorical/index.js","webpack://DataModel/./src/fields/temporal/index.js","webpack://DataModel/./src/fields/binned/index.js","webpack://DataModel/./src/fields/measure/index.js","webpack://DataModel/./src/fields/continuous/index.js","webpack://DataModel/./src/fields/parsers/field-parser/index.js","webpack://DataModel/./src/fields/parsers/categorical-parser/index.js","webpack://DataModel/./src/fields/parsers/temporal-parser/index.js","webpack://DataModel/./src/fields/parsers/binned-parser/index.js","webpack://DataModel/./src/fields/parsers/continuous-parser/index.js","webpack://DataModel/./src/fields/partial-field/index.js","webpack://DataModel/./src/field-creator.js","webpack://DataModel/./src/default-config.js","webpack://DataModel/./src/converter/dsv-arr.js","webpack://DataModel/./node_modules/d3-dsv/src/dsv.js","webpack://DataModel/./node_modules/d3-dsv/src/csv.js","webpack://DataModel/./node_modules/d3-dsv/src/tsv.js","webpack://DataModel/./src/converter/dsv-str.js","webpack://DataModel/./src/converter/flat-json.js","webpack://DataModel/./src/converter/auto-resolver.js","webpack://DataModel/./src/helper.js","webpack://DataModel/./src/relation.js","webpack://DataModel/./src/datamodel.js","webpack://DataModel/./src/stats/index.js","webpack://DataModel/./src/export.js","webpack://DataModel/./src/operator/compose.js","webpack://DataModel/./src/operator/pure-operators.js","webpack://DataModel/./src/operator/natural-join.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DataModel","default","data_format","FLAT_JSON","DSV_STR","DSV_ARR","AUTO","dimension_subtype","CATEGORICAL","TEMPORAL","GEO","BINNED","measure_subtype","CONTINUOUS","field_type","MEASURE","DIMENSION","filtering_mode","NORMAL","INVERSE","ALL","group_by_functions","SUM","AVG","MIN","MAX","FIRST","LAST","COUNT","STD","convertToNativeDate","date","Date","pad","DateTimeFormatter","format","this","dtParams","undefined","nativeDate","RegExp","escape","text","replace","TOKEN_PREFIX","DATETIME_PARAM_SEQUENCE","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","defaultNumberParser","defVal","val","parsedVal","isFinite","parseInt","defaultRangeParser","range","nVal","toLowerCase","length","getTokenDefinitions","daysDef","short","long","monthsDef","H","index","extract","parser","formatter","getHours","toString","hours","P","M","getMinutes","S","getSeconds","K","getMilliseconds","a","join","day","getDay","A","e","getDate","b","month","getMonth","B","y","result","substring","presentDate","presentYear","Math","trunc","getFullYear","year","Y","getTokenFormalNames","definitions","HOUR_12","AMPM_UPPERCASE","AMPM_LOWERCASE","SHORT_DAY","LONG_DAY","DAY_OF_MONTH","DAY_OF_MONTH_CONSTANT_WIDTH","SHORT_MONTH","LONG_MONTH","MONTH_OF_YEAR","SHORT_YEAR","LONG_YEAR","tokenResolver","defaultResolver","arg","targetParam","arguments","hourFormat24","hourFormat12","ampmLower","ampmUpper","amOrpm","isPM","findTokens","tokenPrefix","tokenLiterals","keys","occurrence","forwardChar","indexOf","push","token","formatAs","nDate","formattedStr","String","formattedVal","parse","dateTimeStamp","options","extractTokenValue","dtParamSeq","noBreak","dtParamArr","args","resolverKey","resolverParams","resolverFn","param","resolvedVal","splice","apply","checkIfOnlyYear","unshift","tokenObj","lastOccurrenceIndex","occObj","occIndex","targetText","regexFormat","tokenArr","map","obj","occurrenceLength","extractValues","match","shift","getNativeDate","Number","Function","concat","_toConsumableArray","len","column_major","store","_len","fields","Array","_key","forEach","fieldIndex","from","OBJECTSTRING","objectToStrFn","objectToStr","arrayToStr","checkCyclicRef","parentArr","bIndex","extend2","obj1","obj2","skipUndef","_typeof","merge","tgtArr","srcArr","item","srcVal","tgtVal","str","cRef","isArray","isCallable","getUniqueId","getTime","round","random","isArrEqual","arr1","arr2","formatNumber","helper_detectDataFormat","data","isString","isObject","field_store","createNamespace","fieldArr","dataId","fieldsObj","_cachedFieldsObj","field","getMeasure","measureFields","_cachedMeasure","schema","type","getDimension","dimensionFields","_cachedDimension","src_value","Value","_classCallCheck","configurable","writable","_value","rowDiffsetIterator","rowDiffset","callback","split","diffStr","diffStsArr","start","end","InvalidAwareTypes","invalid_aware_types_classCallCheck","config","assign","_invalidAwareValsMap","invalidAwareVals","NULL","NA","NIL","invalid","nil","null","invalid_aware_types","generateBuckets","binSize","buckets","next","findBucketRange","bucketRanges","leftIdx","rightIdx","midIdx","floor","DM_DERIVATIVES","SELECT","PROJECT","GROUPBY","COMPOSE","CAL_VAR","BIN","SORT","JOINS","CROSS","LEFTOUTER","RIGHTOUTER","NATURAL","FULLOUTER","LOGICAL_OPERATORS","getCommonSchema","fs1","fs2","retArr","fs1Arr","defaultFilterFn","crossProduct","dm1","dm2","filterFn","replaceCommonSchema","jointype","applicableFilterFn","dm1FieldStore","getFieldspace","dm2FieldStore","dm1FieldStoreName","dm2FieldStoreName","commonSchemaList","Error","tmpSchema","_rowDiffset","rowAdded","rowPosition","ii","tuple","userArg","partialField","dm1Fields","prepareJoinData","dm2Fields","detachedRoot","tupleObj","cellVal","iii","datamodel","defSortFn","a1","b1","mergeSort","arr","sortFn","merge_sort_sort","lo","hi","mid","mainArr","auxArr","merge_sort_merge","resolveStrSortOrder","fDetails","strSortOrder","sortOrder","dataType","sortType","retFunc","getSortFn","groupData","hashMap","Map","groupedData","datum","fieldVal","has","set","createSortingFnArg","groupedDatum","targetFields","targetFieldDetails","label","reduce","acc","idx","applyStandardSort","sortingDetails","fieldName","sortMeta","fieldInSchema","sortingFn","slice","f","sort_toConsumableArray","makeGroupMapAndSort","depColumns","targetCol","currRow","fVal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","_ref","_ref2","sort_slicedToArray","nMap","err","return","sortData","dataObj","filter","sDetial","groupSortingIdx","findIndex","standardSortingDetails","groupSortingDetails","detail","sortedGroupMap","row","nextMap","applyGroupSort","uids","pop","dataBuilder","fieldStore","colIdentifier","retObj","addUid","columnWise","reqSorting","tmpDataArr","colName","insertInd","tmpData","data_builder_toConsumableArray","difference_difference","hashTable","schemaNameArr","dm1FieldStoreFieldObj","dm2FieldStoreFieldObj","_colIdentifier","sort","prepareDataHelper","dm","addData","hashData","schemaName","getFilteredValues","sum","filteredNumber","curr","avg","totalSum","isNaN","fnList","_defineProperty","_fnList","filteredValues","min","group_by_function_toConsumableArray","max","sqrt","mean","num","pow","variance","defaultReducerName","reducer_store_ReducerStore","ReducerStore","_this","reducer_store_classCallCheck","entries","reducer","_this2","__unregister","delete","reducer_store","group_by_groupBy","dataModel","reducers","existingDataModel","sFieldArr","dimensions","group_by_slicedToArray","getFieldArr","reducerObj","measures","defReducer","defaultReducer","measureName","defAggFn","reducerFn","resolve","getReducerObj","fieldStoreObj","dbName","dimensionArr","measureArr","newDataModel","_ref3","_ref4","rowCount","hash","_","cachedStore","cloneProvider","__calculateFieldspace","src_export","naturalJoinFilter","commonSchemaArr","retainTuple","union_union","leftOuterJoin","dataModel1","dataModel2","rightOuterJoin","fields_field","Field","field_classCallCheck","subtype","description","displayName","dimension","_cachedDomain","calculateDataDomain","categorical","Set","domain","add","temporal","Temporal","temporal_classCallCheck","temporal_possibleConstructorReturn","__proto__","getPrototypeOf","_cachedMinDiff","sortedData","arrLn","minDiff","POSITIVE_INFINITY","prevDatum","nextDatum","processedCount","_this3","binned","binsArr","bins","measure","unit","numberFormat","continuous","NEGATIVE_INFINITY","field_parser","categorical_parser","isInvalid","getInvalidType","trim","temporal_parser","TemporalParser","temporal_parser_classCallCheck","temporal_parser_possibleConstructorReturn","_dtf","binned_parser","matched","parseFloat","continuous_parser","partial_field","PartialField","partial_field_classCallCheck","_sanitize","createFields","dataColumn","headers","headersObj","header","createUnitField","default_config","dataFormat","dsv_arr","firstRowHeader","columns","dsv_arr_toConsumableArray","EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","JSON","stringify","src_dsv","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","rows","N","I","eof","eol","j","formatRow","formatValue","test","convert","customConverter","columnSet","column","inferColumns","formatRows","csv","tsv","dsv_str","fieldSeparator","dsv","flat_json","insertionIndex","auto_resolver","converters","FlatJSON","DSVStr","DSVArr","prepareSelectionData","resp","helper_updateFields","partialFieldspace","fieldStoreName","helper_slicedToArray","collID","partialFieldMap","newFields","coll","createUnitFieldFromPartial","persistDerivations","sourceDm","model","operation","_model$_derivation","criteriaFn","_derivation","src_helper_toConsumableArray","op","meta","criteria","helper_persistCurrentDerivation","newDm","_newDm$_ancestorDeriv","_ancestorDerivation","persistAncestorDerivation","selectModeMap","helper_defineProperty","diffIndex","calcDiff","_selectModeMap","generateRowDiffset","lastInsertedValue","li","helper_selectRowDiffsetIterator","checker","newRowDiffSet","rejRowDiffSet","_selectModeMap$mode$c","shouldSelect","shouldReject","checkerResult","rejectRowDiffset","selectHelper","clonedDm","selectFn","getPartialFieldspace","getKey","fn","helper_filterPropagationModel","propModels","fns","filterByMeasure","clonedModel","clone","calculateFieldsConfig","cloneWithAllFields","modelFieldsConfig","getFieldsConfig","propModel","keyFn","getData","fieldsConfig","dLen","indices","fieldsSpace","v","valuesMap","present","every","select","saveChild","some","helper_splitWithSelect","_selectHelper","params","splitRowDiffset","dimensionMap","dimensionSet","rowSplitDiffsetIterator","clonedDMs","cloned","derivation","helper_addDiffsetToClonedDm","selectConfig","helper_cloneWithProject","projField","allFields","projectionSet","actualProjField","helper_sanitizeUnitSchema","unitSchema","sanitizeAndValidateSchema","supportedMeasureSubTypes","supportedDimSubTypes","helper_validateUnitSchema","helper_updateData","relation","converterFn","converter_namespaceObject","_converterFn","_converterFn2","formattedData","dataHeader","fieldNameAs","as","resolveFieldName","nameSpace","_partialFieldspace","valueObjects","_cachedValueObjects","_dataFormat","applyExistingOperationOnModel","selectionModel","getDerivations","_selectionModel","_getDerivationArgumen","groupByString","helper_getDerivationArguments","propagateIdentifiers","propModelInf","nonTraversingModel","excludeModels","handlePropagation","_children","child","propagateToAllDataModels","identifiers","rootModels","propagationInf","propagationNameSpace","propagateToSource","propagationSourceId","sourceId","propagateInterpolatedValues","criterias","persistent","actionCriterias","values","mutableActions","filteredCriteria","entry","action","sourceActionCriterias","actionInf","actionConf","applyOnSource","models","path","_parent","getPathToRootModel","rootModel","propConfig","sourceIdentifiers","rootGroupByModel","groupByModel","inf","propagationModel","filteredModel","getFilteredModel","reverse","getNormalizedProFields","fieldConfig","normalizedProjField","constructor","search","src_relation","Relation","relation_classCallCheck","source","_fieldStoreName","updateData","_propagationNameSpace","immutableActions","_fieldspace","joinWith","unionWith","differenceWith","defConfig","cloneConfig","extraCloneDm","setOfRowDiffsets","cloneWithSelect","setParent","_fieldConfig","fieldObj","def","removeChild","sibling","parent","datamodel_classCallCheck","datamodel_possibleConstructorReturn","_onPropagation","order","withUid","getAllFields","dataGenerated","fieldNames","fmtFieldIdx","elem","fIdx","fmtFn","datumIdx","ids","_set$split$map","_set$split$map2","datamodel_slicedToArray","datamodel_toConsumableArray","fill","fieldsArr","groupBy","rawData","dataInCSVArr","sortedDm","colData","rowsCount","serializedData","rowIdx","colIdx","cachedValueObjects","fieldinst","dependency","replaceVar","depVars","retrieveFn","depFieldIndices","fieldSpec","fs","suppliedFields","computedValues","fieldsData","_createFields","addField","addToNameSpace","isMutableAction","payload","getRootDataModel","find","helper_getRootGroupByModel","sourceNamespace","addToPropNamespace","filterImmutableAction","criteriaModel","propagateImmutableActions","eventName","measureFieldName","binFieldName","_createBinnedFieldDat","measureField","binsCount","_measureField$domain","_measureField$domain2","_slicedToArray","dMin","dMax","ceil","abs","binnedData","createBinnedFieldData","binField","serialize","getSchema","uniqueFields","commonFields","normalizedProjFieldSets","fieldSet","projFieldSet","projFields","splitWithProject","stats_sum","stats_avg","stats_min","stats_max","stats_first","first","stats_last","last","stats_count","count","sd","std","Operators","compose","_len5","operations","_key5","currentDM","firstChild","derivations","compose_toConsumableArray","dispose","bin","_len3","_key3","project","_len2","_key2","_len4","_key4","calculateVariable","difference","naturalJoin","fullOuterJoin","union","version","Stats","stats_namespaceObject","DataFormat","FilteringMode","enums_namespaceObject","__webpack_exports__"],"mappings":"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","file":"datamodel.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DataModel\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DataModel\"] = factory();\n\telse\n\t\troot[\"DataModel\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const DataModel = require('./export');\n\nmodule.exports = DataModel.default ? DataModel.default : DataModel;\n","/**\n * DataFormat Enum defines the format of the input data.\n * Based on the format of the data the respective adapter is loaded.\n *\n * @readonly\n * @enum {string}\n */\nconst DataFormat = {\n    FLAT_JSON: 'FlatJSON',\n    DSV_STR: 'DSVStr',\n    DSV_ARR: 'DSVArr',\n    AUTO: 'Auto'\n};\n\nexport default DataFormat;\n","/**\n * DimensionSubtype enum defines the sub types of the Dimensional Field.\n *\n * @readonly\n * @enum {string}\n */\nconst DimensionSubtype = {\n    CATEGORICAL: 'categorical',\n    TEMPORAL: 'temporal',\n    GEO: 'geo',\n    BINNED: 'binned'\n};\n\nexport default DimensionSubtype;\n","/**\n * MeasureSubtype enum defines the sub types of the Measure Field.\n *\n * @readonly\n * @enum {string}\n */\nconst MeasureSubtype = {\n    CONTINUOUS: 'continuous'\n};\n\nexport default MeasureSubtype;\n","/**\n * FieldType enum defines the high level field based on which visuals are controlled.\n * Measure in a high level is numeric field and Dimension in a high level is string field.\n *\n * @readonly\n * @enum {string}\n */\nconst FieldType = {\n    MEASURE: 'measure',\n    DIMENSION: 'dimension'\n};\n\nexport default FieldType;\n","/**\n * Filtering mode enum defines the filering modes of DataModel.\n *\n * @readonly\n * @enum {string}\n */\nconst FilteringMode = {\n    NORMAL: 'normal',\n    INVERSE: 'inverse',\n    ALL: 'all'\n};\n\nexport default FilteringMode;\n","/**\n * Group by function names\n *\n * @readonly\n * @enum {string}\n */\nconst GROUP_BY_FUNCTIONS = {\n    SUM: 'sum',\n    AVG: 'avg',\n    MIN: 'min',\n    MAX: 'max',\n    FIRST: 'first',\n    LAST: 'last',\n    COUNT: 'count',\n    STD: 'std'\n};\n\nexport default GROUP_BY_FUNCTIONS;\n","/**\n * Creates a JS native date object from input\n *\n * @param {string | number | Date} date Input using which date object to be created\n * @return {Date} : JS native date object\n */\nfunction convertToNativeDate (date) {\n    if (date instanceof Date) {\n        return date;\n    }\n\n    return new Date(date);\n}\n/**\n * Apply padding before a number if its less than 1o. This is used when constant digit's number to be returned\n * between 0 - 99\n *\n * @param {number} n Input to be padded\n * @return {string} Padded number\n */\nfunction pad (n) {\n    return (n < 10) ? (`0${n}`) : n;\n}\n/*\n * DateFormatter utility to convert any date format to any other date format\n * DateFormatter parse a date time stamp specified by a user abiding by rules which are defined\n * by user in terms of token. It creates JS native date object from the user specified format.\n * That native date can also be displayed\n * in any specified format.\n * This utility class only takes care of format conversion only\n */\n\n/*\n * Escapes all the special character that are used in regular expression.\n * Like\n * RegExp.escape('sgfd-$') // Output: sgfd\\-\\$\n *\n * @param text {String} : text which is to be escaped\n */\nRegExp.escape = function (text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n/**\n * DateTimeFormatter class to convert any user format of date time stamp to any other format\n * of date time stamp.\n *\n * @param {string} format Format of the date given. For the above date,\n * 'year: %Y, month: %b, day: %d'.\n * @class\n */\n/* istanbul ignore next */ function DateTimeFormatter (format) {\n    this.format = format;\n    this.dtParams = undefined;\n    this.nativeDate = undefined;\n}\n\n// The identifier of the tokens\nDateTimeFormatter.TOKEN_PREFIX = '%';\n\n// JS native Date constructor takes the date params (year, month, etc) in a certail sequence.\n// This defines the sequence of the date parameters in the constructor.\nDateTimeFormatter.DATETIME_PARAM_SEQUENCE = {\n    YEAR: 0,\n    MONTH: 1,\n    DAY: 2,\n    HOUR: 3,\n    MINUTE: 4,\n    SECOND: 5,\n    MILLISECOND: 6\n};\n\n/*\n * This is a default number parsing utility. It tries to parse a number in integer, if parsing is unsuccessful, it\n * gives back a default value.\n *\n * @param: defVal {Number} : Default no if the parsing to integer is not successful\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be parsed.\n */\nDateTimeFormatter.defaultNumberParser = function (defVal) {\n    return function (val) {\n        let parsedVal;\n        if (isFinite(parsedVal = parseInt(val, 10))) {\n            return parsedVal;\n        }\n\n        return defVal;\n    };\n};\n\n/*\n * This is a default number range utility. It tries to find an element in the range. If not found it returns a\n * default no as an index.\n *\n * @param: range {Array} : The list which is to be serached\n * @param: defVal {Number} : Default no if the serach and find does not return anything\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be found\n */\nDateTimeFormatter.defaultRangeParser = function (range, defVal) {\n    return (val) => {\n        let i;\n        let l;\n\n        if (!val) { return defVal; }\n\n        const nVal = val.toLowerCase();\n\n        for (i = 0, l = range.length; i < l; i++) {\n            if (range[i].toLowerCase() === nVal) {\n                return i;\n            }\n        }\n\n        if (i === undefined) {\n            return defVal;\n        }\n        return null;\n    };\n};\n\n/*\n * Defines the tokens which are supporter by the dateformatter. Using this definitation a value gets extracted from\n * the user specifed date string. This also formats the value for display purpose from native JS date.\n * The definition of each token contains the following named properties\n * {\n *     %token_name% : {\n *         name: name of the token, this is used in reverse lookup,\n *         extract: a function that returns the regular expression to extract that piece of information. All the\n *                  regex should be gouped by using ()\n *         parser: a function which receives value extracted by the above regex and parse it to get the date params\n *         formatter: a formatter function that takes milliseconds or JS Date object and format the param\n *                  represented by the token only.\n *     }\n * }\n *\n * @return {Object} : Definition of the all the supported tokens.\n */\nDateTimeFormatter.getTokenDefinitions = function () {\n    const daysDef = {\n        short: [\n            'Sun',\n            'Mon',\n            'Tue',\n            'Wed',\n            'Thu',\n            'Fri',\n            'Sat'\n        ],\n        long: [\n            'Sunday',\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday'\n        ]\n    };\n    const monthsDef = {\n        short: [\n            'Jan',\n            'Feb',\n            'Mar',\n            'Apr',\n            'May',\n            'Jun',\n            'Jul',\n            'Aug',\n            'Sep',\n            'Oct',\n            'Nov',\n            'Dec'\n        ],\n        long: [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ]\n    };\n\n    const definitions = {\n        H: {\n            // 24 hours format\n            name: 'H',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n\n                return d.getHours().toString();\n            }\n        },\n        l: {\n            // 12 hours format\n            name: 'l',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours() % 12;\n\n                return (hours === 0 ? 12 : hours).toString();\n            }\n        },\n        p: {\n            // AM or PM\n            name: 'p',\n            index: 3,\n            extract () { return '(AM|PM)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'AM' : 'PM');\n            }\n        },\n        P: {\n            // am or pm\n            name: 'P',\n            index: 3,\n            extract () { return '(am|pm)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'am' : 'pm');\n            }\n        },\n        M: {\n            // Two digit minutes 00 - 59\n            name: 'M',\n            index: 4,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const mins = d.getMinutes();\n\n                return pad(mins);\n            }\n        },\n        S: {\n            // Two digit seconds 00 - 59\n            name: 'S',\n            index: 5,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const seconds = d.getSeconds();\n\n                return pad(seconds);\n            }\n        },\n        K: {\n            // Milliseconds\n            name: 'K',\n            index: 6,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const ms = d.getMilliseconds();\n\n                return ms.toString();\n            }\n        },\n        a: {\n            // Short name of day, like Mon\n            name: 'a',\n            index: 2,\n            extract () { return `(${daysDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.short[day]).toString();\n            }\n        },\n        A: {\n            // Long name of day, like Monday\n            name: 'A',\n            index: 2,\n            extract () { return `(${daysDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.long[day]).toString();\n            }\n        },\n        e: {\n            // 8 of March, 11 of November\n            name: 'e',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return day.toString();\n            }\n        },\n        d: {\n            // 08 of March, 11 of November\n            name: 'd',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return pad(day);\n            }\n        },\n        b: {\n            // Short month, like Jan\n            name: 'b',\n            index: 1,\n            extract () { return `(${monthsDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.short[month]).toString();\n            }\n        },\n        B: {\n            // Long month, like January\n            name: 'B',\n            index: 1,\n            extract () { return `(${monthsDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.long[month]).toString();\n            }\n        },\n        m: {\n            // Two digit month of year like 01 for January\n            name: 'm',\n            index: 1,\n            extract () { return '(\\\\d+)'; },\n            parser (val) { return DateTimeFormatter.defaultNumberParser()(val) - 1; },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return pad(month + 1);\n            }\n        },\n        y: {\n            // Short year like 90 for 1990\n            name: 'y',\n            index: 0,\n            extract () { return '(\\\\d{2})'; },\n            parser (val) {\n                let result;\n                if (val) {\n                    const l = val.length;\n                    val = val.substring(l - 2, l);\n                }\n                let parsedVal = DateTimeFormatter.defaultNumberParser()(val);\n                let presentDate = new Date();\n                let presentYear = Math.trunc((presentDate.getFullYear()) / 100);\n\n                result = `${presentYear}${parsedVal}`;\n\n                if (convertToNativeDate(result).getFullYear() > presentDate.getFullYear()) {\n                    result = `${presentYear - 1}${parsedVal}`;\n                }\n                return convertToNativeDate(result).getFullYear();\n            },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                let year = d.getFullYear().toString();\n                let l;\n\n                if (year) {\n                    l = year.length;\n                    year = year.substring(l - 2, l);\n                }\n\n                return year;\n            }\n        },\n        Y: {\n            // Long year like 1990\n            name: 'Y',\n            index: 0,\n            extract () { return '(\\\\d{4})'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const year = d.getFullYear().toString();\n\n                return year;\n            }\n        }\n    };\n\n    return definitions;\n};\n\n/*\n * The tokens which works internally is not user friendly in terms of memorizing the names. This gives a formal\n * definition to the informal notations.\n *\n * @return {Object} : Formal definition of the tokens\n */\nDateTimeFormatter.getTokenFormalNames = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n\n    return {\n        HOUR: definitions.H,\n        HOUR_12: definitions.l,\n        AMPM_UPPERCASE: definitions.p,\n        AMPM_LOWERCASE: definitions.P,\n        MINUTE: definitions.M,\n        SECOND: definitions.S,\n        SHORT_DAY: definitions.a,\n        LONG_DAY: definitions.A,\n        DAY_OF_MONTH: definitions.e,\n        DAY_OF_MONTH_CONSTANT_WIDTH: definitions.d,\n        SHORT_MONTH: definitions.b,\n        LONG_MONTH: definitions.B,\n        MONTH_OF_YEAR: definitions.m,\n        SHORT_YEAR: definitions.y,\n        LONG_YEAR: definitions.Y\n    };\n};\n\n/*\n * This defines the rules and declares dependencies that resolves a date parameter (year, month etc) from\n * the date time parameter array.\n *\n * @return {Object} : An object that contains dependencies and a resolver function. The dependencies values are fed\n *                  to the resolver function in that particular sequence only.\n */\nDateTimeFormatter.tokenResolver = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const defaultResolver = (...args) => { // eslint-disable-line require-jsdoc\n        let i = 0;\n        let arg;\n        let targetParam;\n        const l = args.length;\n\n        for (; i < l; i++) {\n            arg = args[i];\n            if (args[i]) {\n                targetParam = arg;\n            }\n        }\n\n        if (!targetParam) { return null; }\n\n        return targetParam[0].parser(targetParam[1]);\n    };\n\n    return {\n        YEAR: [definitions.y, definitions.Y,\n            defaultResolver\n        ],\n        MONTH: [definitions.b, definitions.B, definitions.m,\n            defaultResolver\n        ],\n        DAY: [definitions.a, definitions.A, definitions.e, definitions.d,\n            defaultResolver\n        ],\n        HOUR: [definitions.H, definitions.l, definitions.p, definitions.P,\n            function (hourFormat24, hourFormat12, ampmLower, ampmUpper) {\n                let targetParam;\n                let amOrpm;\n                let isPM;\n                let val;\n\n                if (hourFormat12 && (amOrpm = (ampmLower || ampmUpper))) {\n                    if (amOrpm[0].parser(amOrpm[1]) === 'pm') {\n                        isPM = true;\n                    }\n\n                    targetParam = hourFormat12;\n                } else if (hourFormat12) {\n                    targetParam = hourFormat12;\n                } else {\n                    targetParam = hourFormat24;\n                }\n\n                if (!targetParam) { return null; }\n\n                val = targetParam[0].parser(targetParam[1]);\n                if (isPM) {\n                    val += 12;\n                }\n                return val;\n            }\n        ],\n        MINUTE: [definitions.M,\n            defaultResolver\n        ],\n        SECOND: [definitions.S,\n            defaultResolver\n        ]\n    };\n};\n\n/*\n * Finds token from the format rule specified by a user.\n * @param format {String} : The format of the input date specified by the user\n * @return {Array} : An array of objects which contains the available token and their occurence index in the format\n */\nDateTimeFormatter.findTokens = function (format) {\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenLiterals = Object.keys(definitions);\n    const occurrence = [];\n    let i;\n    let forwardChar;\n\n    while ((i = format.indexOf(tokenPrefix, i + 1)) >= 0) {\n        forwardChar = format[i + 1];\n        if (tokenLiterals.indexOf(forwardChar) === -1) { continue; }\n\n        occurrence.push({\n            index: i,\n            token: forwardChar\n        });\n    }\n\n    return occurrence;\n};\n\n/*\n * Format any JS date to a specified date given by user.\n *\n * @param date {Number | Date} : The date object which is to be formatted\n * @param format {String} : The format using which the date will be formatted for display\n */\nDateTimeFormatter.formatAs = function (date, format) {\n    const nDate = convertToNativeDate(date);\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    let formattedStr = String(format);\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    let token;\n    let formattedVal;\n    let i;\n    let l;\n\n    for (i = 0, l = occurrence.length; i < l; i++) {\n        token = occurrence[i].token;\n        formattedVal = definitions[token].formatter(nDate);\n        formattedStr = formattedStr.replace(new RegExp(tokenPrefix + token, 'g'), formattedVal);\n    }\n\n    return formattedStr;\n};\n\n/*\n * Parses the user specified date string to extract the date time params.\n *\n * @return {Array} : Value of date time params in an array [year, month, day, hour, minutes, seconds, milli]\n */\nDateTimeFormatter.prototype.parse = function (dateTimeStamp, options) {\n    const tokenResolver = DateTimeFormatter.tokenResolver();\n    const dtParams = this.extractTokenValue(dateTimeStamp);\n    const dtParamSeq = DateTimeFormatter.DATETIME_PARAM_SEQUENCE;\n    const noBreak = options && options.noBreak;\n    const dtParamArr = [];\n    const args = [];\n    let resolverKey;\n    let resolverParams;\n    let resolverFn;\n    let val;\n    let i;\n    let param;\n    let resolvedVal;\n    let l;\n    let result = [];\n\n    for (resolverKey in tokenResolver) {\n        if (!{}.hasOwnProperty.call(tokenResolver, resolverKey)) { continue; }\n\n        args.length = 0;\n        resolverParams = tokenResolver[resolverKey];\n        resolverFn = resolverParams.splice(resolverParams.length - 1, 1)[0];\n\n        for (i = 0, l = resolverParams.length; i < l; i++) {\n            param = resolverParams[i];\n            val = dtParams[param.name];\n\n            if (val === undefined) {\n                args.push(null);\n            } else {\n                args.push([param, val]);\n            }\n        }\n\n        resolvedVal = resolverFn.apply(this, args);\n\n        if ((resolvedVal === undefined || resolvedVal === null) && !noBreak) {\n            break;\n        }\n\n        dtParamArr[dtParamSeq[resolverKey]] = resolvedVal;\n    }\n\n    if (dtParamArr.length && this.checkIfOnlyYear(dtParamArr.length))\n     {\n        result.unshift(dtParamArr[0], 0, 1); }\n    else {\n        result.unshift(...dtParamArr);\n    }\n\n    return result;\n};\n\n/*\n * Extract the value of the token from user specified date time string.\n *\n * @return {Object} : An key value pair which contains the tokens as key and value as pair\n */\nDateTimeFormatter.prototype.extractTokenValue = function (dateTimeStamp) {\n    const format = this.format;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const tokenObj = {};\n\n    let lastOccurrenceIndex;\n    let occObj;\n    let occIndex;\n    let targetText;\n    let regexFormat;\n\n    let l;\n    let i;\n\n    regexFormat = String(format);\n\n    const tokenArr = occurrence.map(obj => obj.token);\n    const occurrenceLength = occurrence.length;\n    for (i = occurrenceLength - 1; i >= 0; i--) {\n        occIndex = occurrence[i].index;\n\n        if (occIndex + 1 === regexFormat.length - 1) {\n            lastOccurrenceIndex = occIndex;\n            continue;\n        }\n\n        if (lastOccurrenceIndex === undefined) {\n            lastOccurrenceIndex = regexFormat.length;\n        }\n\n        targetText = regexFormat.substring(occIndex + 2, lastOccurrenceIndex);\n        regexFormat = regexFormat.substring(0, occIndex + 2) +\n            RegExp.escape(targetText) +\n            regexFormat.substring(lastOccurrenceIndex, regexFormat.length);\n\n        lastOccurrenceIndex = occIndex;\n    }\n\n    for (i = 0; i < occurrenceLength; i++) {\n        occObj = occurrence[i];\n        regexFormat = regexFormat.replace(tokenPrefix + occObj.token, definitions[occObj.token].extract());\n    }\n\n    const extractValues = dateTimeStamp.match(new RegExp(regexFormat)) || [];\n    extractValues.shift();\n\n    for (i = 0, l = tokenArr.length; i < l; i++) {\n        tokenObj[tokenArr[i]] = extractValues[i];\n    }\n    return tokenObj;\n};\n\n/*\n * Give back the JS native date formed from  user specified date string\n *\n * @return {Date} : Native JS Date\n */\nDateTimeFormatter.prototype.getNativeDate = function (dateTimeStamp) {\n    let date = null;\n    if (Number.isFinite(dateTimeStamp)) {\n        date = new Date(dateTimeStamp);\n    } else if (!this.format && Date.parse(dateTimeStamp)) {\n        date = new Date(dateTimeStamp);\n    }\n    else {\n        const dtParams = this.dtParams = this.parse(dateTimeStamp);\n        if (dtParams.length) {\n            this.nativeDate = new Date(...dtParams);\n            date = this.nativeDate;\n        }\n    }\n    return date;\n};\n\nDateTimeFormatter.prototype.checkIfOnlyYear = function(len) {\n    return len === 1 && this.format.match(/y|Y/g).length;\n};\n\n/*\n * Represents JS native date to a user specified format.\n *\n * @param format {String} : The format according to which the date is to be represented\n * @return {String} : The formatted date string\n */\nDateTimeFormatter.prototype.formatAs = function (format, dateTimeStamp) {\n    let nativeDate;\n\n    if (dateTimeStamp) {\n        nativeDate = this.nativeDate = this.getNativeDate(dateTimeStamp);\n    } else if (!(nativeDate = this.nativeDate)) {\n        nativeDate = this.getNativeDate(dateTimeStamp);\n    }\n\n    return DateTimeFormatter.formatAs(nativeDate, format);\n};\n\nexport { DateTimeFormatter as default };\n","/**\n * The utility function to calculate major column.\n *\n * @param {Object} store - The store object.\n * @return {Function} Returns the push function.\n */\nexport default (store) => {\n    let i = 0;\n    return (...fields) => {\n        fields.forEach((val, fieldIndex) => {\n            if (!(store[fieldIndex] instanceof Array)) {\n                store[fieldIndex] = Array.from({ length: i });\n            }\n            store[fieldIndex].push(val);\n        });\n        i++;\n    };\n};\n","/* eslint-disable */\nconst OBJECTSTRING = 'object';\nconst objectToStrFn = Object.prototype.toString;\nconst objectToStr = '[object Object]';\nconst arrayToStr = '[object Array]';\n\nfunction checkCyclicRef(obj, parentArr) {\n    let i = parentArr.length;\n    let bIndex = -1;\n\n    while (i) {\n        if (obj === parentArr[i]) {\n            bIndex = i;\n            return bIndex;\n        }\n        i -= 1;\n    }\n\n    return bIndex;\n}\n\nfunction merge(obj1, obj2, skipUndef, tgtArr, srcArr) {\n    var item,\n        srcVal,\n        tgtVal,\n        str,\n        cRef;\n    // check whether obj2 is an array\n    // if array then iterate through it's index\n    // **** MOOTOOLS precution\n\n    if (!srcArr) {\n        tgtArr = [obj1];\n        srcArr = [obj2];\n    }\n    else {\n        tgtArr.push(obj1);\n        srcArr.push(obj2);\n    }\n\n    if (obj2 instanceof Array) {\n        for (item = 0; item < obj2.length; item += 1) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (typeof tgtVal !== OBJECTSTRING) {\n                if (!(skipUndef && tgtVal === undefined)) {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                    srcVal = obj1[item] = tgtVal instanceof Array ? [] : {};\n                }\n                cRef = checkCyclicRef(tgtVal, srcArr);\n                if (cRef !== -1) {\n                    srcVal = obj1[item] = tgtArr[cRef];\n                }\n                else {\n                    merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                }\n            }\n        }\n    }\n    else {\n        for (item in obj2) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (tgtVal !== null && typeof tgtVal === OBJECTSTRING) {\n                // Fix for issue BUG: FWXT-602\n                // IE < 9 Object.prototype.toString.call(null) gives\n                // '[object Object]' instead of '[object Null]'\n                // that's why null value becomes Object in IE < 9\n                str = objectToStrFn.call(tgtVal);\n                if (str === objectToStr) {\n                    if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                        srcVal = obj1[item] = {};\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else if (str === arrayToStr) {\n                    if (srcVal === null || !(srcVal instanceof Array)) {\n                        srcVal = obj1[item] = [];\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (skipUndef && tgtVal === undefined) {\n                    continue;\n                }\n                obj1[item] = tgtVal;\n            }\n        }\n    }\n    return obj1;\n}\n\n\nfunction extend2 (obj1, obj2, skipUndef) {\n    //if none of the arguments are object then return back\n    if (typeof obj1 !== OBJECTSTRING && typeof obj2 !== OBJECTSTRING) {\n        return null;\n    }\n\n    if (typeof obj2 !== OBJECTSTRING || obj2 === null) {\n        return obj1;\n    }\n\n    if (typeof obj1 !== OBJECTSTRING) {\n        obj1 = obj2 instanceof Array ? [] : {};\n    }\n    merge(obj1, obj2, skipUndef);\n    return obj1;\n}\n\nexport { extend2 as default };\n","import { DataFormat } from '../enums';\n\n/**\n * Checks whether the value is an array.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an array otherwise returns false.\n */\nexport function isArray (val) {\n    return Array.isArray(val);\n}\n\n/**\n * Checks whether the value is an object.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an object otherwise returns false.\n */\nexport function isObject (val) {\n    return val === Object(val);\n}\n\n/**\n * Checks whether the value is a string value.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is a string value otherwise returns false.\n */\nexport function isString (val) {\n    return typeof val === 'string';\n}\n\n/**\n * Checks whether the value is callable.\n *\n * @param {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is callable otherwise returns false.\n */\nexport function isCallable (val) {\n    return typeof val === 'function';\n}\n\n/**\n * Returns the unique values from the input array.\n *\n * @param {Array} data - The input array.\n * @return {Array} Returns a new array of unique values.\n */\nexport function uniqueValues (data) {\n    return [...new Set(data)];\n}\n\nexport const getUniqueId = () => `id-${new Date().getTime()}${Math.round(Math.random() * 10000)}`;\n\n/**\n * Checks Whether two arrays have same content.\n *\n * @param {Array} arr1 - The first array.\n * @param {Array} arr2 - The 2nd array.\n * @return {boolean} Returns whether two array have same content.\n */\nexport function isArrEqual(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) {\n        return arr1 === arr2;\n    }\n\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * It is the default number format function for the measure field type.\n *\n * @param {any} val - The input value.\n * @return {number} Returns a number value.\n */\nexport function formatNumber(val) {\n    return val;\n}\n\n/**\n * Returns the detected data format.\n *\n * @param {any} data - The input data to be tested.\n * @return {string} Returns the data format name.\n */\nexport const detectDataFormat = (data) => {\n    if (isString(data)) {\n        return DataFormat.DSV_STR;\n    } else if (isArray(data) && isArray(data[0])) {\n        return DataFormat.DSV_ARR;\n    } else if (isArray(data) && (data.length === 0 || isObject(data[0]))) {\n        return DataFormat.FLAT_JSON;\n    }\n    return null;\n};\n","import { FieldType } from './enums';\nimport { getUniqueId } from './utils';\n\nconst fieldStore = {\n    data: {},\n\n    createNamespace (fieldArr, name) {\n        const dataId = name || getUniqueId();\n\n        this.data[dataId] = {\n            name: dataId,\n            fields: fieldArr,\n\n            fieldsObj () {\n                let fieldsObj = this._cachedFieldsObj;\n\n                if (!fieldsObj) {\n                    fieldsObj = this._cachedFieldsObj = {};\n                    this.fields.forEach((field) => {\n                        fieldsObj[field.name()] = field;\n                    });\n                }\n                return fieldsObj;\n            },\n            getMeasure () {\n                let measureFields = this._cachedMeasure;\n\n                if (!measureFields) {\n                    measureFields = this._cachedMeasure = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.MEASURE) {\n                            measureFields[field.name()] = field;\n                        }\n                    });\n                }\n                return measureFields;\n            },\n            getDimension () {\n                let dimensionFields = this._cachedDimension;\n\n                if (!this._cachedDimension) {\n                    dimensionFields = this._cachedDimension = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.DIMENSION) {\n                            dimensionFields[field.name()] = field;\n                        }\n                    });\n                }\n                return dimensionFields;\n            },\n        };\n        return this.data[dataId];\n    },\n};\n\nexport default fieldStore;\n","/**\n * The wrapper class on top of the primitive value of a field.\n *\n * @todo Need to have support for StringValue, NumberValue, DateTimeValue\n * and GeoValue. These types should expose predicate API mostly.\n */\nclass Value {\n\n  /**\n   * Creates new Value instance.\n   *\n   * @param {*} val - the primitive value from the field cell.\n   * @param {string | Field} field - The field from which the value belongs.\n   */\n    constructor (val, field) {\n        Object.defineProperty(this, '_value', {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: val\n        });\n\n        this.field = field;\n    }\n\n  /**\n   * Returns the field value.\n   *\n   * @return {*} Returns the current value.\n   */\n    get value () {\n        return this._value;\n    }\n\n  /**\n   * Converts to human readable string.\n   *\n   * @override\n   * @return {string} Returns a human readable string of the field value.\n   *\n   */\n    toString () {\n        return String(this.value);\n    }\n\n  /**\n   * Returns the value of the field.\n   *\n   * @override\n   * @return {*} Returns the field value.\n   */\n    valueOf () {\n        return this.value;\n    }\n}\n\nexport default Value;\n","/**\n * Iterates through the diffSet array and call the callback with the current\n * index.\n *\n * @param {string} rowDiffset - The row diffset string e.g. '0-4,6,10-13'.\n * @param {Function} callback - The callback function to be called with every index.\n */\nexport function rowDiffsetIterator (rowDiffset, callback) {\n    if (rowDiffset.length > 0) {\n        const rowDiffArr = rowDiffset.split(',');\n        rowDiffArr.forEach((diffStr) => {\n            const diffStsArr = diffStr.split('-');\n            const start = +(diffStsArr[0]);\n            const end = +(diffStsArr[1] || diffStsArr[0]);\n            if (end >= start) {\n                for (let i = start; i <= end; i += 1) {\n                    callback(i);\n                }\n            }\n        });\n    }\n}\n","/**\n * A parser to parser null, undefined, invalid and NIL values.\n *\n * @public\n * @class\n */\nclass InvalidAwareTypes {\n    /**\n     * Static method which gets/sets the invalid value registry.\n     *\n     * @public\n     * @param {Object} config - The custom configuration supplied by user.\n     * @return {Object} Returns the invalid values registry.\n     */\n    static invalidAwareVals (config) {\n        if (!config) {\n            return InvalidAwareTypes._invalidAwareValsMap;\n        }\n        return Object.assign(InvalidAwareTypes._invalidAwareValsMap, config);\n    }\n\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {string} value - The value of the invalid data type.\n     */\n    constructor (value) {\n        this._value = value;\n    }\n\n    /**\n     * Returns the current value of the instance.\n     *\n     * @public\n     * @return {string} Returns the value of the invalid data type.\n     */\n    value () {\n        return this._value;\n    }\n\n    /**\n     * Returns the current value of the instance in string format.\n     *\n     * @public\n     * @return {string} Returns the value of the invalid data type.\n     */\n    toString () {\n        return String(this._value);\n    }\n\n    static isInvalid(val) {\n        return (val instanceof InvalidAwareTypes) || !!InvalidAwareTypes.invalidAwareVals()[val];\n    }\n\n    static getInvalidType(val) {\n        return val instanceof InvalidAwareTypes ? val : InvalidAwareTypes.invalidAwareVals()[val];\n    }\n}\n\n/**\n * Enums for Invalid types.\n */\nInvalidAwareTypes.NULL = new InvalidAwareTypes('null');\nInvalidAwareTypes.NA = new InvalidAwareTypes('na');\nInvalidAwareTypes.NIL = new InvalidAwareTypes('nil');\n\n/**\n * Default Registry for mapping the invalid values.\n *\n * @private\n */\nInvalidAwareTypes._invalidAwareValsMap = {\n    invalid: InvalidAwareTypes.NA,\n    nil: InvalidAwareTypes.NIL,\n    null: InvalidAwareTypes.NULL,\n    undefined: InvalidAwareTypes.NA\n};\n\nexport default InvalidAwareTypes;\n","import { rowDiffsetIterator } from './row-diffset-iterator';\nimport InvalidAwareTypes from '../invalid-aware-types';\n\nconst generateBuckets = (binSize, start, end) => {\n    const buckets = [];\n    let next = start;\n\n    while (next < end) {\n        buckets.push(next);\n        next += binSize;\n    }\n    buckets.push(next);\n\n    return buckets;\n};\n\nconst findBucketRange = (bucketRanges, value) => {\n    let leftIdx = 0;\n    let rightIdx = bucketRanges.length - 1;\n    let midIdx;\n    let range;\n\n    // Here use binary search as the bucketRanges is a sorted array\n    while (leftIdx <= rightIdx) {\n        midIdx = leftIdx + Math.floor((rightIdx - leftIdx) / 2);\n        range = bucketRanges[midIdx];\n\n        if (value >= range.start && value < range.end) {\n            return range;\n        } else if (value >= range.end) {\n            leftIdx = midIdx + 1;\n        } else if (value < range.start) {\n            rightIdx = midIdx - 1;\n        }\n    }\n\n    return null;\n};\n\n /**\n  * Creates the bin data from input measure field and supplied configs.\n  *\n  * @param {Measure} measureField - The Measure field instance.\n  * @param {string} rowDiffset - The datamodel rowDiffset values.\n  * @param {Object} config - The config object.\n  * @return {Object} Returns the binned data and the corresponding bins.\n  */\nexport function createBinnedFieldData (measureField, rowDiffset, config) {\n    let { buckets, binsCount, binSize, start, end } = config;\n    const [dMin, dMax] = measureField.domain();\n\n    if (!buckets) {\n        start = (start !== 0 && (!start || start > dMin)) ? dMin : start;\n        end = (end !== 0 && (!end || end < dMax)) ? (dMax + 1) : end;\n\n        if (binsCount) {\n            binSize = Math.ceil(Math.abs(end - start) / binsCount);\n        }\n\n        buckets = generateBuckets(binSize, start, end);\n    }\n\n    if (buckets[0] > dMin) {\n        buckets.unshift(dMin);\n    }\n    if (buckets[buckets.length - 1] <= dMax) {\n        buckets.push(dMax + 1);\n    }\n\n    const bucketRanges = [];\n    for (let i = 0; i < buckets.length - 1; i++) {\n        bucketRanges.push({\n            start: buckets[i],\n            end: buckets[i + 1]\n        });\n    }\n\n    const binnedData = [];\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const datum = measureField.partialField.data[i];\n        if (datum instanceof InvalidAwareTypes) {\n            binnedData.push(datum);\n            return;\n        }\n\n        const range = findBucketRange(bucketRanges, datum);\n        binnedData.push(`${range.start}-${range.end}`);\n    });\n\n    return { binnedData, bins: buckets };\n}\n","export { DataFormat, FilteringMode } from '../enums';\n/**\n * The event name for data propagation.\n */\nexport const PROPAGATION = 'propagation';\n\n/**\n * The name of the unique row id column in DataModel.\n */\nexport const ROW_ID = '__id__';\n\n/**\n * The enums for operation names performed on DataModel.\n */\nexport const DM_DERIVATIVES = {\n    SELECT: 'select',\n    PROJECT: 'project',\n    GROUPBY: 'group',\n    COMPOSE: 'compose',\n    CAL_VAR: 'calculatedVariable',\n    BIN: 'bin',\n    SORT: 'sort'\n};\n\nexport const JOINS = {\n    CROSS: 'cross',\n    LEFTOUTER: 'leftOuter',\n    RIGHTOUTER: 'rightOuter',\n    NATURAL: 'natural',\n    FULLOUTER: 'fullOuter'\n};\n\nexport const LOGICAL_OPERATORS = {\n    AND: 'and',\n    OR: 'or'\n};\n","/**\n * The helper function that returns an array of common schema\n * from two fieldStore instances.\n *\n * @param {FieldStore} fs1 - The first FieldStore instance.\n * @param {FieldStore} fs2 - The second FieldStore instance.\n * @return {Array} An array containing the common schema.\n */\nexport function getCommonSchema (fs1, fs2) {\n    const retArr = [];\n    const fs1Arr = [];\n    fs1.fields.forEach((field) => {\n        fs1Arr.push(field.schema().name);\n    });\n    fs2.fields.forEach((field) => {\n        if (fs1Arr.indexOf(field.schema().name) !== -1) {\n            retArr.push(field.schema().name);\n        }\n    });\n    return retArr;\n}\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { getCommonSchema } from './get-common-schema';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { JOINS } from '../constants';\nimport { prepareJoinData } from '../helper';\n/**\n * Default filter function for crossProduct.\n *\n * @return {boolean} Always returns true.\n */\nfunction defaultFilterFn() { return true; }\n\n/**\n * Implementation of cross product operation between two DataModel instances.\n * It internally creates the data and schema for the new DataModel.\n *\n * @param {DataModel} dataModel1 - The left DataModel instance.\n * @param {DataModel} dataModel2 - The right DataModel instance.\n * @param {Function} filterFn - The filter function which is used to filter the tuples.\n * @param {boolean} [replaceCommonSchema=false] - The flag if the common name schema should be there.\n * @return {DataModel} Returns The newly created DataModel instance from the crossProduct operation.\n */\nexport function crossProduct (dm1, dm2, filterFn, replaceCommonSchema = false, jointype = JOINS.CROSS) {\n    const schema = [];\n    const data = [];\n    const applicableFilterFn = filterFn || defaultFilterFn;\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreName = dm1FieldStore.name;\n    const dm2FieldStoreName = dm2FieldStore.name;\n    const name = `${dm1FieldStore.name}.${dm2FieldStore.name}`;\n    const commonSchemaList = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    if (dm1FieldStoreName === dm2FieldStoreName) {\n        throw new Error('DataModels must have different alias names');\n    }\n    // Here prepare the schema\n    dm1FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1 && !replaceCommonSchema) {\n            tmpSchema.name = `${dm1FieldStore.name}.${tmpSchema.name}`;\n        }\n        schema.push(tmpSchema);\n    });\n    dm2FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1) {\n            if (!replaceCommonSchema) {\n                tmpSchema.name = `${dm2FieldStore.name}.${tmpSchema.name}`;\n                schema.push(tmpSchema);\n            }\n        } else {\n            schema.push(tmpSchema);\n        }\n    });\n\n    // Here prepare Data\n    rowDiffsetIterator(dm1._rowDiffset, (i) => {\n        let rowAdded = false;\n        let rowPosition;\n        rowDiffsetIterator(dm2._rowDiffset, (ii) => {\n            const tuple = [];\n            const userArg = {};\n            userArg[dm1FieldStoreName] = {};\n            userArg[dm2FieldStoreName] = {};\n            dm1FieldStore.fields.forEach((field) => {\n                tuple.push(field.partialField.data[i]);\n                userArg[dm1FieldStoreName][field.name()] = field.partialField.data[i];\n            });\n            dm2FieldStore.fields.forEach((field) => {\n                if (!(commonSchemaList.indexOf(field.schema().name) !== -1 && replaceCommonSchema)) {\n                    tuple.push(field.partialField.data[ii]);\n                }\n                userArg[dm2FieldStoreName][field.name()] = field.partialField.data[ii];\n            });\n\n            let cachedStore = {};\n            let cloneProvider1 = () => dm1.detachedRoot();\n            let cloneProvider2 = () => dm2.detachedRoot();\n\n            const dm1Fields = prepareJoinData(userArg[dm1FieldStoreName]);\n            const dm2Fields = prepareJoinData(userArg[dm2FieldStoreName]);\n            if (applicableFilterFn(dm1Fields, dm2Fields, cloneProvider1, cloneProvider2, cachedStore)) {\n                const tupleObj = {};\n                tuple.forEach((cellVal, iii) => {\n                    tupleObj[schema[iii].name] = cellVal;\n                });\n                if (rowAdded && JOINS.CROSS !== jointype) {\n                    data[rowPosition] = tupleObj;\n                }\n                else {\n                    data.push(tupleObj);\n                    rowAdded = true;\n                    rowPosition = i;\n                }\n            } else if ((jointype === JOINS.LEFTOUTER || jointype === JOINS.RIGHTOUTER) && !rowAdded) {\n                const tupleObj = {};\n                let len = dm1FieldStore.fields.length - 1;\n                tuple.forEach((cellVal, iii) => {\n                    if (iii <= len) {\n                        tupleObj[schema[iii].name] = cellVal;\n                    }\n                    else {\n                        tupleObj[schema[iii].name] = null;\n                    }\n                });\n                rowAdded = true;\n                rowPosition = i;\n                data.push(tupleObj);\n            }\n        });\n    });\n\n    return new DataModel(data, schema, { name });\n}\n","/**\n * The default sort function.\n *\n * @param {*} a - The first value.\n * @param {*} b - The second value.\n * @return {number} Returns the comparison result e.g. 1 or 0 or -1.\n */\nfunction defSortFn (a, b) {\n    const a1 = `${a}`;\n    const b1 = `${b}`;\n    if (a1 < b1) {\n        return -1;\n    }\n    if (a1 > b1) {\n        return 1;\n    }\n    return 0;\n}\n\n/**\n * The helper function for merge sort which creates the sorted array\n * from the two halves of the input array.\n *\n * @param {Array} arr - The target array which needs to be merged.\n * @param {number} lo - The starting index of the first array half.\n * @param {number} mid - The ending index of the first array half.\n * @param {number} hi - The ending index of the second array half.\n * @param {Function} sortFn - The sort function.\n */\nfunction merge (arr, lo, mid, hi, sortFn) {\n    const mainArr = arr;\n    const auxArr = [];\n    for (let i = lo; i <= hi; i += 1) {\n        auxArr[i] = mainArr[i];\n    }\n    let a = lo;\n    let b = mid + 1;\n\n    for (let i = lo; i <= hi; i += 1) {\n        if (a > mid) {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        } else if (b > hi) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else if (sortFn(auxArr[a], auxArr[b]) <= 0) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        }\n    }\n}\n\n/**\n * The helper function for merge sort which would be called\n * recursively for sorting the array halves.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {number} lo - The starting index of the array half.\n * @param {number} hi - The ending index of the array half.\n * @param {Function} sortFn - The sort function.\n * @return {Array} Returns the target array itself.\n */\nfunction sort (arr, lo, hi, sortFn) {\n    if (hi === lo) { return arr; }\n\n    const mid = lo + Math.floor((hi - lo) / 2);\n    sort(arr, lo, mid, sortFn);\n    sort(arr, mid + 1, hi, sortFn);\n    merge(arr, lo, mid, hi, sortFn);\n\n    return arr;\n}\n\n/**\n * The implementation of merge sort.\n * It is used in DataModel for stable sorting as it is not sure\n * what the sorting algorithm used by browsers is stable or not.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {Function} [sortFn=defSortFn] - The sort function.\n * @return {Array} Returns the input array itself in sorted order.\n */\nexport function mergeSort (arr, sortFn = defSortFn) {\n    if (arr.length > 1) {\n        sort(arr, 0, arr.length - 1, sortFn);\n    }\n    return arr;\n}\n","import { DimensionSubtype, MeasureSubtype } from '../enums';\nimport { mergeSort } from './merge-sort';\nimport { fieldInSchema } from '../helper';\nimport { isCallable, isArray } from '../utils';\n\n/**\n * Generates the sorting functions to sort the data of a DataModel instance\n * according to the input data type.\n *\n * @param {string} dataType - The data type e.g. 'measure', 'datetime' etc.\n * @param {string} sortType - The sorting order i.e. 'asc' or 'desc'.\n * @return {Function} Returns the the sorting function.\n */\nfunction getSortFn (dataType, sortType) {\n    let retFunc;\n\n    switch (dataType) {\n    case MeasureSubtype.CONTINUOUS:\n    case DimensionSubtype.TEMPORAL:\n        if (sortType === 'asc') {\n            retFunc = (a, b) => a - b;\n        } else {\n            retFunc = (a, b) => b - a;\n        }\n        break;\n    default:\n        if (sortType === 'asc') {\n            retFunc = (a, b) => {\n                a = `${a}`;\n                b = `${b}`;\n                if (a === b) {\n                    return 0;\n                }\n                return a > b ? 1 : -1;\n            };\n        } else {\n            retFunc = (a, b) => {\n                a = `${a}`;\n                b = `${b}`;\n                if (a === b) {\n                    return 0;\n                }\n                return a > b ? -1 : 1;\n            };\n        }\n    }\n\n    return retFunc;\n}\n\n/**\n * Resolves the actual sorting function based on sorting string value.\n *\n * @param {Object} fDetails - The target field info.\n * @param {string} strSortOrder - The sort order value.\n * @return {Function} Returns the sorting function.\n */\nfunction resolveStrSortOrder (fDetails, strSortOrder) {\n    const sortOrder = String(strSortOrder).toLowerCase() === 'desc' ? 'desc' : 'asc';\n    return getSortFn(fDetails.type, sortOrder);\n}\n\n/**\n * Groups the data according to the specified target field.\n *\n * @param {Array} data - The input data array.\n * @param {number} fieldIndex - The target field index within schema array.\n * @return {Array} Returns an array containing the grouped data.\n */\nfunction groupData (data, fieldIndex) {\n    const hashMap = new Map();\n    const groupedData = [];\n\n    data.forEach((datum) => {\n        const fieldVal = datum[fieldIndex];\n        if (hashMap.has(fieldVal)) {\n            groupedData[hashMap.get(fieldVal)][1].push(datum);\n        } else {\n            groupedData.push([fieldVal, [datum]]);\n            hashMap.set(fieldVal, groupedData.length - 1);\n        }\n    });\n\n    return groupedData;\n}\n\n/**\n * Creates the argument value used for sorting function when sort is done\n * with another fields.\n *\n * @param {Array} groupedDatum - The grouped datum for a single dimension field value.\n * @param {Array} targetFields - An array of the sorting fields.\n * @param {Array} targetFieldDetails - An array of the sorting field details in schema.\n * @return {Object} Returns an object containing the value of sorting fields and the target field name.\n */\nfunction createSortingFnArg (groupedDatum, targetFields, targetFieldDetails) {\n    const arg = {\n        label: groupedDatum[0]\n    };\n\n    targetFields.reduce((acc, next, idx) => {\n        acc[next] = groupedDatum[1].map(datum => datum[targetFieldDetails[idx].index]);\n        return acc;\n    }, arg);\n\n    return arg;\n}\n\n/**\n * Sorts the data by applying the standard sorting mechanism.\n *\n * @param {Array} data - The input data array.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n */\nfunction applyStandardSort (data, schema, sortingDetails) {\n    let fieldName;\n    let sortMeta;\n    let fDetails;\n    let i = sortingDetails.length - 1;\n\n    for (; i >= 0; i--) {\n        fieldName = sortingDetails[i][0];\n        sortMeta = sortingDetails[i][1];\n        fDetails = fieldInSchema(schema, fieldName);\n\n        if (!fDetails) {\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        if (isCallable(sortMeta)) {\n            // eslint-disable-next-line no-loop-func\n            mergeSort(data, (a, b) => sortMeta(a[fDetails.index], b[fDetails.index]));\n        } else if (isArray(sortMeta)) {\n            const groupedData = groupData(data, fDetails.index);\n            const sortingFn = sortMeta[sortMeta.length - 1];\n            const targetFields = sortMeta.slice(0, sortMeta.length - 1);\n            const targetFieldDetails = targetFields.map(f => fieldInSchema(schema, f));\n\n            groupedData.forEach((groupedDatum) => {\n                groupedDatum.push(createSortingFnArg(groupedDatum, targetFields, targetFieldDetails));\n            });\n\n            mergeSort(groupedData, (a, b) => {\n                const m = a[2];\n                const n = b[2];\n                return sortingFn(m, n);\n            });\n\n            // Empty the array\n            data.length = 0;\n            groupedData.forEach((datum) => {\n                data.push(...datum[1]);\n            });\n        } else {\n            const sortFn = resolveStrSortOrder(fDetails, sortMeta);\n            // eslint-disable-next-line no-loop-func\n            mergeSort(data, (a, b) => sortFn(a[fDetails.index], b[fDetails.index]));\n        }\n    }\n}\n\n/**\n * Creates a map based on grouping.\n *\n * @param {Array} depColumns - The dependency columns' info.\n * @param {Array} data - The input data.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - The sorting details for standard sorting.\n * @return {Map} Returns a map.\n */\nconst makeGroupMapAndSort = (depColumns, data, schema, sortingDetails) => {\n    if (depColumns.length === 0) { return data; }\n\n    const targetCol = depColumns[0];\n    const map = new Map();\n\n    data.reduce((acc, currRow) => {\n        const fVal = currRow[targetCol.index];\n        if (acc.has(fVal)) {\n            acc.get(fVal).push(currRow);\n        } else {\n            acc.set(fVal, [currRow]);\n        }\n        return acc;\n    }, map);\n\n    for (let [key, val] of map) {\n        const nMap = makeGroupMapAndSort(depColumns.slice(1), val, schema, sortingDetails);\n        map.set(key, nMap);\n        if (Array.isArray(nMap)) {\n            applyStandardSort(nMap, schema, sortingDetails);\n        }\n    }\n\n    return map;\n};\n\n/**\n * Sorts the data by retaining the position/order of a particular field.\n *\n * @param {Array} data - The input data array.\n * @param {Array} schema - The data schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n * @param {Array} depColumns - The dependency column list.\n * @return {Array} Returns the sorted data.\n */\nfunction applyGroupSort (data, schema, sortingDetails, depColumns) {\n    sortingDetails = sortingDetails.filter((detail) => {\n        if (detail[1] === null) {\n            depColumns.push(detail[0]);\n            return false;\n        }\n        return true;\n    });\n    if (sortingDetails.length === 0) { return data; }\n\n    depColumns = depColumns.map(c => fieldInSchema(schema, c));\n\n    const sortedGroupMap = makeGroupMapAndSort(depColumns, data, schema, sortingDetails);\n    return data.map((row) => {\n        let i = 0;\n        let nextMap = sortedGroupMap;\n\n        while (!Array.isArray(nextMap)) {\n            nextMap = nextMap.get(row[depColumns[i++].index]);\n        }\n\n        return nextMap.shift();\n    });\n}\n\n/**\n * Sorts the data.\n *\n * @param {Object} dataObj - An object containing the data and schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n */\nexport function sortData (dataObj, sortingDetails) {\n    let { schema, data } = dataObj;\n\n    sortingDetails = sortingDetails.filter(sDetial => !!fieldInSchema(schema, sDetial[0]));\n    if (sortingDetails.length === 0) { return; }\n\n    let groupSortingIdx = sortingDetails.findIndex(sDetial => sDetial[1] === null);\n    groupSortingIdx = groupSortingIdx !== -1 ? groupSortingIdx : sortingDetails.length;\n\n    const standardSortingDetails = sortingDetails.slice(0, groupSortingIdx);\n    const groupSortingDetails = sortingDetails.slice(groupSortingIdx);\n\n    applyStandardSort(data, schema, standardSortingDetails);\n    data = applyGroupSort(data, schema, groupSortingDetails, standardSortingDetails.map(detail => detail[0]));\n\n    dataObj.uids = data.map(row => row.pop());\n    dataObj.data = data;\n}\n","import { rowDiffsetIterator } from './row-diffset-iterator';\nimport { sortData } from './sort';\n\n/**\n * Builds the actual data array.\n *\n * @param {Array} fieldStore - An array of field.\n * @param {string} rowDiffset - A string consisting of which rows to be included eg. '0-2,4,6';\n * @param {string} colIdentifier - A string consisting of the details of which column\n * to be included eg 'date,sales,profit';\n * @param {Object} sortingDetails - An object containing the sorting details of the DataModel instance.\n * @param {Object} options - The options required to create the type of the data.\n * @return {Object} Returns an object containing the multidimensional array and the relative schema.\n */\nexport function dataBuilder (fieldStore, rowDiffset, colIdentifier, sortingDetails, options) {\n    const defOptions = {\n        addUid: false,\n        columnWise: false\n    };\n    options = Object.assign({}, defOptions, options);\n\n    const retObj = {\n        schema: [],\n        data: [],\n        uids: []\n    };\n    const addUid = options.addUid;\n    const reqSorting = sortingDetails && sortingDetails.length > 0;\n    // It stores the fields according to the colIdentifier argument\n    const tmpDataArr = [];\n    // Stores the fields according to the colIdentifier argument\n    const colIArr = colIdentifier.split(',');\n\n    colIArr.forEach((colName) => {\n        for (let i = 0; i < fieldStore.length; i += 1) {\n            if (fieldStore[i].name() === colName) {\n                tmpDataArr.push(fieldStore[i]);\n                break;\n            }\n        }\n    });\n\n    // Inserts the schema to the schema object\n    tmpDataArr.forEach((field) => {\n        /** @todo Need to use extend2 here otherwise user can overwrite the schema. */\n        retObj.schema.push(field.schema());\n    });\n\n    if (addUid) {\n        retObj.schema.push({\n            name: 'uid',\n            type: 'identifier'\n        });\n    }\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        retObj.data.push([]);\n        const insertInd = retObj.data.length - 1;\n        let start = 0;\n        tmpDataArr.forEach((field, ii) => {\n            retObj.data[insertInd][ii + start] = field.partialField.data[i];\n        });\n        if (addUid) {\n            retObj.data[insertInd][tmpDataArr.length] = i;\n        }\n        // Creates an array of unique identifiers for each row\n        retObj.uids.push(i);\n\n        // If sorting needed then there is the need to expose the index\n        // mapping from the old index to its new index\n        if (reqSorting) { retObj.data[insertInd].push(i); }\n    });\n\n    // Handles the sort functionality\n    if (reqSorting) {\n        sortData(retObj, sortingDetails);\n    }\n\n    if (options.columnWise) {\n        const tmpData = Array(...Array(retObj.schema.length)).map(() => []);\n        retObj.data.forEach((tuple) => {\n            tuple.forEach((data, i) => {\n                tmpData[i].push(data);\n            });\n        });\n        retObj.data = tmpData;\n    }\n\n    return retObj;\n}\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n\n/**\n * Performs the union operation between two dm instances.\n *\n * @todo Fix the conflicts between union and difference terminology here.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function difference (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n   // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     * @param {boolean} addData - If true only tuple will be added to the data.\n     */\n    function prepareDataHelper(dm, fieldsObj, addData) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                if (addData) { data.push(tuple); }\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj, false);\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj, true);\n\n    return new DataModel(data, schema, { name });\n}\n\n","import { isArray } from '../utils';\nimport InvalidAwareTypes from '../invalid-aware-types';\nimport { GROUP_BY_FUNCTIONS } from '../enums';\n\nconst { SUM, AVG, FIRST, LAST, COUNT, STD, MIN, MAX } = GROUP_BY_FUNCTIONS;\n\nfunction getFilteredValues(arr) {\n    return arr.filter(item => !(item instanceof InvalidAwareTypes));\n}\n/**\n * Reducer function that returns the sum of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the sum of the array.\n */\nfunction sum (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        const filteredNumber = getFilteredValues(arr);\n        const totalSum = filteredNumber.length ?\n                            filteredNumber.reduce((acc, curr) => acc + curr, 0)\n                            : InvalidAwareTypes.NULL;\n        return totalSum;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that returns the average of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the mean value of the array.\n */\nfunction avg (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        const totalSum = sum(arr);\n        const len = arr.length || 1;\n        return (Number.isNaN(totalSum) || totalSum instanceof InvalidAwareTypes) ?\n                 InvalidAwareTypes.NULL : totalSum / len;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the min value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the minimum value of the array.\n */\nfunction min (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = getFilteredValues(arr);\n\n        return (filteredValues.length) ? Math.min(...filteredValues) : InvalidAwareTypes.NULL;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the max value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the maximum value of the array.\n */\nfunction max (arr) {\n    if (isArray(arr) && !(arr[0] instanceof Array)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = getFilteredValues(arr);\n\n        return (filteredValues.length) ? Math.max(...filteredValues) : InvalidAwareTypes.NULL;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Reducer function that gives the first value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the first value of the array.\n */\nfunction first (arr) {\n    return arr[0];\n}\n\n/**\n * Reducer function that gives the last value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the last value of the array.\n */\nfunction last (arr) {\n    return arr[arr.length - 1];\n}\n\n/**\n * Reducer function that gives the count value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the length of the array.\n */\nfunction count (arr) {\n    if (isArray(arr)) {\n        return arr.length;\n    }\n    return InvalidAwareTypes.NULL;\n}\n\n/**\n * Calculates the variance of the input array.\n *\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the variance of the input array.\n */\nfunction variance (arr) {\n    let mean = avg(arr);\n    return avg(arr.map(num => (num - mean) ** 2));\n}\n\n/**\n * Calculates the square root of the variance of the input array.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the square root of the variance.\n */\nfunction std (arr) {\n    return Math.sqrt(variance(arr));\n}\n\n\nconst fnList = {\n    [SUM]: sum,\n    [AVG]: avg,\n    [MIN]: min,\n    [MAX]: max,\n    [FIRST]: first,\n    [LAST]: last,\n    [COUNT]: count,\n    [STD]: std\n};\n\nconst defaultReducerName = SUM;\n\nexport {\n    defaultReducerName,\n    sum as defReducer,\n    fnList,\n};\n","import { defReducer, fnList } from '../operator';\n\n/**\n * A page level storage which stores, registers, unregisters reducers for all the datamodel instances. There is only one\n * reducer store available in a page. All the datamodel instances receive same instance of reducer store. DataModel\n * out of the box provides handful of {@link reducer | reducers} which can be used as reducer funciton.\n *\n * @public\n * @namespace DataModel\n */\nclass ReducerStore {\n    constructor () {\n        this.store = new Map();\n        this.store.set('defReducer', defReducer);\n\n        Object.entries(fnList).forEach((key) => {\n            this.store.set(key[0], key[1]);\n        });\n    }\n\n    /**\n     * Changes the `defaultReducer` globally. For all the fields which does not have `defAggFn` mentioned in schema, the\n     * value of `defaultReducer` is used for aggregation.\n     *\n     * @public\n     * @param {string} [reducer='sum'] - The name of the default reducer. It picks up the definition from store by doing\n     * name lookup. If no name is found then it takes `sum` as the default reducer.\n     * @return {ReducerStore} Returns instance of the singleton store in page.\n     */\n    defaultReducer (...params) {\n        if (!params.length) {\n            return this.store.get('defReducer');\n        }\n\n        let reducer = params[0];\n\n        if (typeof reducer === 'function') {\n            this.store.set('defReducer', reducer);\n        } else {\n            reducer = String(reducer);\n            if (Object.keys(fnList).indexOf(reducer) !== -1) {\n                this.store.set('defReducer', fnList[reducer]);\n            } else {\n                throw new Error(`Reducer ${reducer} not found in registry`);\n            }\n        }\n        return this;\n    }\n\n    /**\n     *\n     * Registers a {@link reducer | reducer}.\n     * A {@link reducer | reducer} has to be registered before it is used.\n     *\n     * @example\n     *  // find the mean squared value of a given set\n     *  const reducerStore = DataModel.Reducers();\n     *\n     *  reducers.register('meanSquared', (arr) => {\n     *      const squaredVal = arr.map(item => item * item);\n     *      let sum = 0;\n     *      for (let i = 0, l = squaredVal.length; i < l; i++) {\n     *          sum += squaredVal[i++];\n     *      }\n     *\n     *      return sum;\n     *  })\n     *\n     *  // datamodel (dm) is already prepared with cars.json\n     *  const dm1 = dm.groupBy(['origin'], {\n     *      accleration: 'meanSquared'\n     *  });\n     *\n     * @public\n     *\n     * @param {string} name formal name for a reducer. If the given name already exists in store it is overridden by new\n     *      definition.\n     * @param {Function} reducer definition of {@link reducer} function.\n     *\n     * @return {Function} function for unregistering the reducer.\n     */\n    register (name, reducer) {\n        if (typeof reducer !== 'function') {\n            throw new Error('Reducer should be a function');\n        }\n\n        name = String(name);\n        this.store.set(name, reducer);\n\n        return () => { this.__unregister(name); };\n    }\n\n    __unregister (name) {\n        if (this.store.has(name)) {\n            this.store.delete(name);\n        }\n    }\n\n    resolve (name) {\n        if (name instanceof Function) {\n            return name;\n        }\n        return this.store.get(name);\n    }\n}\n\nconst reducerStore = (function () {\n    let store = null;\n\n    function getStore () {\n        if (store === null) {\n            store = new ReducerStore();\n        }\n        return store;\n    }\n    return getStore();\n}());\n\nexport default reducerStore;\n","import { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport DataModel from '../export';\nimport reducerStore from '../utils/reducer-store';\nimport { defaultReducerName } from './group-by-function';\nimport { FieldType } from '../enums';\n\n/**\n * This function sanitize the user given field and return a common Array structure field\n * list\n * @param  {DataModel} dataModel the dataModel operating on\n * @param  {Array} fieldArr  user input of field Array\n * @return {Array}           arrays of field name\n */\nfunction getFieldArr (dataModel, fieldArr) {\n    const retArr = [];\n    const fieldStore = dataModel.getFieldspace();\n    const dimensions = fieldStore.getDimension();\n\n    Object.entries(dimensions).forEach(([key]) => {\n        if (fieldArr && fieldArr.length) {\n            if (fieldArr.indexOf(key) !== -1) {\n                retArr.push(key);\n            }\n        } else {\n            retArr.push(key);\n        }\n    });\n\n    return retArr;\n}\n\n/**\n * This sanitize the reducer provide by the user and create a common type of object.\n * user can give function Also\n * @param  {DataModel} dataModel     dataModel to worked on\n * @param  {Object|function} [reducers={}] reducer provided by the users\n * @return {Object}               object containing reducer function for every measure\n */\nfunction getReducerObj (dataModel, reducers = {}) {\n    const retObj = {};\n    const fieldStore = dataModel.getFieldspace();\n    const measures = fieldStore.getMeasure();\n    const defReducer = reducerStore.defaultReducer();\n\n    Object.keys(measures).forEach((measureName) => {\n        if (typeof reducers[measureName] !== 'string') {\n            reducers[measureName] = measures[measureName].defAggFn();\n        }\n        const reducerFn = reducerStore.resolve(reducers[measureName]);\n        if (reducerFn) {\n            retObj[measureName] = reducerFn;\n        } else {\n            retObj[measureName] = defReducer;\n            reducers[measureName] = defaultReducerName;\n        }\n    });\n    return retObj;\n}\n\n/**\n * main function which perform the group-by operations which reduce the measures value is the\n * fields are common according to the reducer function provided\n * @param  {DataModel} dataModel the dataModel to worked\n * @param  {Array} fieldArr  fields according to which the groupby should be worked\n * @param  {Object|Function} reducers  reducers function\n * @param {DataModel} existingDataModel Existing datamodel instance\n * @return {DataModel} new dataModel with the group by\n */\nfunction groupBy (dataModel, fieldArr, reducers, existingDataModel) {\n    const sFieldArr = getFieldArr(dataModel, fieldArr);\n    const reducerObj = getReducerObj(dataModel, reducers);\n    const fieldStore = dataModel.getFieldspace();\n    const fieldStoreObj = fieldStore.fieldsObj();\n    const dbName = fieldStore.name;\n    const dimensionArr = [];\n    const measureArr = [];\n    const schema = [];\n    const hashMap = {};\n    const data = [];\n    let newDataModel;\n\n    // Prepare the schema\n    Object.entries(fieldStoreObj).forEach(([key, value]) => {\n        if (sFieldArr.indexOf(key) !== -1 || reducerObj[key]) {\n            schema.push(extend2({}, value.schema()));\n\n            switch (value.schema().type) {\n            case FieldType.MEASURE:\n                measureArr.push(key);\n                break;\n            default:\n            case FieldType.DIMENSION:\n                dimensionArr.push(key);\n            }\n        }\n    });\n    // Prepare the data\n    let rowCount = 0;\n    rowDiffsetIterator(dataModel._rowDiffset, (i) => {\n        let hash = '';\n        dimensionArr.forEach((_) => {\n            hash = `${hash}-${fieldStoreObj[_].partialField.data[i]}`;\n        });\n        if (hashMap[hash] === undefined) {\n            hashMap[hash] = rowCount;\n            data.push({});\n            dimensionArr.forEach((_) => {\n                data[rowCount][_] = fieldStoreObj[_].partialField.data[i];\n            });\n            measureArr.forEach((_) => {\n                data[rowCount][_] = [fieldStoreObj[_].partialField.data[i]];\n            });\n            rowCount += 1;\n        } else {\n            measureArr.forEach((_) => {\n                data[hashMap[hash]][_].push(fieldStoreObj[_].partialField.data[i]);\n            });\n        }\n    });\n\n    // reduction\n    let cachedStore = {};\n    let cloneProvider = () => dataModel.detachedRoot();\n    data.forEach((row) => {\n        const tuple = row;\n        measureArr.forEach((_) => {\n            tuple[_] = reducerObj[_](row[_], cloneProvider, cachedStore);\n        });\n    });\n    if (existingDataModel) {\n        existingDataModel.__calculateFieldspace();\n        newDataModel = existingDataModel;\n    }\n    else {\n        newDataModel = new DataModel(data, schema, { name: dbName });\n    }\n    return newDataModel;\n}\n\nexport { groupBy, getFieldArr, getReducerObj };\n","import { getCommonSchema } from './get-common-schema';\n\n/**\n * The filter function used in natural join.\n * It generates a function that will have the logic to join two\n * DataModel instances by the process of natural join.\n *\n * @param {DataModel} dm1 - The left DataModel instance.\n * @param {DataModel} dm2 - The right DataModel instance.\n * @return {Function} Returns a function that is used in cross-product operation.\n */\nexport function naturalJoinFilter (dm1, dm2) {\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    // const dm1FieldStoreName = dm1FieldStore.name;\n    // const dm2FieldStoreName = dm2FieldStore.name;\n    const commonSchemaArr = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    return (dm1Fields, dm2Fields) => {\n        let retainTuple = true;\n        commonSchemaArr.forEach((fieldName) => {\n            if (dm1Fields[fieldName].value ===\n                dm2Fields[fieldName].value && retainTuple) {\n                retainTuple = true;\n            } else {\n                retainTuple = false;\n            }\n        });\n        return retainTuple;\n    };\n}\n","import DataModel from '../export';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n/**\n * Performs the union operation between two dm instances.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function union (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n    // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     */\n    function prepareDataHelper (dm, fieldsObj) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                data.push(tuple);\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj);\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj);\n\n    return new DataModel(data, schema, { name });\n}\n","import { crossProduct } from './cross-product';\nimport { JOINS } from '../constants';\nimport { union } from './union';\n\n\nexport function leftOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel1, dataModel2, filterFn, false, JOINS.LEFTOUTER);\n}\n\nexport function rightOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel2, dataModel1, filterFn, false, JOINS.RIGHTOUTER);\n}\n\nexport function fullOuterJoin (dataModel1, dataModel2, filterFn) {\n    return union(leftOuterJoin(dataModel1, dataModel2, filterFn), rightOuterJoin(dataModel1, dataModel2, filterFn));\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\n\n/**\n * In {@link DataModel}, every tabular data consists of column, a column is stored as field.\n * Field contains all the data for a given column in an array.\n *\n * Each record consists of several fields; the fields of all records form the columns.\n * Examples of fields: name, gender, sex etc.\n *\n * In DataModel, each field can have multiple attributes which describes its data and behaviour.\n * A field can have two types of data: Measure and Dimension.\n *\n * A Dimension Field is the context on which a data is categorized and the measure is the numerical values that\n * quantify the data set.\n * In short a dimension is the lens through which you are looking at your measure data.\n *\n * Refer to {@link Schema} to get info about possible field attributes.\n *\n * @public\n * @class\n */\nexport default class Field {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        this.partialField = partialField;\n        this.rowDiffset = rowDiffset;\n    }\n\n    /**\n     * Generates the field type specific domain.\n     *\n     * @public\n     * @abstract\n     */\n    domain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the the field schema.\n     *\n     * @public\n     * @return {string} Returns the field schema.\n     */\n    schema () {\n        return this.partialField.schema;\n    }\n\n    /**\n     * Returns the name of the field.\n     *\n     * @public\n     * @return {string} Returns the name of the field.\n     */\n    name () {\n        return this.partialField.name;\n    }\n\n    /**\n     * Returns the type of the field.\n     *\n     * @public\n     * @return {string} Returns the type of the field.\n     */\n    type () {\n        return this.partialField.schema.type;\n    }\n\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return this.partialField.schema.subtype;\n    }\n\n    /**\n     * Returns the description of the field.\n     *\n     * @public\n     * @return {string} Returns the description of the field.\n     */\n    description () {\n        return this.partialField.schema.description;\n    }\n\n    /**\n     * Returns the display name of the field.\n     *\n     * @public\n     * @return {string} Returns the display name of the field.\n     */\n    displayName () {\n        return this.partialField.schema.displayName || this.partialField.schema.name;\n    }\n\n    /**\n     * Returns the data associated with the field.\n     *\n     * @public\n     * @return {Array} Returns the data.\n     */\n    data () {\n        const data = [];\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            data.push(this.partialField.data[i]);\n        });\n        return data;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @abstract\n     */\n    formattedData () {\n        throw new Error('Not yet implemented');\n    }\n}\n","import Field from '../field';\n\n/**\n * Represents dimension field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Dimension extends Field {\n    /**\n     * Returns the domain for the dimension field.\n     *\n     * @override\n     * @public\n     * @return {any} Returns the calculated domain.\n     */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @abstract\n     */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n     /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport { DimensionSubtype } from '../../enums';\nimport Dimension from '../dimension';\n/**\n * Represents categorical field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Categorical extends Dimension {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return DimensionSubtype.CATEGORICAL;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        const hash = new Set();\n        const domain = [];\n\n        // here don't use this.data() as the iteration will be occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (!hash.has(datum)) {\n                hash.add(datum);\n                domain.push(datum);\n            }\n        });\n        return domain;\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport Dimension from '../dimension';\nimport { DateTimeFormatter } from '../../utils';\nimport InvalidAwareTypes from '../../invalid-aware-types';\n\n/**\n * Represents temporal field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Temporal extends Dimension {\n     /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        super(partialField, rowDiffset);\n\n        this._cachedMinDiff = null;\n    }\n\n     /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        const hash = new Set();\n        const domain = [];\n\n        // here don't use this.data() as the iteration will be\n        // occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (!hash.has(datum)) {\n                hash.add(datum);\n                domain.push(datum);\n            }\n        });\n\n        return domain;\n    }\n\n\n    /**\n     * Calculates the minimum consecutive difference from the associated field data.\n     *\n     * @public\n     * @return {number} Returns the minimum consecutive diff in milliseconds.\n     */\n    minimumConsecutiveDifference () {\n        if (this._cachedMinDiff) {\n            return this._cachedMinDiff;\n        }\n\n        const sortedData = this.data().filter(item => !(item instanceof InvalidAwareTypes)).sort((a, b) => a - b);\n        const arrLn = sortedData.length;\n        let minDiff = Number.POSITIVE_INFINITY;\n        let prevDatum;\n        let nextDatum;\n        let processedCount = 0;\n\n        for (let i = 1; i < arrLn; i++) {\n            prevDatum = sortedData[i - 1];\n            nextDatum = sortedData[i];\n\n            if (nextDatum === prevDatum) {\n                continue;\n            }\n\n            minDiff = Math.min(minDiff, nextDatum - sortedData[i - 1]);\n            processedCount++;\n        }\n\n        if (!processedCount) {\n            minDiff = null;\n        }\n        this._cachedMinDiff = minDiff;\n\n        return this._cachedMinDiff;\n    }\n\n    /**\n     * Returns the format specified in the input schema while creating field.\n     *\n     * @public\n     * @return {string} Returns the datetime format.\n     */\n    format () {\n        return this.partialField.schema.format;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        const data = [];\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum instanceof InvalidAwareTypes) {\n                data.push(datum);\n            } else {\n                data.push(DateTimeFormatter.formatAs(datum, this.format()));\n            }\n        });\n        return data;\n    }\n}\n\n","import Dimension from '../dimension';\n\n/**\n * Represents binned field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Binned extends Dimension {\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the last and first values of bins config array.\n     */\n    calculateDataDomain () {\n        const binsArr = this.partialField.schema.bins;\n        return [binsArr[0], binsArr[binsArr.length - 1]];\n    }\n\n    /**\n     * Returns the bins config provided while creating the field instance.\n     *\n     * @public\n     * @return {Array} Returns the bins array config.\n     */\n    bins () {\n        return this.partialField.schema.bins;\n    }\n}\n","import { formatNumber } from '../../utils';\nimport { defaultReducerName } from '../../operator/group-by-function';\nimport Field from '../field';\n\n/**\n * Represents measure field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Measure extends Field {\n  /**\n   * Returns the domain for the measure field.\n   *\n   * @override\n   * @public\n   * @return {any} Returns the calculated domain.\n   */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n  /**\n   * Returns the unit of the measure field.\n   *\n   * @public\n   * @return {string} Returns unit of the field.\n   */\n    unit () {\n        return this.partialField.schema.unit;\n    }\n\n  /**\n   * Returns the aggregation function name of the measure field.\n   *\n   * @public\n   * @return {string} Returns aggregation function name of the field.\n   */\n    defAggFn () {\n        return this.partialField.schema.defAggFn || defaultReducerName;\n    }\n\n  /**\n   * Returns the number format of the measure field.\n   *\n   * @public\n   * @return {Function} Returns number format of the field.\n   */\n    numberFormat () {\n        const { numberFormat } = this.partialField.schema;\n        return numberFormat instanceof Function ? numberFormat : formatNumber;\n    }\n\n  /**\n   * Calculates the corresponding field domain.\n   *\n   * @public\n   * @abstract\n   */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport { MeasureSubtype } from '../../enums';\nimport Measure from '../measure';\nimport InvalidAwareTypes from '../../invalid-aware-types';\n\n/**\n * Represents continuous field subtype.\n *\n * @public\n * @class\n * @extends Measure\n */\nexport default class Continuous extends Measure {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return MeasureSubtype.CONTINUOUS;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the min and max values.\n     */\n    calculateDataDomain () {\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n\n        // here don't use this.data() as the iteration will be occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum instanceof InvalidAwareTypes) {\n                return;\n            }\n\n            if (datum < min) {\n                min = datum;\n            }\n            if (datum > max) {\n                max = datum;\n            }\n        });\n\n        return [min, max];\n    }\n}\n","/**\n * A interface to represent a parser which is responsible to parse the field.\n *\n * @public\n * @interface\n */\nexport default class FieldParser {\n    /**\n     * Parses a single value of a field and return the sanitized form.\n     *\n     * @public\n     * @abstract\n     */\n    parse () {\n        throw new Error('Not yet implemented');\n    }\n}\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the categorical values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class CategoricalParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the stringified form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the stringified value.\n   */\n    parse (val) {\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            result = String(val).trim();\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import { DateTimeFormatter } from '../../../utils';\nimport FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the temporal values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class TemporalParser extends FieldParser {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {Object} schema - The schema object for the corresponding field.\n     */\n    constructor (schema) {\n        super();\n        this.schema = schema;\n        this._dtf = new DateTimeFormatter(this.schema.format);\n    }\n\n    /**\n     * Parses a single value of a field and returns the millisecond value.\n     *\n     * @public\n     * @param {string|number} val - The value of the field.\n     * @return {number} Returns the millisecond value.\n     */\n    parse (val) {\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let nativeDate = this._dtf.getNativeDate(val);\n            result = nativeDate ? nativeDate.getTime() : InvalidAwareTypes.NA;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the binned values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class BinnedParser extends FieldParser {\n  /**\n   * Parses a single binned value of a field and returns the sanitized value.\n   *\n   * @public\n   * @param {string} val - The value of the field.\n   * @return {string} Returns the sanitized value.\n   */\n    parse (val) {\n        const regex = /^\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*-\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*$/;\n        val = String(val);\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let matched = val.match(regex);\n            result = matched ? `${Number.parseFloat(matched[1])}-${Number.parseFloat(matched[2])}`\n                             : InvalidAwareTypes.NA;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","import FieldParser from '../field-parser';\nimport InvalidAwareTypes from '../../../invalid-aware-types';\n\n/**\n * A FieldParser which parses the continuous values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class ContinuousParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the number form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the number value.\n   */\n    parse (val) {\n        let result;\n        // check if invalid date value\n        if (!InvalidAwareTypes.isInvalid(val)) {\n            let parsedVal = parseFloat(val, 10);\n            result = Number.isNaN(parsedVal) ? InvalidAwareTypes.NA : parsedVal;\n        } else {\n            result = InvalidAwareTypes.getInvalidType(val);\n        }\n        return result;\n    }\n}\n","/**\n * Stores the full data and the metadata of a field. It provides\n * a single source of data from which the future Field\n * instance can get a subset of it with a rowDiffset config.\n *\n * @class\n * @public\n */\nexport default class PartialField {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {string} name - The name of the field.\n     * @param {Array} data - The data array.\n     * @param {Object} schema - The schema object of the corresponding field.\n     * @param {FieldParser} parser - The parser instance corresponding to that field.\n     */\n    constructor (name, data, schema, parser) {\n        this.name = name;\n        this.schema = schema;\n        this.parser = parser;\n        this.data = this._sanitize(data);\n    }\n\n    /**\n     * Sanitizes the field data.\n     *\n     * @private\n     * @param {Array} data - The actual input data.\n     * @return {Array} Returns the sanitized data.\n     */\n    _sanitize (data) {\n        return data.map(datum => this.parser.parse(datum));\n    }\n}\n","import { FieldType, DimensionSubtype, MeasureSubtype } from './enums';\nimport {\n    Categorical,\n    Temporal,\n    Binned,\n    Continuous,\n    CategoricalParser,\n    TemporalParser,\n    BinnedParser,\n    ContinuousParser,\n    PartialField\n} from './fields';\n\n/**\n * Creates a field instance according to the provided data and schema.\n *\n * @param {Array} data - The field data array.\n * @param {Object} schema - The field schema object.\n * @return {Field} Returns the newly created field instance.\n */\nfunction createUnitField(data, schema) {\n    data = data || [];\n    let partialField;\n\n    switch (schema.type) {\n    case FieldType.MEASURE:\n        switch (schema.subtype) {\n        case MeasureSubtype.CONTINUOUS:\n            partialField = new PartialField(schema.name, data, schema, new ContinuousParser());\n            return new Continuous(partialField, `0-${data.length - 1}`);\n        default:\n            partialField = new PartialField(schema.name, data, schema, new ContinuousParser());\n            return new Continuous(partialField, `0-${data.length - 1}`);\n        }\n    case FieldType.DIMENSION:\n        switch (schema.subtype) {\n        case DimensionSubtype.CATEGORICAL:\n            partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n            return new Categorical(partialField, `0-${data.length - 1}`);\n        case DimensionSubtype.TEMPORAL:\n            partialField = new PartialField(schema.name, data, schema, new TemporalParser(schema));\n            return new Temporal(partialField, `0-${data.length - 1}`);\n        case DimensionSubtype.BINNED:\n            partialField = new PartialField(schema.name, data, schema, new BinnedParser());\n            return new Binned(partialField, `0-${data.length - 1}`);\n        default:\n            partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n            return new Categorical(partialField, `0-${data.length - 1}`);\n        }\n    default:\n        partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n        return new Categorical(partialField, `0-${data.length - 1}`);\n    }\n}\n\n\n/**\n * Creates a field instance from partialField and rowDiffset.\n *\n * @param {PartialField} partialField - The corresponding partial field.\n * @param {string} rowDiffset - The data subset config.\n * @return {Field} Returns the newly created field instance.\n */\nexport function createUnitFieldFromPartial(partialField, rowDiffset) {\n    const { schema } = partialField;\n\n    switch (schema.type) {\n    case FieldType.MEASURE:\n        switch (schema.subtype) {\n        case MeasureSubtype.CONTINUOUS:\n            return new Continuous(partialField, rowDiffset);\n        default:\n            return new Continuous(partialField, rowDiffset);\n        }\n    case FieldType.DIMENSION:\n        switch (schema.subtype) {\n        case DimensionSubtype.CATEGORICAL:\n            return new Categorical(partialField, rowDiffset);\n        case DimensionSubtype.TEMPORAL:\n            return new Temporal(partialField, rowDiffset);\n        case DimensionSubtype.BINNED:\n            return new Binned(partialField, rowDiffset);\n        default:\n            return new Categorical(partialField, rowDiffset);\n        }\n    default:\n        return new Categorical(partialField, rowDiffset);\n    }\n}\n\n/**\n * Creates the field instances with input data and schema.\n *\n * @param {Array} dataColumn - The data array for fields.\n * @param {Array} schema - The schema array for fields.\n * @param {Array} headers - The array of header names.\n * @return {Array.<Field>} Returns an array of newly created field instances.\n */\nexport function createFields(dataColumn, schema, headers) {\n    const headersObj = {};\n\n    if (!(headers && headers.length)) {\n        headers = schema.map(item => item.name);\n    }\n\n    headers.forEach((header, i) => {\n        headersObj[header] = i;\n    });\n\n    return schema.map(item => createUnitField(dataColumn[headersObj[item.name]], item));\n}\n","import { DataFormat } from './enums';\n\nexport default {\n    dataFormat: DataFormat.AUTO\n};\n","import { columnMajor } from '../utils';\n\n/**\n * Parses and converts data formatted in DSV array to a manageable internal format.\n *\n * @param {Array.<Array>} arr - A 2D array containing of the DSV data.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv data is header or not.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    [\"a\", \"b\", \"c\"],\n *    [1, 2, 3],\n *    [4, 5, 6],\n *    [7, 8, 9]\n * ];\n */\nfunction DSVArr (arr, options) {\n    const defaultOption = {\n        firstRowHeader: true,\n    };\n    options = Object.assign({}, defaultOption, options);\n\n    let header;\n    const columns = [];\n    const push = columnMajor(columns);\n\n    if (options.firstRowHeader) {\n        // If header present then mutate the array.\n        // Do in-place mutation to save space.\n        header = arr.splice(0, 1)[0];\n    } else {\n        header = [];\n    }\n\n    arr.forEach(field => push(...field));\n\n    return [header, columns];\n}\n\nexport default DSVArr;\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","import { dsvFormat as d3Dsv } from 'd3-dsv';\nimport DSVArr from './dsv-arr';\n\n/**\n * Parses and converts data formatted in DSV string to a manageable internal format.\n *\n * @todo Support to be given for https://tools.ietf.org/html/rfc4180.\n * @todo Sample implementation https://github.com/knrz/CSV.js/.\n *\n * @param {string} str - The input DSV string.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv string data is header or not.\n * @param {string} [options.fieldSeparator=\",\"] - The separator of two consecutive field.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = `\n * a,b,c\n * 1,2,3\n * 4,5,6\n * 7,8,9\n * `\n */\nfunction DSVStr (str, options) {\n    const defaultOption = {\n        firstRowHeader: true,\n        fieldSeparator: ','\n    };\n    options = Object.assign({}, defaultOption, options);\n\n    const dsv = d3Dsv(options.fieldSeparator);\n    return DSVArr(dsv.parseRows(str), options);\n}\n\nexport default DSVStr;\n","import { columnMajor } from '../utils';\n\n/**\n * Parses and converts data formatted in JSON to a manageable internal format.\n *\n * @param {Array.<Object>} arr - The input data formatted in JSON.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    {\n *      \"a\": 1,\n *      \"b\": 2,\n *      \"c\": 3\n *    },\n *    {\n *      \"a\": 4,\n *      \"b\": 5,\n *      \"c\": 6\n *    },\n *    {\n *      \"a\": 7,\n *      \"b\": 8,\n *      \"c\": 9\n *    }\n * ];\n */\nfunction FlatJSON (arr) {\n    const header = {};\n    let i = 0;\n    let insertionIndex;\n    const columns = [];\n    const push = columnMajor(columns);\n\n    arr.forEach((item) => {\n        const fields = [];\n        for (let key in item) {\n            if (key in header) {\n                insertionIndex = header[key];\n            } else {\n                header[key] = i++;\n                insertionIndex = i - 1;\n            }\n            fields[insertionIndex] = item[key];\n        }\n        push(...fields);\n    });\n\n    return [Object.keys(header), columns];\n}\n\nexport default FlatJSON;\n","import FlatJSON from './flat-json';\nimport DSVArr from './dsv-arr';\nimport DSVStr from './dsv-str';\nimport { detectDataFormat } from '../utils';\n\n/**\n * Parses the input data and detect the format automatically.\n *\n * @param {string|Array} data - The input data.\n * @param {Object} options - An optional config specific to data format.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n */\nfunction Auto (data, options) {\n    const converters = { FlatJSON, DSVStr, DSVArr };\n    const dataFormat = detectDataFormat(data);\n\n    if (!dataFormat) {\n        throw new Error('Couldn\\'t detect the data format');\n    }\n\n    return converters[dataFormat](data, options);\n}\n\nexport default Auto;\n","import { FieldType, FilteringMode, DimensionSubtype, MeasureSubtype, DataFormat } from './enums';\nimport fieldStore from './field-store';\nimport Value from './value';\nimport {\n    rowDiffsetIterator\n} from './operator';\nimport { DM_DERIVATIVES, LOGICAL_OPERATORS } from './constants';\nimport { createFields, createUnitFieldFromPartial } from './field-creator';\nimport defaultConfig from './default-config';\nimport * as converter from './converter';\nimport { extend2, detectDataFormat } from './utils';\n\n/**\n * Prepares the selection data.\n */\nfunction prepareSelectionData (fields, i) {\n    const resp = {};\n    for (let field of fields) {\n        resp[field.name()] = new Value(field.partialField.data[i], field);\n    }\n    return resp;\n}\n\nexport function prepareJoinData (fields) {\n    const resp = {};\n    Object.keys(fields).forEach((key) => { resp[key] = new Value(fields[key], key); });\n    return resp;\n}\n\nexport const updateFields = ([rowDiffset, colIdentifier], partialFieldspace, fieldStoreName) => {\n    let collID = colIdentifier.length ? colIdentifier.split(',') : [];\n    let partialFieldMap = partialFieldspace.fieldsObj();\n    let newFields = collID.map(coll => createUnitFieldFromPartial(partialFieldMap[coll].partialField, rowDiffset));\n    return fieldStore.createNamespace(newFields, fieldStoreName);\n};\n\nexport const persistCurrentDerivation = (model, operation, config = {}, criteriaFn) => {\n    if (operation === DM_DERIVATIVES.COMPOSE) {\n        model._derivation.length = 0;\n        model._derivation.push(...criteriaFn);\n    } else {\n        model._derivation.push({\n            op: operation,\n            meta: config,\n            criteria: criteriaFn\n        });\n    }\n};\nexport const persistAncestorDerivation = (sourceDm, newDm) => {\n    newDm._ancestorDerivation.push(...sourceDm._ancestorDerivation, ...sourceDm._derivation);\n};\n\nexport const persistDerivations = (sourceDm, model, operation, config = {}, criteriaFn) => {\n    persistCurrentDerivation(model, operation, config, criteriaFn);\n    persistAncestorDerivation(sourceDm, model);\n};\n\nconst selectModeMap = {\n    [FilteringMode.NORMAL]: {\n        diffIndex: ['rowDiffset'],\n        calcDiff: [true, false]\n    },\n    [FilteringMode.INVERSE]: {\n        diffIndex: ['rejectRowDiffset'],\n        calcDiff: [false, true]\n    },\n    [FilteringMode.ALL]: {\n        diffIndex: ['rowDiffset', 'rejectRowDiffset'],\n        calcDiff: [true, true]\n    }\n};\n\nconst generateRowDiffset = (rowDiffset, i, lastInsertedValue) => {\n    if (lastInsertedValue !== -1 && i === (lastInsertedValue + 1)) {\n        const li = rowDiffset.length - 1;\n\n        rowDiffset[li] = `${rowDiffset[li].split('-')[0]}-${i}`;\n    } else {\n        rowDiffset.push(`${i}`);\n    }\n};\n\nexport const selectRowDiffsetIterator = (rowDiffset, checker, mode) => {\n    let lastInsertedValueSel = -1;\n    let lastInsertedValueRej = -1;\n    const newRowDiffSet = [];\n    const rejRowDiffSet = [];\n\n    const [shouldSelect, shouldReject] = selectModeMap[mode].calcDiff;\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const checkerResult = checker(i);\n        checkerResult && shouldSelect && generateRowDiffset(newRowDiffSet, i, lastInsertedValueSel);\n        !checkerResult && shouldReject && generateRowDiffset(rejRowDiffSet, i, lastInsertedValueRej);\n    });\n    return {\n        rowDiffset: newRowDiffSet.join(','),\n        rejectRowDiffset: rejRowDiffSet.join(',')\n    };\n};\n\n\nexport const rowSplitDiffsetIterator = (rowDiffset, checker, mode, dimensionArr, fieldStoreObj) => {\n    let lastInsertedValue = {};\n    const splitRowDiffset = {};\n    const dimensionMap = {};\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        if (checker(i)) {\n            let hash = '';\n\n            let dimensionSet = { keys: {} };\n\n            dimensionArr.forEach((_) => {\n                const data = fieldStoreObj[_].partialField.data[i];\n                hash = `${hash}-${data}`;\n                dimensionSet.keys[_] = data;\n            });\n\n            if (splitRowDiffset[hash] === undefined) {\n                splitRowDiffset[hash] = [];\n                lastInsertedValue[hash] = -1;\n                dimensionMap[hash] = dimensionSet;\n            }\n\n            generateRowDiffset(splitRowDiffset[hash], i, lastInsertedValue[hash]);\n            lastInsertedValue[hash] = i;\n        }\n    });\n\n    return {\n        splitRowDiffset,\n        dimensionMap\n    };\n};\n\n\nexport const selectHelper = (clonedDm, selectFn, config, sourceDm, iterator) => {\n    let cachedStore = {};\n    let cloneProvider = () => sourceDm.detachedRoot();\n    const { mode } = config;\n    const rowDiffset = clonedDm._rowDiffset;\n    const fields = clonedDm.getPartialFieldspace().fields;\n    const selectorHelperFn = index => selectFn(\n        prepareSelectionData(fields, index),\n        index,\n        cloneProvider,\n        cachedStore\n    );\n\n    return iterator(rowDiffset, selectorHelperFn, mode);\n};\n\nexport const cloneWithAllFields = (model) => {\n    const clonedDm = model.clone(false);\n    const partialFieldspace = model.getPartialFieldspace();\n    clonedDm._colIdentifier = partialFieldspace.fields.map(f => f.name()).join(',');\n\n    // flush out cached namespace values on addition of new fields\n    partialFieldspace._cachedFieldsObj = null;\n    partialFieldspace._cachedDimension = null;\n    partialFieldspace._cachedMeasure = null;\n    clonedDm.__calculateFieldspace().calculateFieldsConfig();\n\n    return clonedDm;\n};\n\nconst getKey = (arr, data, fn) => {\n    let key = fn(arr, data, 0);\n\n    for (let i = 1, len = arr.length; i < len; i++) {\n        key = `${key},${fn(arr, data, i)}`;\n    }\n    return key;\n};\n\nexport const filterPropagationModel = (model, propModels, config = {}) => {\n    let fns = [];\n    const operation = config.operation || LOGICAL_OPERATORS.AND;\n    const filterByMeasure = config.filterByMeasure || false;\n    const clonedModel = cloneWithAllFields(model);\n    const modelFieldsConfig = clonedModel.getFieldsConfig();\n\n    if (!propModels.length) {\n        fns = [() => false];\n    } else {\n        fns = propModels.map(propModel => ((dataModel) => {\n            let keyFn;\n            const dataObj = dataModel.getData();\n            const fieldsConfig = dataModel.getFieldsConfig();\n            const dimensions = Object.keys(dataModel.getFieldspace().getDimension())\n                .filter(d => d in modelFieldsConfig);\n            const dLen = dimensions.length;\n            const indices = dimensions.map(d =>\n                fieldsConfig[d].index);\n            const measures = Object.keys(dataModel.getFieldspace().getMeasure())\n                .filter(d => d in modelFieldsConfig);\n            const fieldsSpace = dataModel.getFieldspace().fieldsObj();\n            const data = dataObj.data;\n            const domain = measures.reduce((acc, v) => {\n                acc[v] = fieldsSpace[v].domain();\n                return acc;\n            }, {});\n            const valuesMap = {};\n\n            keyFn = (arr, row, idx) => row[arr[idx]];\n            if (dLen) {\n                data.forEach((row) => {\n                    const key = getKey(indices, row, keyFn);\n                    valuesMap[key] = 1;\n                });\n            }\n\n            keyFn = (arr, fields, idx) => fields[arr[idx]].value;\n            return data.length ? (fields) => {\n                const present = dLen ? valuesMap[getKey(dimensions, fields, keyFn)] : true;\n\n                if (filterByMeasure) {\n                    return measures.every(field => fields[field].value >= domain[field][0] &&\n                        fields[field].value <= domain[field][1]) && present;\n                }\n                return present;\n            } : () => false;\n        })(propModel));\n    }\n\n    let filteredModel;\n    if (operation === LOGICAL_OPERATORS.AND) {\n        filteredModel = clonedModel.select(fields => fns.every(fn => fn(fields)), {\n            saveChild: false\n        });\n    } else {\n        filteredModel = clonedModel.select(fields => fns.some(fn => fn(fields)), {\n            saveChild: false\n        });\n    }\n\n    return filteredModel;\n};\n\n\nexport const splitWithSelect = (sourceDm, dimensionArr, reducerFn = val => val, config) => {\n    const {\n        saveChild,\n    } = config;\n    const fieldStoreObj = sourceDm.getFieldspace().fieldsObj();\n\n    const {\n        splitRowDiffset,\n        dimensionMap\n    } = selectHelper(\n        sourceDm.clone(saveChild),\n        reducerFn,\n        config,\n        sourceDm,\n        (...params) => rowSplitDiffsetIterator(...params, dimensionArr, fieldStoreObj)\n        );\n\n    const clonedDMs = [];\n    Object.keys(splitRowDiffset).forEach((e) => {\n        if (splitRowDiffset[e]) {\n            const cloned = sourceDm.clone(saveChild);\n            const derivation = dimensionMap[e];\n            cloned._rowDiffset = splitRowDiffset[e].join(',');\n            cloned.__calculateFieldspace().calculateFieldsConfig();\n\n            const derivationFormula = fields => dimensionArr.every(_ => fields[_].value === derivation.keys[_]);\n            // Store reference to child model and selector function\n            if (saveChild) {\n                persistDerivations(sourceDm, cloned, DM_DERIVATIVES.SELECT, config, derivationFormula);\n            }\n            cloned._derivation[cloned._derivation.length - 1].meta = dimensionMap[e];\n\n            clonedDMs.push(cloned);\n        }\n    });\n\n\n    return clonedDMs;\n};\nexport const addDiffsetToClonedDm = (clonedDm, rowDiffset, sourceDm, selectConfig, selectFn) => {\n    clonedDm._rowDiffset = rowDiffset;\n    clonedDm.__calculateFieldspace().calculateFieldsConfig();\n    persistDerivations(\n        sourceDm,\n        clonedDm,\n        DM_DERIVATIVES.SELECT,\n         { config: selectConfig },\n          selectFn\n    );\n};\n\n\nexport const cloneWithSelect = (sourceDm, selectFn, selectConfig, cloneConfig) => {\n    let extraCloneDm = {};\n\n    let { mode } = selectConfig;\n\n    const cloned = sourceDm.clone(cloneConfig.saveChild);\n    const setOfRowDiffsets = selectHelper(\n        cloned,\n        selectFn,\n        selectConfig,\n        sourceDm,\n        selectRowDiffsetIterator\n    );\n    const diffIndex = selectModeMap[mode].diffIndex;\n\n    addDiffsetToClonedDm(cloned, setOfRowDiffsets[diffIndex[0]], sourceDm, selectConfig, selectFn);\n\n    if (diffIndex.length > 1) {\n        extraCloneDm = sourceDm.clone(cloneConfig.saveChild);\n        addDiffsetToClonedDm(extraCloneDm, setOfRowDiffsets[diffIndex[1]], sourceDm, selectConfig, selectFn);\n        return [cloned, extraCloneDm];\n    }\n\n    return cloned;\n};\n\nexport const cloneWithProject = (sourceDm, projField, config, allFields) => {\n    const cloned = sourceDm.clone(config.saveChild);\n    let projectionSet = projField;\n    if (config.mode === FilteringMode.INVERSE) {\n        projectionSet = allFields.filter(fieldName => projField.indexOf(fieldName) === -1);\n    }\n    // cloned._colIdentifier = sourceDm._colIdentifier.split(',')\n    //                         .filter(coll => projectionSet.indexOf(coll) !== -1).join();\n    cloned._colIdentifier = projectionSet.join(',');\n    cloned.__calculateFieldspace().calculateFieldsConfig();\n\n    persistDerivations(\n        sourceDm,\n        cloned,\n        DM_DERIVATIVES.PROJECT,\n        { projField, config, actualProjField: projectionSet },\n        null\n    );\n\n    return cloned;\n};\n\n\nexport const splitWithProject = (sourceDm, projFieldSet, config, allFields) =>\n    projFieldSet.map(projFields =>\n        cloneWithProject(sourceDm, projFields, config, allFields));\n\nexport const sanitizeUnitSchema = (unitSchema) => {\n    // Do deep clone of the unit schema as the user might change it later.\n    unitSchema = extend2({}, unitSchema);\n    if (!unitSchema.type) {\n        unitSchema.type = FieldType.DIMENSION;\n    }\n\n    if (!unitSchema.subtype) {\n        switch (unitSchema.type) {\n        case FieldType.MEASURE:\n            unitSchema.subtype = MeasureSubtype.CONTINUOUS;\n            break;\n        default:\n        case FieldType.DIMENSION:\n            unitSchema.subtype = DimensionSubtype.CATEGORICAL;\n            break;\n        }\n    }\n\n    return unitSchema;\n};\n\nexport const validateUnitSchema = (unitSchema) => {\n    const supportedMeasureSubTypes = [MeasureSubtype.CONTINUOUS];\n    const supportedDimSubTypes = [\n        DimensionSubtype.CATEGORICAL,\n        DimensionSubtype.BINNED,\n        DimensionSubtype.TEMPORAL,\n        DimensionSubtype.GEO\n    ];\n    const { type, subtype, name } = unitSchema;\n\n    switch (type) {\n    case FieldType.DIMENSION:\n        if (supportedDimSubTypes.indexOf(subtype) === -1) {\n            throw new Error(`DataModel doesn't support dimension field subtype ${subtype} used for ${name} field`);\n        }\n        break;\n    case FieldType.MEASURE:\n        if (supportedMeasureSubTypes.indexOf(subtype) === -1) {\n            throw new Error(`DataModel doesn't support measure field subtype ${subtype} used for ${name} field`);\n        }\n        break;\n    default:\n        throw new Error(`DataModel doesn't support field type ${type} used for ${name} field`);\n    }\n};\n\nexport const sanitizeAndValidateSchema = schema => schema.map((unitSchema) => {\n    unitSchema = sanitizeUnitSchema(unitSchema);\n    validateUnitSchema(unitSchema);\n    return unitSchema;\n});\n\nexport const resolveFieldName = (schema, dataHeader) => {\n    schema.forEach((unitSchema) => {\n        const fieldNameAs = unitSchema.as;\n        if (!fieldNameAs) { return; }\n\n        const idx = dataHeader.indexOf(unitSchema.name);\n        dataHeader[idx] = fieldNameAs;\n        unitSchema.name = fieldNameAs;\n        delete unitSchema.as;\n    });\n};\n\nexport const updateData = (relation, data, schema, options) => {\n    schema = sanitizeAndValidateSchema(schema);\n    options = Object.assign(Object.assign({}, defaultConfig), options);\n    const converterFn = converter[options.dataFormat];\n\n    if (!(converterFn && typeof converterFn === 'function')) {\n        throw new Error(`No converter function found for ${options.dataFormat} format`);\n    }\n\n    const [header, formattedData] = converterFn(data, options);\n    resolveFieldName(schema, header);\n    const fieldArr = createFields(formattedData, schema, header);\n\n    // This will create a new fieldStore with the fields\n    const nameSpace = fieldStore.createNamespace(fieldArr, options.name);\n    relation._partialFieldspace = nameSpace;\n\n    // If data is provided create the default colIdentifier and rowDiffset\n    relation._rowDiffset = formattedData.length && formattedData[0].length ? `0-${formattedData[0].length - 1}` : '';\n\n    // This stores the value objects which is passed to the filter method when selection operation is done.\n    const valueObjects = [];\n    rowDiffsetIterator(relation._rowDiffset, (i) => {\n        valueObjects[i] = prepareSelectionData(nameSpace.fields, i);\n    });\n    nameSpace._cachedValueObjects = valueObjects;\n\n    relation._colIdentifier = (schema.map(_ => _.name)).join();\n    relation._dataFormat = options.dataFormat === DataFormat.AUTO ? detectDataFormat(data) : options.dataFormat;\n    return relation;\n};\n\nexport const fieldInSchema = (schema, field) => {\n    let i = 0;\n\n    for (; i < schema.length; ++i) {\n        if (field === schema[i].name) {\n            return {\n                name: field,\n                type: schema[i].subtype || schema[i].type,\n                index: i,\n            };\n        }\n    }\n    return null;\n};\n\nexport const getDerivationArguments = (derivation) => {\n    let params = [];\n    let operation;\n    operation = derivation.op;\n    switch (operation) {\n    case DM_DERIVATIVES.SELECT:\n        params = [derivation.criteria];\n        break;\n    case DM_DERIVATIVES.PROJECT:\n        params = [derivation.meta.actualProjField];\n        break;\n    case DM_DERIVATIVES.GROUPBY:\n        operation = 'groupBy';\n        params = [derivation.meta.groupByString.split(','), derivation.criteria];\n        break;\n    default:\n        operation = null;\n    }\n\n    return {\n        operation,\n        params\n    };\n};\n\nconst applyExistingOperationOnModel = (propModel, dataModel) => {\n    const derivations = dataModel.getDerivations();\n    let selectionModel = propModel;\n\n    derivations.forEach((derivation) => {\n        if (!derivation) {\n            return;\n        }\n\n        const { operation, params } = getDerivationArguments(derivation);\n        if (operation) {\n            selectionModel = selectionModel[operation](...params, {\n                saveChild: false\n            });\n        }\n    });\n\n    return selectionModel;\n};\n\nconst getFilteredModel = (propModel, path) => {\n    for (let i = 0, len = path.length; i < len; i++) {\n        const model = path[i];\n        propModel = applyExistingOperationOnModel(propModel, model);\n    }\n    return propModel;\n};\n\nconst propagateIdentifiers = (dataModel, propModel, config = {}, propModelInf = {}) => {\n    const nonTraversingModel = propModelInf.nonTraversingModel;\n    const excludeModels = propModelInf.excludeModels || [];\n\n    if (dataModel === nonTraversingModel) {\n        return;\n    }\n\n    const propagate = excludeModels.length ? excludeModels.indexOf(dataModel) === -1 : true;\n\n    propagate && dataModel.handlePropagation(propModel, config);\n\n    const children = dataModel._children;\n    children.forEach((child) => {\n        const selectionModel = applyExistingOperationOnModel(propModel, child);\n        propagateIdentifiers(child, selectionModel, config, propModelInf);\n    });\n};\n\nexport const getRootGroupByModel = (model) => {\n    while (model._parent && model._derivation.find(d => d.op !== DM_DERIVATIVES.GROUPBY)) {\n        model = model._parent;\n    }\n    return model;\n};\n\nexport const getRootDataModel = (model) => {\n    while (model._parent) {\n        model = model._parent;\n    }\n    return model;\n};\n\nexport const getPathToRootModel = (model, path = []) => {\n    while (model._parent) {\n        path.push(model);\n        model = model._parent;\n    }\n    return path;\n};\n\nexport const propagateToAllDataModels = (identifiers, rootModels, propagationInf, config) => {\n    let criteria;\n    let propModel;\n    const { propagationNameSpace, propagateToSource } = propagationInf;\n    const propagationSourceId = propagationInf.sourceId;\n    const propagateInterpolatedValues = config.propagateInterpolatedValues;\n    const filterFn = (entry) => {\n        const filter = config.filterFn || (() => true);\n        return filter(entry, config);\n    };\n\n    let criterias = [];\n\n    if (identifiers === null && config.persistent !== true) {\n        criterias = [{\n            criteria: []\n        }];\n        criteria = [];\n    } else {\n        let actionCriterias = Object.values(propagationNameSpace.mutableActions);\n        if (propagateToSource !== false) {\n            actionCriterias = actionCriterias.filter(d => d.config.sourceId !== propagationSourceId);\n        }\n\n        const filteredCriteria = actionCriterias.filter(filterFn).map(action => action.config.criteria);\n\n        const excludeModels = [];\n\n        if (propagateToSource !== false) {\n            const sourceActionCriterias = Object.values(propagationNameSpace.mutableActions);\n\n            sourceActionCriterias.forEach((actionInf) => {\n                const actionConf = actionInf.config;\n                if (actionConf.applyOnSource === false && actionConf.action === config.action &&\n                        actionConf.sourceId !== propagationSourceId) {\n                    excludeModels.push(actionInf.model);\n                    criteria = sourceActionCriterias.filter(d => d !== actionInf).map(d => d.config.criteria);\n                    criteria.length && criterias.push({\n                        criteria,\n                        models: actionInf.model,\n                        path: getPathToRootModel(actionInf.model)\n                    });\n                }\n            });\n        }\n\n\n        criteria = [].concat(...[...filteredCriteria, identifiers]).filter(d => d !== null);\n        criterias.push({\n            criteria,\n            excludeModels: [...excludeModels, ...config.excludeModels || []]\n        });\n    }\n\n    const rootModel = rootModels.model;\n\n    const propConfig = Object.assign({\n        sourceIdentifiers: identifiers,\n        propagationSourceId\n    }, config);\n\n    const rootGroupByModel = rootModels.groupByModel;\n    if (propagateInterpolatedValues && rootGroupByModel) {\n        propModel = filterPropagationModel(rootGroupByModel, criteria, {\n            filterByMeasure: propagateInterpolatedValues\n        });\n        propagateIdentifiers(rootGroupByModel, propModel, propConfig);\n    }\n\n    criterias.forEach((inf) => {\n        const propagationModel = filterPropagationModel(rootModel, inf.criteria);\n        const path = inf.path;\n\n        if (path) {\n            const filteredModel = getFilteredModel(propagationModel, path.reverse());\n            inf.models.handlePropagation(filteredModel, propConfig);\n        } else {\n            propagateIdentifiers(rootModel, propagationModel, propConfig, {\n                excludeModels: inf.excludeModels,\n                nonTraversingModel: propagateInterpolatedValues && rootGroupByModel\n            });\n        }\n    });\n};\n\nexport const propagateImmutableActions = (propagationNameSpace, rootModels, propagationInf) => {\n    const immutableActions = propagationNameSpace.immutableActions;\n\n    for (const action in immutableActions) {\n        const actionInf = immutableActions[action];\n        const actionConf = actionInf.config;\n        const propagationSourceId = propagationInf.config.sourceId;\n        const filterImmutableAction = propagationInf.propConfig.filterImmutableAction ?\n            propagationInf.propConfig.filterImmutableAction(actionConf, propagationInf.config) : true;\n        if (actionConf.sourceId !== propagationSourceId && filterImmutableAction) {\n            const criteriaModel = actionConf.criteria;\n            propagateToAllDataModels(criteriaModel, rootModels, {\n                propagationNameSpace,\n                propagateToSource: false,\n                sourceId: propagationSourceId\n            }, actionConf);\n        }\n    }\n};\n\nexport const addToPropNamespace = (propagationNameSpace, config = {}, model) => {\n    let sourceNamespace;\n    const isMutableAction = config.isMutableAction;\n    const criteria = config.criteria;\n    const key = `${config.action}-${config.sourceId}`;\n\n    if (isMutableAction) {\n        sourceNamespace = propagationNameSpace.mutableActions;\n    } else {\n        sourceNamespace = propagationNameSpace.immutableActions;\n    }\n\n    if (criteria === null) {\n        delete sourceNamespace[key];\n    } else {\n        sourceNamespace[key] = {\n            model,\n            config\n        };\n    }\n\n    return this;\n};\n\n\nexport const getNormalizedProFields = (projField, allFields, fieldConfig) => {\n    const normalizedProjField = projField.reduce((acc, field) => {\n        if (field.constructor.name === 'RegExp') {\n            acc.push(...allFields.filter(fieldName => fieldName.search(field) !== -1));\n        } else if (field in fieldConfig) {\n            acc.push(field);\n        }\n        return acc;\n    }, []);\n    return Array.from(new Set(normalizedProjField)).map(field => field.trim());\n};\n","import { FilteringMode } from './enums';\nimport { getUniqueId } from './utils';\nimport {\n    updateFields,\n    cloneWithSelect,\n    cloneWithProject,\n    updateData,\n    getNormalizedProFields\n} from './helper';\nimport { crossProduct, difference, naturalJoinFilter, union } from './operator';\n\n/**\n * Relation provides the definitions of basic operators of relational algebra like *selection*, *projection*, *union*,\n * *difference* etc.\n *\n * It is extended by {@link DataModel} to inherit the functionalities of relational algebra concept.\n *\n * @class\n * @public\n * @module Relation\n * @namespace DataModel\n */\nclass Relation {\n\n    /**\n     * Creates a new Relation instance by providing underlying data and schema.\n     *\n     * @private\n     *\n     * @param {Object | string | Relation} data - The input tabular data in dsv or json format or\n     * an existing Relation instance object.\n     * @param {Array} schema - An array of data schema.\n     * @param {Object} [options] - The optional options.\n     */\n    constructor (...params) {\n        let source;\n\n        this._parent = null;\n        this._derivation = [];\n        this._ancestorDerivation = [];\n        this._children = [];\n\n        if (params.length === 1 && ((source = params[0]) instanceof Relation)) {\n            // parent datamodel was passed as part of source\n            this._colIdentifier = source._colIdentifier;\n            this._rowDiffset = source._rowDiffset;\n            this._dataFormat = source._dataFormat;\n            this._parent = source;\n            this._partialFieldspace = this._parent._partialFieldspace;\n            this._fieldStoreName = getUniqueId();\n            this.__calculateFieldspace().calculateFieldsConfig();\n        } else {\n            updateData(this, ...params);\n            this._fieldStoreName = this._partialFieldspace.name;\n            this.__calculateFieldspace().calculateFieldsConfig();\n            this._propagationNameSpace = {\n                mutableActions: {},\n                immutableActions: {}\n            };\n        }\n    }\n\n    /**\n     * Retrieves the {@link Schema | schema} details for every {@link Field | field} as an array.\n     *\n     * @public\n     *\n     * @return {Array.<Schema>} Array of fields schema.\n     *      ```\n     *      [\n     *          { name: 'Name', type: 'dimension' },\n     *          { name: 'Miles_per_Gallon', type: 'measure', numberFormat: (val) => `${val} miles / gallon` },\n     *          { name: 'Cylinder', type: 'dimension' },\n     *          { name: 'Displacement', type: 'measure', defAggFn: 'max' },\n     *          { name: 'HorsePower', type: 'measure', defAggFn: 'max' },\n     *          { name: 'Weight_in_lbs', type: 'measure', defAggFn: 'avg',  },\n     *          { name: 'Acceleration', type: 'measure', defAggFn: 'avg' },\n     *          { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *          { name: 'Origin' }\n     *      ]\n     *      ```\n     */\n    getSchema () {\n        return this.getFieldspace().fields.map(d => d.schema());\n    }\n\n    /**\n     * Returns the name of the {@link DataModel} instance. If no name was specified during {@link DataModel}\n     * initialization, then it returns a auto-generated name.\n     *\n     * @public\n     *\n     * @return {string} Name of the DataModel instance.\n     */\n    getName() {\n        return this._fieldStoreName;\n    }\n\n    getFieldspace () {\n        return this._fieldspace;\n    }\n\n    __calculateFieldspace () {\n        this._fieldspace = updateFields([this._rowDiffset, this._colIdentifier],\n             this.getPartialFieldspace(), this._fieldStoreName);\n        return this;\n    }\n\n    getPartialFieldspace () {\n        return this._partialFieldspace;\n    }\n\n    /**\n     * Performs {@link link_of_cross_product | cross-product} between two {@link DataModel} instances and returns a\n     * new {@link DataModel} instance containing the results. This operation is also called theta join.\n     *\n     * Cross product takes two set and create one set where each value of one set is paired with each value of another\n     * set.\n     *\n     * This method takes an optional predicate which filters the generated result rows. If the predicate returns true\n     * the combined row is included in the resulatant table.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.join(originDM)));\n     *\n     *  console.log(carsDM.join(originDM,\n     *      obj => obj.[originDM.getName()].Origin === obj.[carsDM.getName()].Origin));\n     *\n     * @text\n     * This is chained version of `join` operator. `join` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel to be joined with the current instance DataModel.\n     * @param {SelectionPredicate} filterFn - The predicate function that will filter the result of the crossProduct.\n     *\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    join (joinWith, filterFn) {\n        return crossProduct(this, joinWith, filterFn);\n    }\n\n    /**\n     * {@link natural_join | Natural join} is a special kind of cross-product join where filtering of rows are performed\n     * internally by resolving common fields are from both table and the rows with common value are included.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.naturalJoin(originDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel with which the current instance of DataModel on which the method is\n     *      called will be joined.\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    naturalJoin (joinWith) {\n        return crossProduct(this, joinWith, naturalJoinFilter(this, joinWith), true);\n    }\n\n    /**\n     * {@link link_to_union | Union} operation can be termed as vertical stacking of all rows from both the DataModel\n     * instances, provided that both of the {@link DataModel} instances should have same column names.\n     *\n     * @example\n     * console.log(EuropeanMakerDM.union(USAMakerDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} unionWith - DataModel instance for which union has to be applied with the instance on which\n     *      the method is called\n     *\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    union (unionWith) {\n        return union(this, unionWith);\n    }\n\n    /**\n     * {@link link_to_difference | Difference } operation only include rows which are present in the datamodel on which\n     * it was called but not on the one passed as argument.\n     *\n     * @example\n     * console.log(highPowerDM.difference(highExpensiveDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} differenceWith - DataModel instance for which difference has to be applied with the instance\n     *      on which the method is called\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    difference (differenceWith) {\n        return difference(this, differenceWith);\n    }\n\n    /**\n     * {@link link_to_selection | Selection} is a row filtering operation. It expects a predicate and an optional mode\n     * which control which all rows should be included in the resultant DataModel instance.\n     *\n     * {@link SelectionPredicate} is a function which returns a boolean value. For selection operation the selection\n     * function is called for each row of DataModel instance with the current row passed as argument.\n     *\n     * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n     * of rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resultant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  // with selection mode NORMAL:\n     *  const normDt = dt.select(fields => fields.Origin.value === \"USA\")\n     *  console.log(normDt));\n     *\n     * // with selection mode INVERSE:\n     * const inverDt = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.INVERSE })\n     * console.log(inverDt);\n     *\n     * // with selection mode ALL:\n     * const dtArr = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.ALL })\n     * // print the selected parts\n     * console.log(dtArr[0]);\n     * // print the inverted parts\n     * console.log(dtArr[1]);\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Function} selectFn - The predicate function which is called for each row with the current row.\n     * ```\n     *  function (row, i, cloneProvider, store)  { ... }\n     * ```\n     * @param {Object} config - The configuration object to control the inclusion exclusion of a row in resultant\n     * DataModel instance.\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection.\n     * @return {DataModel} Returns the new DataModel instance(s) after operation.\n     */\n    select (selectFn, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n        config.mode = config.mode || defConfig.mode;\n\n        const cloneConfig = { saveChild: config.saveChild };\n        return cloneWithSelect(\n            this,\n            selectFn,\n            config,\n            cloneConfig\n        );\n    }\n\n    /**\n     * Retrieves a boolean value if the current {@link DataModel} instance has data.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'CarName', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     * const data = [];\n     *\n     * const dt = new DataModel(data, schema);\n     * console.log(dt.isEmpty());\n     *\n     * @public\n     *\n     * @return {Boolean} True if the datamodel has no data, otherwise false.\n     */\n    isEmpty () {\n        return !this._rowDiffset.length || !this._colIdentifier.length;\n    }\n\n    /**\n     * Creates a clone from the current DataModel instance with child parent relationship.\n     *\n     * @private\n     * @param {boolean} [saveChild=true] - Whether the cloned instance would be recorded in the parent instance.\n     * @return {DataModel} - Returns the newly cloned DataModel instance.\n     */\n    clone (saveChild = true) {\n        const clonedDm = new this.constructor(this);\n        if (saveChild) {\n            clonedDm.setParent(this);\n        } else {\n            clonedDm.setParent(null);\n        }\n        return clonedDm;\n    }\n\n    /**\n     * {@link Projection} is filter column (field) operation. It expects list of fields' name and either include those\n     * or exclude those based on {@link FilteringMode} on the resultant variable.\n     *\n     * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n     * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resulatant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *\n     *  // with projection mode NORMAL:\n     *  const normDt = dt.project([\"Name\", \"HorsePower\"]);\n     *  console.log(normDt.getData());\n     *\n     *  // with projection mode INVERSE:\n     *  const inverDt = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.INVERSE })\n     *  console.log(inverDt.getData());\n     *\n     *  // with selection mode ALL:\n     *  const dtArr = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.ALL })\n     *  // print the normal parts\n     *  console.log(dtArr[0].getData());\n     *  // print the inverted parts\n     *  console.log(dtArr[1].getData());\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n     * @param {Object} [config] - An optional config to control the creation of new DataModel\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n     *\n     * @return {DataModel} Returns the new DataModel instance after operation.\n     */\n    project (projField, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n        const fieldConfig = this.getFieldsConfig();\n        const allFields = Object.keys(fieldConfig);\n        const { mode } = config;\n        const normalizedProjField = getNormalizedProFields(projField, allFields, fieldConfig);\n\n        let dataModel;\n\n        if (mode === FilteringMode.ALL) {\n            let projectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.NORMAL,\n                saveChild: config.saveChild\n            }, allFields);\n            let rejectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.INVERSE,\n                saveChild: config.saveChild\n            }, allFields);\n            dataModel = [projectionClone, rejectionClone];\n        } else {\n            let projectionClone = cloneWithProject(this, normalizedProjField, config, allFields);\n            dataModel = projectionClone;\n        }\n\n        return dataModel;\n    }\n\n    getFieldsConfig () {\n        return this._fieldConfig;\n    }\n\n    calculateFieldsConfig () {\n        this._fieldConfig = this._fieldspace.fields.reduce((acc, fieldObj, i) => {\n            acc[fieldObj.name()] = {\n                index: i,\n                def: fieldObj.schema(),\n            };\n            return acc;\n        }, {});\n        return this;\n    }\n\n\n    /**\n     * Frees up the resources associated with the current DataModel instance and breaks all the links instance has in\n     * the DAG.\n     *\n     * @public\n     */\n    dispose () {\n        this._parent && this._parent.removeChild(this);\n        this._parent = null;\n        this._children.forEach((child) => {\n            child._parent = null;\n        });\n        this._children = [];\n    }\n\n    /**\n     * Removes the specified child {@link DataModel} from the child list of the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\")\n     * dt.removeChild(dt2);\n     *\n     * @private\n     *\n     * @param {DataModel} child - Delegates the parent to remove this child.\n     */\n    removeChild (child) {\n        let idx = this._children.findIndex(sibling => sibling === child);\n        idx !== -1 ? this._children.splice(idx, 1) : true;\n    }\n\n    /**\n     * Sets the specified {@link DataModel} as a parent for the current {@link DataModel} instance.\n     *\n     * @param {DataModel} parent - The datamodel instance which will act as parent.\n     */\n    setParent (parent) {\n        this._parent && this._parent.removeChild(this);\n        this._parent = parent;\n        parent && parent._children.push(this);\n    }\n\n    /**\n     * Returns the parent {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const parentDm = dt2.getParent();\n     *\n     * @return {DataModel} Returns the parent DataModel instance.\n     */\n    getParent () {\n        return this._parent;\n    }\n\n    /**\n     * Returns the immediate child {@link DataModel} instances.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const childDm1 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const childDm2 = dt.select(fields => fields.Origin.value === \"Japan\");\n     * const childDm3 = dt.groupBy([\"Origin\"]);\n     *\n     * @return {DataModel[]} Returns the immediate child DataModel instances.\n     */\n    getChildren () {\n        return this._children;\n    }\n\n    /**\n     * Returns the in-between operation meta data while creating the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *   { name: 'Name', type: 'dimension' },\n     *   { name: 'HorsePower', type: 'measure' },\n     *   { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *   { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *   { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *   { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *   { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const dt3 = dt2.groupBy([\"Origin\"]);\n     * const derivations = dt3.getDerivations();\n     *\n     * @return {Any[]} Returns the derivation meta data.\n     */\n    getDerivations () {\n        return this._derivation;\n    }\n\n    /**\n     * Returns the in-between operation meta data happened from root {@link DataModel} to current instance.\n     *\n     * @example\n     * const schema = [\n     *   { name: 'Name', type: 'dimension' },\n     *   { name: 'HorsePower', type: 'measure' },\n     *   { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *   { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *   { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *   { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *   { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const dt3 = dt2.groupBy([\"Origin\"]);\n     * const ancDerivations = dt3.getAncestorDerivations();\n     *\n     * @return {Any[]} Returns the previous derivation meta data.\n     */\n    getAncestorDerivations () {\n        return this._ancestorDerivation;\n    }\n}\n\nexport default Relation;\n","/* eslint-disable default-case */\n\nimport { FieldType, DimensionSubtype, DataFormat, FilteringMode } from './enums';\nimport {\n    persistDerivations,\n    getRootGroupByModel,\n    propagateToAllDataModels,\n    getRootDataModel,\n    propagateImmutableActions,\n    addToPropNamespace,\n    sanitizeUnitSchema,\n    splitWithSelect,\n    splitWithProject,\n    getNormalizedProFields\n} from './helper';\nimport { DM_DERIVATIVES, PROPAGATION } from './constants';\nimport {\n    dataBuilder,\n    rowDiffsetIterator,\n    groupBy\n} from './operator';\nimport { createBinnedFieldData } from './operator/bucket-creator';\nimport Relation from './relation';\nimport reducerStore from './utils/reducer-store';\nimport { createFields } from './field-creator';\nimport InvalidAwareTypes from './invalid-aware-types';\nimport Value from './value';\n\n/**\n * DataModel is an in-browser representation of tabular data. It supports\n * {@link https://en.wikipedia.org/wiki/Relational_algebra | relational algebra} operators as well as generic data\n * processing opearators.\n * DataModel extends {@link Relation} class which defines all the relational algebra opreators. DataModel gives\n * definition of generic data processing operators which are not relational algebra complient.\n *\n * @public\n * @class\n * @extends Relation\n * @memberof Datamodel\n */\nclass DataModel extends Relation {\n    /**\n     * Creates a new DataModel instance by providing data and schema. Data could be in the form of\n     * - Flat JSON\n     * - DSV String\n     * - 2D Array\n     *\n     * By default DataModel finds suitable adapter to serialize the data. DataModel also expects a\n     * {@link Schema | schema} for identifying the variables present in data.\n     *\n     * @constructor\n     * @example\n     * const data = loadData('cars.csv');\n     * const schema = [\n     *      { name: 'Name', type: 'dimension' },\n     *      { name: 'Miles_per_Gallon', type: 'measure', unit : 'cm', scale: '1000', numberformat: val => `${val}G`},\n     *      { name: 'Cylinders', type: 'dimension' },\n     *      { name: 'Displacement', type: 'measure' },\n     *      { name: 'Horsepower', type: 'measure' },\n     *      { name: 'Weight_in_lbs', type: 'measure' },\n     *      { name: 'Acceleration', type: 'measure' },\n     *      { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *      { name: 'Origin', type: 'dimension' }\n     * ];\n     * const dm = new DataModel(data, schema, { name: 'Cars' });\n     * table(dm);\n     *\n     * @public\n     *\n     * @param {Array.<Object> | string | Array.<Array>} data Input data in any of the mentioned formats\n     * @param {Array.<Schema>} schema Defination of the variables. Order of the variables in data and order of the\n     *      variables in schema has to be same.\n     * @param {object} [options] Optional arguments to specify more settings regarding the creation part\n     * @param {string} [options.name] Name of the datamodel instance. If no name is given an auto generated name is\n     *      assigned to the instance.\n     * @param {string} [options.fieldSeparator=','] specify field separator type if the data is of type dsv string.\n     */\n    constructor (...args) {\n        super(...args);\n\n        this._onPropagation = [];\n    }\n\n    /**\n     * Reducers are simple functions which reduces an array of numbers to a representative number of the set.\n     * Like an array of numbers `[10, 20, 5, 15]` can be reduced to `12.5` if average / mean reducer function is\n     * applied. All the measure fields in datamodel (variables in data) needs a reducer to handle aggregation.\n     *\n     * @public\n     *\n     * @return {ReducerStore} Singleton instance of {@link ReducerStore}.\n     */\n    static get Reducers () {\n        return reducerStore;\n    }\n\n    /**\n     * Configure null, undefined, invalid values in the source data\n     *\n     * @public\n     *\n     * @param {Object} [config] - Configuration to control how null, undefined and non-parsable values are\n     * represented in DataModel.\n     * @param {string} [config.undefined] - Define how an undefined value will be represented.\n     * @param {string} [config.null] - Define how a null value will be represented.\n     * @param {string} [config.invalid] - Define how a non-parsable value will be represented.\n     */\n    static configureInvalidAwareTypes (config) {\n        return InvalidAwareTypes.invalidAwareVals(config);\n    }\n\n    /**\n     * Retrieve the data attached to an instance in JSON format.\n     *\n     * @example\n     * // DataModel instance is already prepared and assigned to dm variable\n     *  const data = dm.getData({\n     *      order: 'column',\n     *      formatter: {\n     *          origin: (val) => val === 'European Union' ? 'EU' : val;\n     *      }\n     *  });\n     *  console.log(data);\n     *\n     * @public\n     *\n     * @param {Object} [options] Options to control how the raw data is to be returned.\n     * @param {string} [options.order='row'] Defines if data is retieved in row order or column order. Possible values\n     *      are `'rows'` and `'columns'`\n     * @param {Function} [options.formatter=null] Formats the output data. This expects an object, where the keys are\n     *      the name of the variable needs to be formatted. The formatter function is called for each row passing the\n     *      value of the cell for a particular row as arguments. The formatter is a function in the form of\n     *      `function (value, rowId, schema) => { ... }`\n     *      Know more about {@link Fomatter}.\n     *\n     * @return {Array} Returns a multidimensional array of the data with schema. The return format looks like\n     *      ```\n     *          {\n     *              data,\n     *              schema\n     *          }\n     *      ```\n     */\n    getData (options) {\n        const defOptions = {\n            order: 'row',\n            formatter: null,\n            withUid: false,\n            getAllFields: false,\n            sort: []\n        };\n        options = Object.assign({}, defOptions, options);\n        const fields = this.getPartialFieldspace().fields;\n\n        const dataGenerated = dataBuilder.call(\n            this,\n            this.getPartialFieldspace().fields,\n            this._rowDiffset,\n            options.getAllFields ? fields.map(d => d.name()).join() : this._colIdentifier,\n            options.sort,\n            {\n                columnWise: options.order === 'column',\n                addUid: !!options.withUid\n            }\n        );\n\n        if (!options.formatter) {\n            return dataGenerated;\n        }\n\n        const { formatter } = options;\n        const { data, schema, uids } = dataGenerated;\n        const fieldNames = schema.map((e => e.name));\n        const fmtFieldNames = Object.keys(formatter);\n        const fmtFieldIdx = fmtFieldNames.reduce((acc, next) => {\n            const idx = fieldNames.indexOf(next);\n            if (idx !== -1) {\n                acc.push([idx, formatter[next]]);\n            }\n            return acc;\n        }, []);\n\n        if (options.order === 'column') {\n            fmtFieldIdx.forEach((elem) => {\n                const fIdx = elem[0];\n                const fmtFn = elem[1];\n\n                data[fIdx].forEach((datum, datumIdx) => {\n                    data[fIdx][datumIdx] = fmtFn.call(\n                        undefined,\n                        datum,\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        } else {\n            data.forEach((datum, datumIdx) => {\n                fmtFieldIdx.forEach((elem) => {\n                    const fIdx = elem[0];\n                    const fmtFn = elem[1];\n\n                    datum[fIdx] = fmtFn.call(\n                        undefined,\n                        datum[fIdx],\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        }\n\n        return dataGenerated;\n    }\n\n    /**\n     * Returns the unique ids in an array.\n     *\n     * @return {Array} Returns an array of ids.\n     */\n    getUids () {\n        const rowDiffset = this._rowDiffset;\n        const ids = [];\n\n        if (rowDiffset.length) {\n            const diffSets = rowDiffset.split(',');\n\n            diffSets.forEach((set) => {\n                let [start, end] = set.split('-').map(Number);\n\n                end = end !== undefined ? end : start;\n                ids.push(...Array(end - start + 1).fill().map((_, idx) => start + idx));\n            });\n        }\n\n        return ids;\n    }\n    /**\n     * Groups the data using particular dimensions and by reducing measures. It expects a list of dimensions using which\n     * it projects the datamodel and perform aggregations to reduce the duplicate tuples. Refer this\n     * {@link link_to_one_example_with_group_by | document} to know the intuition behind groupBy.\n     *\n     * DataModel by default provides definition of few {@link reducer | Reducers}.\n     * {@link ReducerStore | User defined reducers} can also be registered.\n     *\n     * This is the chained implementation of `groupBy`.\n     * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n     *\n     * @example\n     * const groupedDM = dm.groupBy(['Year'], { horsepower: 'max' } );\n     * console.log(groupedDm);\n     *\n     * @public\n     *\n     * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n     * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n     *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n     *      schema of the variable.\n     *\n     * @return {DataModel} Returns a new DataModel instance after performing the groupby.\n     */\n    groupBy (fieldsArr, reducers = {}, config = { saveChild: true }) {\n        const groupByString = `${fieldsArr.join()}`;\n        let params = [this, fieldsArr, reducers];\n        const newDataModel = groupBy(...params);\n\n        persistDerivations(\n            this,\n            newDataModel,\n            DM_DERIVATIVES.GROUPBY,\n            { fieldsArr, groupByString, defaultReducer: reducerStore.defaultReducer() },\n            reducers\n        );\n\n        if (config.saveChild) {\n            newDataModel.setParent(this);\n        } else {\n            newDataModel.setParent(null);\n        }\n\n        return newDataModel;\n    }\n\n    /**\n     * Performs sorting operation on the current {@link DataModel} instance according to the specified sorting details.\n     * Like every other operator it doesn't mutate the current DataModel instance on which it was called, instead\n     * returns a new DataModel instance containing the sorted data.\n     *\n     * DataModel support multi level sorting by listing the variables using which sorting needs to be performed and\n     * the type of sorting `ASC` or `DESC`.\n     *\n     * In the following example, data is sorted by `Origin` field in `DESC` order in first level followed by another\n     * level of sorting by `Acceleration` in `ASC` order.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * let sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\"] // Default value is ASC\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * // Sort with a custom sorting function\n     * sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\", (a, b) => a - b] // Custom sorting function\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @text\n     * DataModel also provides another sorting mechanism out of the box where sort is applied to a variable using\n     * another variable which determines the order.\n     * Like the above DataModel contains three fields `Origin`, `Name` and `Acceleration`. Now, the data in this\n     * model can be sorted by `Origin` field according to the average value of all `Acceleration` for a\n     * particular `Origin` value.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * const sortedDm = dm.sort([\n     *     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @public\n     *\n     * @param {Array.<Array>} sortingDetails - Sorting details based on which the sorting will be performed.\n     * @return {DataModel} Returns a new instance of DataModel with sorted data.\n     */\n    sort (sortingDetails, config = { saveChild: false }) {\n        const rawData = this.getData({\n            order: 'row',\n            sort: sortingDetails\n        });\n        const header = rawData.schema.map(field => field.name);\n        const dataInCSVArr = [header].concat(rawData.data);\n\n        const sortedDm = new this.constructor(dataInCSVArr, rawData.schema, { dataFormat: 'DSVArr' });\n\n        persistDerivations(\n            this,\n            sortedDm,\n            DM_DERIVATIVES.SORT,\n            config,\n            sortingDetails\n        );\n\n        if (config.saveChild) {\n            sortedDm.setParent(this);\n        } else {\n            sortedDm.setParent(null);\n        }\n\n        return sortedDm;\n    }\n\n    /**\n     * Performs the serialization operation on the current {@link DataModel} instance according to the specified data\n     * type. When an {@link DataModel} instance is created, it de-serializes the input data into its internal format,\n     * and during its serialization process, it converts its internal data format to the specified data type and returns\n     * that data regardless what type of data is used during the {@link DataModel} initialization.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance.\n     * const csvData = dm.serialize(DataModel.DataFormat.DSV_STR, { fieldSeparator: \",\" });\n     * console.log(csvData); // The csv formatted data.\n     *\n     * const jsonData = dm.serialize(DataModel.DataFormat.FLAT_JSON);\n     * console.log(jsonData); // The json data.\n     *\n     * @public\n     *\n     * @param {string} type - The data type name for serialization.\n     * @param {Object} options - The optional option object.\n     * @param {string} options.fieldSeparator - The field separator character for DSV data type.\n     * @return {Array|string} Returns the serialized data.\n     */\n    serialize (type, options) {\n        type = type || this._dataFormat;\n        options = Object.assign({}, { fieldSeparator: ',' }, options);\n\n        const fields = this.getFieldspace().fields;\n        const colData = fields.map(f => f.formattedData());\n        const rowsCount = colData[0].length;\n        let serializedData;\n        let rowIdx;\n        let colIdx;\n\n        if (type === DataFormat.FLAT_JSON) {\n            serializedData = [];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = {};\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row[fields[colIdx].name()] = colData[colIdx][rowIdx];\n                }\n                serializedData.push(row);\n            }\n        } else if (type === DataFormat.DSV_STR) {\n            serializedData = [fields.map(f => f.name()).join(options.fieldSeparator)];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row.join(options.fieldSeparator));\n            }\n            serializedData = serializedData.join('\\n');\n        } else if (type === DataFormat.DSV_ARR) {\n            serializedData = [fields.map(f => f.name())];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row);\n            }\n        } else {\n            throw new Error(`Data type ${type} is not supported`);\n        }\n\n        return serializedData;\n    }\n\n    addField (field) {\n        const fieldName = field.name();\n        this._colIdentifier += `,${fieldName}`;\n        const partialFieldspace = this._partialFieldspace;\n        const cachedValueObjects = partialFieldspace._cachedValueObjects;\n\n        if (!partialFieldspace.fieldsObj()[field.name()]) {\n            partialFieldspace.fields.push(field);\n            cachedValueObjects.forEach((obj, i) => {\n                obj[field.name()] = new Value(field.partialField.data[i], field);\n            });\n        } else {\n            const fieldIndex = partialFieldspace.fields.findIndex(fieldinst => fieldinst.name() === fieldName);\n            fieldIndex >= 0 && (partialFieldspace.fields[fieldIndex] = field);\n        }\n\n        // flush out cached namespace values on addition of new fields\n        partialFieldspace._cachedFieldsObj = null;\n        partialFieldspace._cachedDimension = null;\n        partialFieldspace._cachedMeasure = null;\n\n        this.__calculateFieldspace().calculateFieldsConfig();\n        return this;\n    }\n\n    /**\n    * Creates a new variable calculated from existing variables. This method expects the definition of the newly created\n    * variable and a function which resolves the value of the new variable from existing variables.\n    *\n    * Can create a new measure based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const newDm = dataModel.calculateVariable({\n    *      name: 'powerToWeight',\n    *      type: 'measure'\n    *  }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n    *\n    *\n    * Can create a new dimension based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const child = dataModel.calculateVariable(\n    *     {\n    *       name: 'Efficiency',\n    *       type: 'dimension'\n    *     }, ['horsepower', (hp) => {\n    *      if (hp < 80) { return 'low'; },\n    *      else if (hp < 120) { return 'moderate'; }\n    *      else { return 'high' }\n    *  }]);\n    *\n    * @public\n    *\n    * @param {Object} schema - The schema of newly defined variable.\n    * @param {Array.<string|function>} dependency - An array containing the dependency variable names and a resolver\n    * function as the last element.\n    * @param {Object} config - An optional config object.\n    * @param {boolean} [config.saveChild] - Whether the newly created DataModel will be a child.\n    * @param {boolean} [config.replaceVar] - Whether the newly created variable will replace the existing variable.\n    * @return {DataModel} Returns an instance of DataModel with the new field.\n    */\n    calculateVariable (schema, dependency, config) {\n        schema = sanitizeUnitSchema(schema);\n        config = Object.assign({}, { saveChild: true, replaceVar: false }, config);\n\n        const fieldsConfig = this.getFieldsConfig();\n        const depVars = dependency.slice(0, dependency.length - 1);\n        const retrieveFn = dependency[dependency.length - 1];\n\n        if (fieldsConfig[schema.name] && !config.replaceVar) {\n            throw new Error(`${schema.name} field already exists in datamodel`);\n        }\n\n        const depFieldIndices = depVars.map((field) => {\n            const fieldSpec = fieldsConfig[field];\n            if (!fieldSpec) {\n                // @todo dont throw error here, use warning in production mode\n                throw new Error(`${field} is not a valid column name.`);\n            }\n            return fieldSpec.index;\n        });\n\n        const clone = this.clone(config.saveChild);\n\n        const fs = clone.getFieldspace().fields;\n        const suppliedFields = depFieldIndices.map(idx => fs[idx]);\n\n        let cachedStore = {};\n        let cloneProvider = () => this.detachedRoot();\n\n        const computedValues = [];\n        rowDiffsetIterator(clone._rowDiffset, (i) => {\n            const fieldsData = suppliedFields.map(field => field.partialField.data[i]);\n            computedValues[i] = retrieveFn(...fieldsData, i, cloneProvider, cachedStore);\n        });\n        const [field] = createFields([computedValues], [schema], [schema.name]);\n        clone.addField(field);\n\n        persistDerivations(\n            this,\n            clone,\n            DM_DERIVATIVES.CAL_VAR,\n            { config: schema, fields: depVars },\n            retrieveFn\n        );\n\n        return clone;\n    }\n\n    /**\n     * Propagates changes across all the connected DataModel instances.\n     *\n     * @param {Array} identifiers - A list of identifiers that were interacted with.\n     * @param {Object} payload - The interaction specific details.\n     *\n     * @return {DataModel} DataModel instance.\n     */\n    propagate (identifiers, config = {}, addToNameSpace, propConfig = {}) {\n        const isMutableAction = config.isMutableAction;\n        const propagationSourceId = config.sourceId;\n        const payload = config.payload;\n        const rootModel = getRootDataModel(this);\n        const propagationNameSpace = rootModel._propagationNameSpace;\n        const rootGroupByModel = getRootGroupByModel(this);\n        const rootModels = {\n            groupByModel: rootGroupByModel,\n            model: rootModel\n        };\n\n        addToNameSpace && addToPropNamespace(propagationNameSpace, config, this);\n        propagateToAllDataModels(identifiers, rootModels, { propagationNameSpace, sourceId: propagationSourceId },\n            Object.assign({\n                payload\n            }, config));\n\n        if (isMutableAction) {\n            propagateImmutableActions(propagationNameSpace, rootModels, {\n                config,\n                propConfig\n            }, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Associates a callback with an event name.\n     *\n     * @param {string} eventName - The name of the event.\n     * @param {Function} callback - The callback to invoke.\n     * @return {DataModel} Returns this current DataModel instance itself.\n     */\n    on (eventName, callback) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation.push(callback);\n            break;\n        }\n        return this;\n    }\n\n    /**\n     * Unsubscribes the callbacks for the provided event name.\n     *\n     * @param {string} eventName - The name of the event to unsubscribe.\n     * @return {DataModel} Returns the current DataModel instance itself.\n     */\n    unsubscribe (eventName) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation = [];\n            break;\n\n        }\n        return this;\n    }\n\n    /**\n     * This method is used to invoke the method associated with propagation.\n     *\n     * @param {Object} payload The interaction payload.\n     * @param {DataModel} identifiers The propagated DataModel.\n     * @memberof DataModel\n     */\n    handlePropagation (propModel, payload) {\n        let propListeners = this._onPropagation;\n        propListeners.forEach(fn => fn.call(this, propModel, payload));\n    }\n\n    /**\n     * Performs the binning operation on a measure field based on the binning configuration. Binning means discretizing\n     * values of a measure. Binning configuration contains an array; subsequent values from the array marks the boundary\n     * of buckets in [inclusive, exclusive) range format. This operation does not mutate the subject measure field,\n     * instead, it creates a new field (variable) of type dimension and subtype binned.\n     *\n     * Binning can be configured by\n     * - providing custom bin configuration with non-uniform buckets,\n     * - providing bins count,\n     * - providing each bin size,\n     *\n     * When custom `buckets` are provided as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', buckets: [30, 80, 100, 110] }\n     *  const binnedDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binsCount` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', binsCount: 5, start: 0, end: 100 }\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binSize` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHorsepower', binSize: 20, start: 5}\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @public\n     *\n     * @param {string} measureFieldName - The name of the target measure field.\n     * @param {Object} config - The config object.\n     * @param {string} [config.name] - The name of the new field which will be created.\n     * @param {string} [config.buckets] - An array containing the bucket ranges.\n     * @param {string} [config.binSize] - The size of each bin. It is ignored when buckets are given.\n     * @param {string} [config.binsCount] - The total number of bins to generate. It is ignored when buckets are given.\n     * @param {string} [config.start] - The start value of the bucket ranges. It is ignored when buckets are given.\n     * @param {string} [config.end] - The end value of the bucket ranges. It is ignored when buckets are given.\n     * @return {DataModel} Returns a new {@link DataModel} instance with the new field.\n     */\n    bin (measureFieldName, config) {\n        const fieldsConfig = this.getFieldsConfig();\n\n        if (!fieldsConfig[measureFieldName]) {\n            throw new Error(`Field ${measureFieldName} doesn't exist`);\n        }\n\n        const binFieldName = config.name || `${measureFieldName}_binned`;\n\n        if (fieldsConfig[binFieldName]) {\n            throw new Error(`Field ${binFieldName} already exists`);\n        }\n\n        const measureField = this.getFieldspace().fieldsObj()[measureFieldName];\n        const { binnedData, bins } = createBinnedFieldData(measureField, this._rowDiffset, config);\n\n        const binField = createFields([binnedData], [\n            {\n                name: binFieldName,\n                type: FieldType.DIMENSION,\n                subtype: DimensionSubtype.BINNED,\n                bins\n            }], [binFieldName])[0];\n\n        const clone = this.clone(config.saveChild);\n        clone.addField(binField);\n\n        persistDerivations(\n            this,\n            clone,\n            DM_DERIVATIVES.BIN,\n             { measureFieldName, config, binFieldName },\n             null\n        );\n\n        return clone;\n    }\n\n    /**\n     * Creates a new {@link DataModel} instance with completely detached root from current {@link DataModel} instance,\n     * the new {@link DataModel} instance has no parent-children relationship with the current one, but has same data as\n     * the current one.\n     * This API is useful when a completely different {@link DataModel} but with same data as the current instance is\n     * needed.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *  const detachedDm = dm.detachedRoot();\n     *\n     * // has different namespace\n     * console.log(dm.getPartialFieldspace().name);\n     * console.log(detachedDm.getPartialFieldspace().name);\n     *\n     * // has same data\n     * console.log(dm.getData());\n     * console.log(detachedDm.getData());\n     *\n     * @public\n     *\n     * @return {DataModel} Returns a detached {@link DataModel} instance.\n     */\n    detachedRoot () {\n        const data = this.serialize(DataFormat.FLAT_JSON);\n        const schema = this.getSchema();\n\n        return new DataModel(data, schema);\n    }\n\n    /**\n     * Creates a set of new {@link DataModel} instances by splitting the set of rows in the source {@link DataModel}\n     * instance based on a set of dimensions.\n     *\n     * For each unique dimensional value, a new split is created which creates a unique {@link DataModel} instance for\n     *  that split\n     *\n     * If multiple dimensions are provided, it splits the source {@link DataModel} instance with all possible\n     * combinations of the dimensional values for all the dimensions provided\n     *\n     * Additionally, it also accepts a predicate function to reduce the set of rows provided. A\n     * {@link link_to_selection | Selection} is performed on all the split {@link DataModel} instances based on\n     * the predicate function\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDt = dt.splitByRow(['Origin'])\n     *  console.log(splitDt));\n     * // This should give three unique DataModel instances, one each having rows only for 'USA',\n     * // 'Europe' and 'Japan' respectively\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDtMulti = dt.splitByRow(['Origin', 'Cylinders'])\n     *  console.log(splitDtMulti));\n     * // This should give DataModel instances for all unique combinations of Origin and Cylinder values\n     *\n     * @example\n     * // with predicate function:\n     * const splitWithPredDt = dt.select(['Origin'], fields => fields.Origin.value === \"USA\")\n     * console.log(splitWithPredDt);\n     * // This should not include the DataModel for the Origin : 'USA'\n     *\n     *\n     * @public\n     *\n     * @param {Array} dimensionArr - Set of dimensions based on which the split should occur\n     * @param {Object} config - The configuration object\n     * @param {string} [config.saveChild] - Configuration to save child or not\n     * @param {string}[config.mode=FilteringMode.NORMAL] -The mode of the selection.\n     * @return {Array}  Returns the new DataModel instances after operation.\n     */\n    splitByRow (dimensionArr, reducerFn, config) {\n        const fieldsConfig = this.getFieldsConfig();\n\n        dimensionArr.forEach((fieldName) => {\n            if (!fieldsConfig[fieldName]) {\n                throw new Error(`Field ${fieldName} doesn't exist in the schema`);\n            }\n        });\n\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n\n        config = Object.assign({}, defConfig, config);\n\n        return splitWithSelect(this, dimensionArr, reducerFn, config);\n    }\n\n    /**\n     * Creates a set of new {@link DataModel} instances by splitting the set of fields in the source {@link DataModel}\n     * instance based on a set of common and unique field names provided.\n     *\n     * Each DataModel created contains a set of fields which are common to all and a set of unique fields.\n     * It also accepts configurations such as saveChild and mode(inverse or normal) to include/exclude the respective\n     * fields\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDt = dt.splitByColumn( [['Acceleration'], ['Horsepower']], ['Origin'])\n     *  console.log(splitDt));\n     * // This should give two unique DataModel instances, both having the field 'Origin' and\n     * // one each having 'Acceleration' and 'Horsepower' fields respectively\n     *\n     * @example\n     *  // without predicate function:\n     *  const splitDtInv = dt.splitByColumn( [['Acceleration'], ['Horsepower'],['Origin', 'Cylinders'],\n     *                           {mode: 'inverse'})\n     *  console.log(splitDtInv));\n     * // This should give DataModel instances in the following way:\n     * // All DataModel Instances do not have the fields 'Origin' and 'Cylinders'\n     * // One DataModel Instance has rest of the fields except 'Acceleration' and the other DataModel instance\n     * // has rest of the fields except 'Horsepower'\n     *\n     *\n     *\n     * @public\n     *\n     * @param {Array} uniqueFields - Set of unique fields included in each datamModel instance\n     * @param {Array} commonFields - Set of common fields included in all datamModel instances\n     * @param {Object} config - The configuration object\n     * @param {string} [config.saveChild] - Configuration to save child or not\n     * @param {string}[config.mode=FilteringMode.NORMAL] -The mode of the selection.\n     * @return {Array}  Returns the new DataModel instances after operation.\n     */\n    splitByColumn (uniqueFields = [], commonFields = [], config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        const fieldConfig = this.getFieldsConfig();\n        const allFields = Object.keys(fieldConfig);\n        const normalizedProjFieldSets = [[commonFields]];\n\n        config = Object.assign({}, defConfig, config);\n        uniqueFields = uniqueFields.length ? uniqueFields : [[]];\n\n\n        uniqueFields.forEach((fieldSet, i) => {\n            normalizedProjFieldSets[i] = getNormalizedProFields(\n                [...fieldSet, ...commonFields],\n                allFields,\n                fieldConfig);\n        });\n\n        return splitWithProject(this, normalizedProjFieldSets, config, allFields);\n    }\n\n\n}\n\nexport default DataModel;\n","import { fnList } from '../operator/group-by-function';\n\nexport const { sum, avg, min, max, first, last, count, std: sd } = fnList;\n","import DataModel from './datamodel';\nimport {\n  compose,\n  bin,\n  select,\n  project,\n  groupby as groupBy,\n  calculateVariable,\n  sort,\n  crossProduct,\n  difference,\n  naturalJoin,\n  leftOuterJoin,\n  rightOuterJoin,\n  fullOuterJoin,\n  union\n} from './operator';\nimport * as Stats from './stats';\nimport * as enums from './enums';\nimport { DateTimeFormatter } from './utils';\nimport { DataFormat, FilteringMode, DM_DERIVATIVES } from './constants';\nimport InvalidAwareTypes from './invalid-aware-types';\nimport pkg from '../package.json';\n\nconst Operators = {\n    compose,\n    bin,\n    select,\n    project,\n    groupBy,\n    calculateVariable,\n    sort,\n    crossProduct,\n    difference,\n    naturalJoin,\n    leftOuterJoin,\n    rightOuterJoin,\n    fullOuterJoin,\n    union\n};\n\nconst version = pkg.version;\nObject.assign(DataModel, {\n    Operators,\n    Stats,\n    DM_DERIVATIVES,\n    DateTimeFormatter,\n    DataFormat,\n    FilteringMode,\n    InvalidAwareTypes,\n    version\n}, enums);\n\nexport default DataModel;\n","import { persistDerivations } from '../helper';\nimport { DM_DERIVATIVES } from '../constants';\n\n/**\n * DataModel's opearators are exposed as composable functional operators as well as chainable operators. Chainable\n * operators are called on the instances of {@link Datamodel} and {@link Relation} class.\n *\n * Those same operators can be used as composable operators from `DataModel.Operators` namespace.\n *\n * All these operators have similar behaviour. All these operators when called with the argument returns a function\n * which expects a DataModel instance.\n *\n * @public\n * @module Operators\n * @namespace DataModel\n */\n\n/**\n * This is functional version of selection operator. {@link link_to_selection | Selection} is a row filtering operation.\n * It takes {@link SelectionPredicate | predicate} for filtering criteria and returns a function.\n * The returned function is called with the DataModel instance on which the action needs to be performed.\n *\n * {@link SelectionPredicate} is a function which returns a boolean value. For selection opearation the selection\n * function is called for each row of DataModel instance with the current row passed as argument.\n *\n * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n * of rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * [Warn] Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * [Error] `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @example\n * const select = DataModel.Operators.select;\n * usaCarsFn = select(fields => fields.Origin.value === 'USA');\n * usaCarsDm = usaCarsFn(dm);\n * console.log(usaCarsDm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {SelectionPredicate} selectFn - Predicate funciton which is called for each row with the current row\n *      ```\n *          function (row, i)  { ... }\n *      ```\n * @param {Object} [config] - The configuration object to control the inclusion exclusion of a row in resultant\n *      DataModel instance\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const select = (...args) => dm => dm.select(...args);\n\n/**\n * This is functional version of projection operator. {@link link_to_projection | Projection} is a column filtering\n * operation.It expects list of fields name and either include those or exclude those based on {@link FilteringMode} on\n * the  resultant variable.It returns a function which is called with the DataModel instance on which the action needs\n * to be performed.\n *\n * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n * @param {Object} [config] - An optional config to control the creation of new DataModel\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const project = (...args) => dm => dm.project(...args);\n\n/**\n * This is functional version of binnig operator. Binning happens on a measure field based on a binning configuration.\n * Binning in DataModel does not aggregate the number of rows present in DataModel instance after binning, it just adds\n * a new field with the binned value. Refer binning {@link example_of_binning | example} to have a intuition of what\n * binning is and the use case.\n *\n * Binning can be configured by\n * - providing custom bin configuration with non uniform buckets\n * - providing bin count\n * - providing each bin size\n *\n * When custom buckets are provided as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const buckets = {\n *      start: 30\n *      stops: [80, 100, 110]\n *  };\n *  const config = { buckets, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(dm);\n *\n * @text\n * When `binCount` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binCount: 5, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @text\n * When `binSize` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binSize: 200, name: 'binnedHorsepower' }\n *  const binnedDm = dataModel.bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {String} name Name of measure which will be used to create bin\n * @param {Object} config Config required for bin creation\n * @param {Array.<Number>} config.bucketObj.stops Defination of bucket ranges. Two subsequent number from arrays\n *      are picked and a range is created. The first number from range is inclusive and the second number from range\n *      is exclusive.\n * @param {Number} [config.bucketObj.startAt] Force the start of the bin from a particular number.\n *      If not mentioned, the start of the bin or the lower domain of the data if stops is not mentioned, else its\n *      the first value of the stop.\n * @param {Number} config.binSize Bucket size for each bin\n * @param {Number} config.binCount Number of bins which will be created\n * @param {String} config.name Name of the new binned field to be created\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const bin = (...args) => dm => dm.bin(...args);\n\n/**\n * This is functional version of `groupBy` operator.Groups the data using particular dimensions and by reducing\n * measures. It expects a list of dimensions using which it projects the datamodel and perform aggregations to reduce\n * the duplicate tuples. Refer this {@link link_to_one_example_with_group_by | document} to know the intuition behind\n * groupBy.\n *\n * DataModel by default provides definition of few {@link reducer | Reducers}.\n * {@link ReducerStore | User defined reducers} can also be registered.\n *\n * This is the chained implementation of `groupBy`.\n * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n *\n * @example\n * const groupBy = DataModel.Operators.groupBy;\n * const groupedFn = groupBy(['Year'], { horsepower: 'max' } );\n * groupedDM = groupByFn(dm);\n *\n * @public\n *\n * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n *      schema of the variable.\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const groupBy = (...args) => dm => dm.groupBy(...args);\n\n/**\n * Enables composing operators to run multiple operations and save group of operataion as named opration on a DataModel.\n * The resulting DataModel will be the result of all the operation provided. The operations provided will be executed in\n * a serial manner ie. result of one operation will be the input for the next operations (like pipe operator in unix).\n *\n * Suported operations in compose are\n * - `select`\n * - `project`\n * - `groupBy`\n * - `bin`\n * - `compose`\n *\n * @example\n * const compose = DataModel.Operators.compose;\n * const select = DataModel.Operators.select;\n * const project = DataModel.Operators.project;\n *\n * let composedFn = compose(\n *    select(fields => fields.netprofit.value <= 15),\n *    project(['netprofit', 'netsales']));\n *\n * const dataModel = new DataModel(data1, schema1);\n *\n * let composedDm = composedFn(dataModel);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<Operators>} operators: An array of operation that will be applied on the\n * datatable.\n *\n * @returns {DataModel} Instance of resultant DataModel\n */\nexport const compose = (...operations) =>\n    (dm, config = { saveChild: true }) => {\n        let currentDM = dm;\n        let firstChild;\n        const derivations = [];\n\n        operations.forEach((operation) => {\n            currentDM = operation(currentDM);\n            derivations.push(...currentDM._derivation);\n            if (!firstChild) {\n                firstChild = currentDM;\n            }\n        });\n\n        if (firstChild && firstChild !== currentDM) {\n            firstChild.dispose();\n        }\n\n        // reset all ancestorDerivation saved in-between compose\n        currentDM._ancestorDerivation = [];\n        persistDerivations(\n            dm,\n            currentDM,\n            DM_DERIVATIVES.COMPOSE,\n            null,\n            derivations\n        );\n\n        if (config.saveChild) {\n            currentDM.setParent(dm);\n        } else {\n            currentDM.setParent(null);\n        }\n\n        return currentDM;\n    };\n","/**\n * Wrapper on calculateVariable() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const calculateVariable = (...args) => dm => dm.calculateVariable(...args);\n\n/**\n * Wrapper on sort() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const sort = (...args) => dm => dm.sort(...args);\n","import { crossProduct } from './cross-product';\nimport { naturalJoinFilter } from './natural-join-filter-function';\n\nexport function naturalJoin (dataModel1, dataModel2) {\n    return crossProduct(dataModel1, dataModel2, naturalJoinFilter(dataModel1, dataModel2), true);\n}\n"],"sourceRoot":""}