{"version":3,"sources":["webpack://DataModel/webpack/universalModuleDefinition","webpack://DataModel/webpack/bootstrap","webpack://DataModel/./src/index.js","webpack://DataModel/./src/enums/data-format.js","webpack://DataModel/./src/enums/dimension-subtype.js","webpack://DataModel/./src/enums/measure-subtype.js","webpack://DataModel/./src/enums/field-type.js","webpack://DataModel/./src/enums/filtering-mode.js","webpack://DataModel/./src/utils/date-time-formatter.js","webpack://DataModel/./src/utils/column-major.js","webpack://DataModel/./src/utils/extend2.js","webpack://DataModel/./src/utils/helper.js","webpack://DataModel/./src/field-store.js","webpack://DataModel/./src/value.js","webpack://DataModel/./src/operator/row-diffset-iterator.js","webpack://DataModel/./src/operator/bucket-creator.js","webpack://DataModel/./src/operator/get-common-schema.js","webpack://DataModel/./src/constants/index.js","webpack://DataModel/./src/operator/cross-product.js","webpack://DataModel/./src/operator/merge-sort.js","webpack://DataModel/./src/operator/data-builder.js","webpack://DataModel/./src/operator/difference.js","webpack://DataModel/./src/operator/group-by-function.js","webpack://DataModel/./src/utils/reducer-store.js","webpack://DataModel/./src/operator/group-by.js","webpack://DataModel/./src/operator/natural-join-filter-function.js","webpack://DataModel/./src/operator/union.js","webpack://DataModel/./src/operator/outer-join.js","webpack://DataModel/./src/fields/field/index.js","webpack://DataModel/./src/fields/dimension/index.js","webpack://DataModel/./src/fields/categorical/index.js","webpack://DataModel/./src/fields/temporal/index.js","webpack://DataModel/./src/fields/binned/index.js","webpack://DataModel/./src/fields/measure/index.js","webpack://DataModel/./src/fields/continuous/index.js","webpack://DataModel/./src/fields/parsers/field-parser/index.js","webpack://DataModel/./src/fields/parsers/categorical-parser/index.js","webpack://DataModel/./src/fields/parsers/temporal-parser/index.js","webpack://DataModel/./src/fields/parsers/binned-parser/index.js","webpack://DataModel/./src/fields/parsers/continuous-parser/index.js","webpack://DataModel/./src/fields/partial-field/index.js","webpack://DataModel/./src/field-creator.js","webpack://DataModel/./src/default-config.js","webpack://DataModel/./src/converter/dsv-arr.js","webpack://DataModel/./node_modules/d3-dsv/src/dsv.js","webpack://DataModel/./node_modules/d3-dsv/src/csv.js","webpack://DataModel/./node_modules/d3-dsv/src/tsv.js","webpack://DataModel/./src/converter/dsv-str.js","webpack://DataModel/./src/converter/flat-json.js","webpack://DataModel/./src/converter/auto-resolver.js","webpack://DataModel/./src/helper.js","webpack://DataModel/./src/relation.js","webpack://DataModel/./src/datamodel.js","webpack://DataModel/./src/stats/index.js","webpack://DataModel/./src/export.js","webpack://DataModel/./src/operator/compose.js","webpack://DataModel/./src/operator/pure-operators.js","webpack://DataModel/./src/operator/natural-join.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DataModel","require","default","DataFormat","FLAT_JSON","DSV_STR","DSV_ARR","AUTO","DimensionSubtype","CATEGORICAL","TEMPORAL","GEO","BINNED","MeasureSubtype","CONTINUOUS","FieldType","MEASURE","DIMENSION","FilteringMode","NORMAL","INVERSE","ALL","convertToNativeDate","date","Date","pad","DateTimeFormatter","format","this","dtParams","undefined","nativeDate","RegExp","escape","text","replace","TOKEN_PREFIX","DATETIME_PARAM_SEQUENCE","YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","defaultNumberParser","defVal","val","parsedVal","isFinite","parseInt","defaultRangeParser","range","nVal","toLowerCase","length","getTokenDefinitions","daysDef","short","long","monthsDef","H","index","extract","parser","formatter","getHours","toString","hours","P","M","getMinutes","S","getSeconds","K","getMilliseconds","a","join","day","getDay","A","e","getDate","b","month","getMonth","B","y","substring","year","getFullYear","Y","getTokenFormalNames","definitions","HOUR_12","AMPM_UPPERCASE","AMPM_LOWERCASE","SHORT_DAY","LONG_DAY","DAY_OF_MONTH","DAY_OF_MONTH_CONSTANT_WIDTH","SHORT_MONTH","LONG_MONTH","MONTH_OF_YEAR","SHORT_YEAR","LONG_YEAR","tokenResolver","defaultResolver","arg","targetParam","arguments","hourFormat24","hourFormat12","ampmLower","ampmUpper","amOrpm","isPM","findTokens","tokenPrefix","tokenLiterals","keys","occurrence","forwardChar","indexOf","push","token","formatAs","nDate","formattedStr","String","formattedVal","parse","dateTimeStamp","options","extractTokenValue","dtParamSeq","noBreak","dtParamArr","args","resolverKey","resolverParams","resolverFn","param","resolvedVal","splice","apply","tokenObj","lastOccurrenceIndex","occObj","occIndex","targetText","regexFormat","tokenArr","map","obj","occurrenceLength","extractValues","match","shift","getNativeDate","unshift","Function","column_major","store","_len","fields","Array","_key","forEach","fieldIndex","from","OBJECTSTRING","objectToStrFn","objectToStr","arrayToStr","checkCyclicRef","parentArr","bIndex","extend2","obj1","obj2","skipUndef","_typeof","merge","tgtArr","srcArr","item","srcVal","tgtVal","str","cRef","isArray","getUniqueId","getTime","Math","round","random","isArrEqual","arr1","arr2","formatNumber","detectDataFormat","data","isObject","fieldStore","createNamespace","fieldArr","dataId","fieldsObj","_cachedFieldsObj","field","getMeasure","measureFields","_cachedMeasure","schema","type","getDimension","dimensionFields","_cachedDimension","Value","_classCallCheck","configurable","writable","_value","rowDiffsetIterator","rowDiffset","callback","split","diffStr","diffStsArr","start","end","generateBuckets","binSize","buckets","next","findBucketRange","bucketRanges","leftIdx","rightIdx","midIdx","floor","getCommonSchema","fs1","fs2","retArr","fs1Arr","DM_DERIVATIVES","JOINS","CROSS","LEFTOUTER","RIGHTOUTER","NATURAL","FULLOUTER","LOGICAL_OPERATORS","defaultFilterFn","crossProduct","dm1","dm2","filterFn","replaceCommonSchema","jointype","applicableFilterFn","dm1FieldStore","getFieldspace","dm2FieldStore","dm1FieldStoreName","dm2FieldStoreName","commonSchemaList","Error","tmpSchema","_rowDiffset","rowAdded","rowPosition","ii","tuple","userArg","partialField","dm1Fields","prepareJoinData","dm2Fields","detachedRoot","tupleObj","cellVal","iii","len","defSortFn","a1","b1","mergeSort","arr","sortFn","sort","lo","hi","mid","mainArr","auxArr","getSortFn","dataType","sortType","retFunc","groupData","hashMap","Map","groupedData","datum","fieldVal","has","set","createSortingFnArg","groupedDatum","targetFields","targetFieldDetails","label","reduce","acc","idx","dataBuilder","colIdentifier","sortingDetails","assign","addUid","columnWise","retObj","uids","reqSorting","tmpDataArr","colName","insertInd","dataObj","fieldName","sortMeta","fDetails","fieldInSchema","sortingFn","slice","f","data_builder_toConsumableArray","pop","sortData","tmpData","difference","hashTable","schemaNameArr","dm1FieldStoreFieldObj","dm2FieldStoreFieldObj","_colIdentifier","prepareDataHelper","dm","addData","hashData","schemaName","sum","totalSum","curr","Number","isNaN","avg","fnList","min","filteredValues","filter","num","group_by_function_toConsumableArray","max","first","last","count","std","sqrt","mean","pow","variance","defaultReducerName","ReducerStore","_this","reducer_store_classCallCheck","defReducer","entries","reducer","_this2","__unregister","delete","reducerStore","groupBy","dataModel","reducers","existingDataModel","sFieldArr","dimensions","_ref","group_by_slicedToArray","getFieldArr","reducerObj","measures","defaultReducer","measureName","defAggFn","reducerFn","resolve","getReducerObj","fieldStoreObj","dbName","dimensionArr","measureArr","newDataModel","_ref3","_ref4","rowCount","hash","_","cachedStore","cloneProvider","row","__calculateFieldspace","naturalJoinFilter","commonSchemaArr","retainTuple","union","leftOuterJoin","dataModel1","dataModel2","rightOuterJoin","Field","field_classCallCheck","subtype","description","displayName","Dimension","_cachedDomain","calculateDataDomain","Categorical","Set","domain","add","Temporal","temporal_classCallCheck","temporal_possibleConstructorReturn","__proto__","getPrototypeOf","_cachedMinDiff","sortedData","arrLn","minDiff","POSITIVE_INFINITY","prevDatum","nextDatum","processedCount","_this3","Binned","binsArr","bins","Measure","unit","numberFormat","Continuous","NEGATIVE_INFINITY","FieldParser","CategoricalParser","trim","TemporalParser","temporal_parser_classCallCheck","temporal_parser_possibleConstructorReturn","_dtf","BinnedParser","matched","parseFloat","ContinuousParser","PartialField","partial_field_classCallCheck","_sanitize","createFields","dataColumn","headers","headersObj","header","createUnitField","default_config","dataFormat","DSVArr","firstRowHeader","columns","columnMajor","EOL","EOF","QUOTE","NEWLINE","RETURN","objectConverter","JSON","stringify","src_dsv","delimiter","reFormat","DELIMITER","charCodeAt","parseRows","rows","N","I","eof","eol","j","formatRow","formatValue","test","convert","customConverter","columnSet","column","inferColumns","concat","formatRows","csv","dsv","tsv","DSVStr","fieldSeparator","d3Dsv","FlatJSON","insertionIndex","Auto","converters","resp","updateFields","partialFieldspace","fieldStoreName","_ref2","helper_slicedToArray","collID","partialFieldMap","newFields","coll","createUnitFieldFromPartial","persistDerivation","model","operation","_model$_derivation","config","criteriaFn","derivative","op","meta","criteria","_derivation","helper_toConsumableArray","selectHelper","selectFn","sourceDm","newRowDiffSet","lastInsertedValue","li","selectorHelperFn","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","done","err","return","prepareSelectionData","checker","filterPropagationModel","propModels","filterByMeasure","fns","propModel","getData","fieldsConfig","getFieldsConfig","fieldsSpace","values","v","def","some","every","propField","valueOf","filteredModel","clone","select","fn","saveChild","cloneWithSelect","selectConfig","cloneConfig","cloned","getPartialFieldspace","calculateFieldsConfig","cloneWithProject","projField","allFields","projectionSet","actualProjField","sanitizeUnitSchema","unitSchema","updateData","relation","sanitizeSchema","defaultConfig","converterFn","converter","_converterFn","_converterFn2","formattedData","nameSpace","_partialFieldspace","_dataFormat","applyExistingOperationOnModel","_propModel$","_propModel$2","_getOperationArgument","child","derivation","params","groupByString","getOperationArguments","selectionModel","rejectionModel","propagateIdentifiers","propModelInf","nonTraversingModel","excludeModels","handlePropagation","_children","_applyExistingOperati","_applyExistingOperati2","getPathToRootModel","path","_parent","propagateToAllDataModels","identifiers","rootModels","propagationInf","propagationNameSpace","propagateToSource","propagationSourceId","sourceId","propagateInterpolatedValues","criterias","persistent","actionCriterias","mutableActions","filteredCriteria","entry","action","sourceActionCriterias","actionInf","actionConf","applyOnSource","models","rootModel","propConfig","sourceIdentifiers","rootGroupByModel","groupByModel","inf","propagationModel","getFilteredModel","reverse","Relation","relation_classCallCheck","source","_fieldStoreName","_propagationNameSpace","immutableActions","_fieldspace","joinWith","unionWith","differenceWith","defConfig","oDm","retDataModel","getAllFields","jsonData","rowObj","constructor","fieldConfig","normalizedProjField","relation_toConsumableArray","search","_fieldConfig","fieldDef","removeChild","findIndex","sibling","parent","criteriaQueue","datamodel_classCallCheck","datamodel_possibleConstructorReturn","_onPropagation","_sortingDetails","order","withUid","dataGenerated","fieldNames","fmtFieldIdx","elem","fIdx","fmtFn","datumIdx","fieldsArr","rawData","dataInCSVArr","sortedDm","colData","rowsCount","serializedData","rowIdx","colIdx","fieldinst","dependency","replaceVar","depVars","retrieveFn","depFieldIndices","fieldSpec","fs","suppliedFields","computedValues","fieldsData","_createFields","datamodel_slicedToArray","addField","addToNameSpace","isMutableAction","payload","getRootDataModel","getRootGroupByModel","find","sourceNamespace","addToPropNamespace","filterImmutableAction","criteriaModel","propagateImmutableActions","eventName","measureFieldName","binFieldName","_createBinnedFieldDat","measureField","binsCount","_measureField$domain","_measureField$domain2","_slicedToArray","dMin","dMax","ceil","abs","binnedData","createBinnedFieldData","binField","serialize","getSchema","sd","Operators","compose","_len5","operations","_key5","currentDM","frstChild","derivations","compose_toConsumableArray","addParent","dispose","bin","_len3","_key3","project","_len2","_key2","_len4","_key4","calculateVariable","naturalJoin","fullOuterJoin","Stats","enums","version","pkg"],"mappings":"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","file":"datamodel.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"DataModel\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DataModel\"] = factory();\n\telse\n\t\troot[\"DataModel\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const DataModel = require('./export');\n\nmodule.exports = DataModel.default ? DataModel.default : DataModel;\n","/**\n * DataFormat Enum defines the format of the input data.\n * Based on the format of the data the respective adapter is loaded.\n *\n * @readonly\n * @enum {string}\n */\nconst DataFormat = {\n    FLAT_JSON: 'FlatJSON',\n    DSV_STR: 'DSVStr',\n    DSV_ARR: 'DSVArr',\n    AUTO: 'Auto'\n};\n\nexport default DataFormat;\n","/**\n * DimensionSubtype enum defines the sub types of the Dimensional Field.\n *\n * @readonly\n * @enum {string}\n */\nconst DimensionSubtype = {\n    CATEGORICAL: 'categorical',\n    TEMPORAL: 'temporal',\n    GEO: 'geo',\n    BINNED: 'binned'\n};\n\nexport default DimensionSubtype;\n","/**\n * MeasureSubtype enum defines the sub types of the Measure Field.\n *\n * @readonly\n * @enum {string}\n */\nconst MeasureSubtype = {\n    CONTINUOUS: 'continuous'\n};\n\nexport default MeasureSubtype;\n","/**\n * FieldType enum defines the high level field based on which visuals are controlled.\n * Measure in a high level is numeric field and Dimension in a high level is string field.\n *\n * @readonly\n * @enum {string}\n */\nconst FieldType = {\n    MEASURE: 'measure',\n    DIMENSION: 'dimension'\n};\n\nexport default FieldType;\n","/**\n * Filtering mode enum defines the filering modes of DataModel.\n *\n * @readonly\n * @enum {string}\n */\nconst FilteringMode = {\n    NORMAL: 'normal',\n    INVERSE: 'inverse',\n    ALL: 'all'\n};\n\nexport default FilteringMode;\n","/**\n * Creates a JS native date object from input\n *\n * @param {string | number | Date} date Input using which date object to be created\n * @return {Date} : JS native date object\n */\nfunction convertToNativeDate (date) {\n    if (date instanceof Date) {\n        return date;\n    }\n\n    return new Date(date);\n}\n/**\n * Apply padding before a number if its less than 1o. This is used when constant digit's number to be returned\n * between 0 - 99\n *\n * @param {number} n Input to be padded\n * @return {string} Padded number\n */\nfunction pad (n) {\n    return (n < 10) ? (`0${n}`) : n;\n}\n/*\n * DateFormatter utility to convert any date format to any other date format\n * DateFormatter parse a date time stamp specified by a user abiding by rules which are defined\n * by user in terms of token. It creates JS native date object from the user specified format.\n * That native date can also be displayed\n * in any specified format.\n * This utility class only takes care of format conversion only\n */\n\n/*\n * Escapes all the special character that are used in regular expression.\n * Like\n * RegExp.escape('sgfd-$') // Output: sgfd\\-\\$\n *\n * @param text {String} : text which is to be escaped\n */\nRegExp.escape = function (text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n\n/**\n * DateTimeFormatter class to convert any user format of date time stamp to any other format\n * of date time stamp.\n *\n * @param {string} format Format of the date given. For the above date,\n * 'year: %Y, month: %b, day: %d'.\n * @class\n */\n/* istanbul ignore next */ function DateTimeFormatter (format) {\n    this.format = format;\n    this.dtParams = undefined;\n    this.nativeDate = undefined;\n}\n\n// The identifier of the tokens\nDateTimeFormatter.TOKEN_PREFIX = '%';\n\n// JS native Date constructor takes the date params (year, month, etc) in a certail sequence.\n// This defines the sequence of the date parameters in the constructor.\nDateTimeFormatter.DATETIME_PARAM_SEQUENCE = {\n    YEAR: 0,\n    MONTH: 1,\n    DAY: 2,\n    HOUR: 3,\n    MINUTE: 4,\n    SECOND: 5,\n    MILLISECOND: 6\n};\n\n/*\n * This is a default number parsing utility. It tries to parse a number in integer, if parsing is unsuccessful, it\n * gives back a default value.\n *\n * @param: defVal {Number} : Default no if the parsing to integer is not successful\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be parsed.\n */\nDateTimeFormatter.defaultNumberParser = function (defVal) {\n    return function (val) {\n        let parsedVal;\n        if (isFinite(parsedVal = parseInt(val, 10))) {\n            return parsedVal;\n        }\n\n        return defVal;\n    };\n};\n\n/*\n * This is a default number range utility. It tries to find an element in the range. If not found it returns a\n * default no as an index.\n *\n * @param: range {Array} : The list which is to be serached\n * @param: defVal {Number} : Default no if the serach and find does not return anything\n * @return {Function} : An closure function which is to be called by passing an the value which needs to be found\n */\nDateTimeFormatter.defaultRangeParser = function (range, defVal) {\n    return (val) => {\n        let i;\n        let l;\n\n        if (!val) { return defVal; }\n\n        const nVal = val.toLowerCase();\n\n        for (i = 0, l = range.length; i < l; i++) {\n            if (range[i].toLowerCase() === nVal) {\n                return i;\n            }\n        }\n\n        if (i === undefined) {\n            return defVal;\n        }\n        return null;\n    };\n};\n\n/*\n * Defines the tokens which are supporter by the dateformatter. Using this definitation a value gets extracted from\n * the user specifed date string. This also formats the value for display purpose from native JS date.\n * The definition of each token contains the following named properties\n * {\n *     %token_name% : {\n *         name: name of the token, this is used in reverse lookup,\n *         extract: a function that returns the regular expression to extract that piece of information. All the\n *                  regex should be gouped by using ()\n *         parser: a function which receives value extracted by the above regex and parse it to get the date params\n *         formatter: a formatter function that takes milliseconds or JS Date object and format the param\n *                  represented by the token only.\n *     }\n * }\n *\n * @return {Object} : Definition of the all the supported tokens.\n */\nDateTimeFormatter.getTokenDefinitions = function () {\n    const daysDef = {\n        short: [\n            'Sun',\n            'Mon',\n            'Tue',\n            'Wed',\n            'Thu',\n            'Fri',\n            'Sat'\n        ],\n        long: [\n            'Sunday',\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday'\n        ]\n    };\n    const monthsDef = {\n        short: [\n            'Jan',\n            'Feb',\n            'Mar',\n            'Apr',\n            'May',\n            'Jun',\n            'Jul',\n            'Aug',\n            'Sep',\n            'Oct',\n            'Nov',\n            'Dec'\n        ],\n        long: [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December'\n        ]\n    };\n\n    const definitions = {\n        H: {\n            // 24 hours format\n            name: 'H',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n\n                return d.getHours().toString();\n            }\n        },\n        l: {\n            // 12 hours format\n            name: 'l',\n            index: 3,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours() % 12;\n\n                return (hours === 0 ? 12 : hours).toString();\n            }\n        },\n        p: {\n            // AM or PM\n            name: 'p',\n            index: 3,\n            extract () { return '(AM|PM)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'AM' : 'PM');\n            }\n        },\n        P: {\n            // am or pm\n            name: 'P',\n            index: 3,\n            extract () { return '(am|pm)'; },\n            parser: (val) => {\n                if (val) {\n                    return val.toLowerCase();\n                }\n                return null;\n            },\n            formatter: (val) => {\n                const d = convertToNativeDate(val);\n                const hours = d.getHours();\n\n                return (hours < 12 ? 'am' : 'pm');\n            }\n        },\n        M: {\n            // Two digit minutes 00 - 59\n            name: 'M',\n            index: 4,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const mins = d.getMinutes();\n\n                return pad(mins);\n            }\n        },\n        S: {\n            // Two digit seconds 00 - 59\n            name: 'S',\n            index: 5,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const seconds = d.getSeconds();\n\n                return pad(seconds);\n            }\n        },\n        K: {\n            // Milliseconds\n            name: 'K',\n            index: 6,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const ms = d.getMilliseconds();\n\n                return ms.toString();\n            }\n        },\n        a: {\n            // Short name of day, like Mon\n            name: 'a',\n            index: 2,\n            extract () { return `(${daysDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.short[day]).toString();\n            }\n        },\n        A: {\n            // Long name of day, like Monday\n            name: 'A',\n            index: 2,\n            extract () { return `(${daysDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(daysDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDay();\n\n                return (daysDef.long[day]).toString();\n            }\n        },\n        e: {\n            // 8 of March, 11 of November\n            name: 'e',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return day.toString();\n            }\n        },\n        d: {\n            // 08 of March, 11 of November\n            name: 'd',\n            index: 2,\n            extract () { return '(\\\\d+)'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const day = d.getDate();\n\n                return pad(day);\n            }\n        },\n        b: {\n            // Short month, like Jan\n            name: 'b',\n            index: 1,\n            extract () { return `(${monthsDef.short.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.short),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.short[month]).toString();\n            }\n        },\n        B: {\n            // Long month, like January\n            name: 'B',\n            index: 1,\n            extract () { return `(${monthsDef.long.join('|')})`; },\n            parser: DateTimeFormatter.defaultRangeParser(monthsDef.long),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return (monthsDef.long[month]).toString();\n            }\n        },\n        m: {\n            // Two digit month of year like 01 for January\n            name: 'm',\n            index: 1,\n            extract () { return '(\\\\d+)'; },\n            parser (val) { return DateTimeFormatter.defaultNumberParser()(val) - 1; },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const month = d.getMonth();\n\n                return pad(month + 1);\n            }\n        },\n        y: {\n            // Short year like 90 for 1990\n            name: 'y',\n            index: 0,\n            extract () { return '(\\\\d{4})'; },\n            parser (val) {\n                if (val) {\n                    const l = val.length;\n                    val = val.substring(l - 2, l);\n                }\n\n                return DateTimeFormatter.defaultNumberParser()(val);\n            },\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                let year = d.getFullYear().toString();\n                let l;\n\n                if (year) {\n                    l = year.length;\n                    year = year.substring(l - 2, l);\n                }\n\n                return year;\n            }\n        },\n        Y: {\n            // Long year like 1990\n            name: 'Y',\n            index: 0,\n            extract () { return '(\\\\d{4})'; },\n            parser: DateTimeFormatter.defaultNumberParser(),\n            formatter (val) {\n                const d = convertToNativeDate(val);\n                const year = d.getFullYear().toString();\n\n                return year;\n            }\n        }\n    };\n\n    return definitions;\n};\n\n/*\n * The tokens which works internally is not user friendly in terms of memorizing the names. This gives a formal\n * definition to the informal notations.\n *\n * @return {Object} : Formal definition of the tokens\n */\nDateTimeFormatter.getTokenFormalNames = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n\n    return {\n        HOUR: definitions.H,\n        HOUR_12: definitions.l,\n        AMPM_UPPERCASE: definitions.p,\n        AMPM_LOWERCASE: definitions.P,\n        MINUTE: definitions.M,\n        SECOND: definitions.S,\n        SHORT_DAY: definitions.a,\n        LONG_DAY: definitions.A,\n        DAY_OF_MONTH: definitions.e,\n        DAY_OF_MONTH_CONSTANT_WIDTH: definitions.d,\n        SHORT_MONTH: definitions.b,\n        LONG_MONTH: definitions.B,\n        MONTH_OF_YEAR: definitions.m,\n        SHORT_YEAR: definitions.y,\n        LONG_YEAR: definitions.Y\n    };\n};\n\n/*\n * This defines the rules and declares dependencies that resolves a date parameter (year, month etc) from\n * the date time parameter array.\n *\n * @return {Object} : An object that contains dependencies and a resolver function. The dependencies values are fed\n *                  to the resolver function in that particular sequence only.\n */\nDateTimeFormatter.tokenResolver = function () {\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const defaultResolver = (...args) => { // eslint-disable-line require-jsdoc\n        let i = 0;\n        let arg;\n        let targetParam;\n        const l = args.length;\n\n        for (; i < l; i++) {\n            arg = args[i];\n            if (args[i]) {\n                targetParam = arg;\n            }\n        }\n\n        if (!targetParam) { return null; }\n\n        return targetParam[0].parser(targetParam[1]);\n    };\n\n    return {\n        YEAR: [definitions.y, definitions.Y,\n            defaultResolver\n        ],\n        MONTH: [definitions.b, definitions.B, definitions.m,\n            defaultResolver\n        ],\n        DAY: [definitions.a, definitions.A, definitions.e, definitions.d,\n            defaultResolver\n        ],\n        HOUR: [definitions.H, definitions.l, definitions.p, definitions.P,\n            function (hourFormat24, hourFormat12, ampmLower, ampmUpper) {\n                let targetParam;\n                let amOrpm;\n                let isPM;\n                let val;\n\n                if (hourFormat12 && (amOrpm = (ampmLower || ampmUpper))) {\n                    if (amOrpm[0].parser(amOrpm[1]) === 'pm') {\n                        isPM = true;\n                    }\n\n                    targetParam = hourFormat12;\n                } else if (hourFormat12) {\n                    targetParam = hourFormat12;\n                } else {\n                    targetParam = hourFormat24;\n                }\n\n                if (!targetParam) { return null; }\n\n                val = targetParam[0].parser(targetParam[1]);\n                if (isPM) {\n                    val += 12;\n                }\n                return val;\n            }\n        ],\n        MINUTE: [definitions.M,\n            defaultResolver\n        ],\n        SECOND: [definitions.S,\n            defaultResolver\n        ]\n    };\n};\n\n/*\n * Finds token from the format rule specified by a user.\n * @param format {String} : The format of the input date specified by the user\n * @return {Array} : An array of objects which contains the available token and their occurence index in the format\n */\nDateTimeFormatter.findTokens = function (format) {\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenLiterals = Object.keys(definitions);\n    const occurrence = [];\n    let i;\n    let forwardChar;\n\n    while ((i = format.indexOf(tokenPrefix, i + 1)) >= 0) {\n        forwardChar = format[i + 1];\n        if (tokenLiterals.indexOf(forwardChar) === -1) { continue; }\n\n        occurrence.push({\n            index: i,\n            token: forwardChar\n        });\n    }\n\n    return occurrence;\n};\n\n/*\n * Format any JS date to a specified date given by user.\n *\n * @param date {Number | Date} : The date object which is to be formatted\n * @param format {String} : The format using which the date will be formatted for display\n */\nDateTimeFormatter.formatAs = function (date, format) {\n    const nDate = convertToNativeDate(date);\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    let formattedStr = String(format);\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    let token;\n    let formattedVal;\n    let i;\n    let l;\n\n    for (i = 0, l = occurrence.length; i < l; i++) {\n        token = occurrence[i].token;\n        formattedVal = definitions[token].formatter(nDate);\n        formattedStr = formattedStr.replace(new RegExp(tokenPrefix + token, 'g'), formattedVal);\n    }\n\n    return formattedStr;\n};\n\n/*\n * Parses the user specified date string to extract the date time params.\n *\n * @return {Array} : Value of date time params in an array [year, month, day, hour, minutes, seconds, milli]\n */\nDateTimeFormatter.prototype.parse = function (dateTimeStamp, options) {\n    const tokenResolver = DateTimeFormatter.tokenResolver();\n    const dtParams = this.extractTokenValue(dateTimeStamp);\n    const dtParamSeq = DateTimeFormatter.DATETIME_PARAM_SEQUENCE;\n    const noBreak = options && options.noBreak;\n    const dtParamArr = [];\n    const args = [];\n    let resolverKey;\n    let resolverParams;\n    let resolverFn;\n    let val;\n    let i;\n    let param;\n    let resolvedVal;\n    let l;\n\n    for (resolverKey in tokenResolver) {\n        if (!{}.hasOwnProperty.call(tokenResolver, resolverKey)) { continue; }\n\n        args.length = 0;\n        resolverParams = tokenResolver[resolverKey];\n        resolverFn = resolverParams.splice(resolverParams.length - 1, 1)[0];\n\n        for (i = 0, l = resolverParams.length; i < l; i++) {\n            param = resolverParams[i];\n            val = dtParams[param.name];\n\n            if (val === undefined) {\n                args.push(null);\n            } else {\n                args.push([param, val]);\n            }\n        }\n\n        resolvedVal = resolverFn.apply(this, args);\n\n        if ((resolvedVal === undefined || resolvedVal === null) && !noBreak) {\n            break;\n        }\n\n        dtParamArr[dtParamSeq[resolverKey]] = resolvedVal;\n    }\n\n    return dtParamArr;\n};\n\n/*\n * Extract the value of the token from user specified date time string.\n *\n * @return {Object} : An key value pair which contains the tokens as key and value as pair\n */\nDateTimeFormatter.prototype.extractTokenValue = function (dateTimeStamp) {\n    const format = this.format;\n    const definitions = DateTimeFormatter.getTokenDefinitions();\n    const tokenPrefix = DateTimeFormatter.TOKEN_PREFIX;\n    const occurrence = DateTimeFormatter.findTokens(format);\n    const tokenObj = {};\n\n    let lastOccurrenceIndex;\n    let occObj;\n    let occIndex;\n    let targetText;\n    let regexFormat;\n\n    let l;\n    let i;\n\n    regexFormat = String(format);\n\n    const tokenArr = occurrence.map(obj => obj.token);\n    const occurrenceLength = occurrence.length;\n    for (i = occurrenceLength - 1; i >= 0; i--) {\n        occIndex = occurrence[i].index;\n\n        if (occIndex + 1 === regexFormat.length - 1) {\n            lastOccurrenceIndex = occIndex;\n            continue;\n        }\n\n        if (lastOccurrenceIndex === undefined) {\n            lastOccurrenceIndex = regexFormat.length;\n        }\n\n        targetText = regexFormat.substring(occIndex + 2, lastOccurrenceIndex);\n        regexFormat = regexFormat.substring(0, occIndex + 2) +\n            RegExp.escape(targetText) +\n            regexFormat.substring(lastOccurrenceIndex, regexFormat.length);\n\n        lastOccurrenceIndex = occIndex;\n    }\n\n    for (i = 0; i < occurrenceLength; i++) {\n        occObj = occurrence[i];\n        regexFormat = regexFormat.replace(tokenPrefix + occObj.token, definitions[occObj.token].extract());\n    }\n\n    const extractValues = dateTimeStamp.match(new RegExp(regexFormat)) || [];\n    extractValues.shift();\n\n    for (i = 0, l = tokenArr.length; i < l; i++) {\n        tokenObj[tokenArr[i]] = extractValues[i];\n    }\n    return tokenObj;\n};\n\n/*\n * Give back the JS native date formed from  user specified date string\n *\n * @return {Date} : Native JS Date\n */\nDateTimeFormatter.prototype.getNativeDate = function (dateTimeStamp) {\n    if (dateTimeStamp instanceof Date) {\n        return dateTimeStamp;\n    } else if (isFinite(dateTimeStamp) && !!this.format) {\n        return new Date(dateTimeStamp);\n    }\n\n    const dtParams = this.dtParams = this.parse(dateTimeStamp);\n\n    dtParams.unshift(null);\n    this.nativeDate = new (Function.prototype.bind.apply(Date, dtParams))();\n    return this.nativeDate;\n};\n\n/*\n * Represents JS native date to a user specified format.\n *\n * @param format {String} : The format according to which the date is to be represented\n * @return {String} : The formatted date string\n */\nDateTimeFormatter.prototype.formatAs = function (format, dateTimeStamp) {\n    let nativeDate;\n\n    if (dateTimeStamp) {\n        nativeDate = this.nativeDate = this.getNativeDate(dateTimeStamp);\n    } else if (!(nativeDate = this.nativeDate)) {\n        nativeDate = this.getNativeDate(dateTimeStamp);\n    }\n\n    return DateTimeFormatter.formatAs(nativeDate, format);\n};\n\nexport { DateTimeFormatter as default };\n","/**\n * The utility function to calculate major column.\n *\n * @param {Object} store - The store object.\n * @return {Function} Returns the push function.\n */\nexport default (store) => {\n    let i = 0;\n    return (...fields) => {\n        fields.forEach((val, fieldIndex) => {\n            if (!(store[fieldIndex] instanceof Array)) {\n                store[fieldIndex] = Array.from({ length: i });\n            }\n            store[fieldIndex].push(val);\n        });\n        i++;\n    };\n};\n","/* eslint-disable */\nconst OBJECTSTRING = 'object';\nconst objectToStrFn = Object.prototype.toString;\nconst objectToStr = '[object Object]';\nconst arrayToStr = '[object Array]';\n\nfunction checkCyclicRef(obj, parentArr) {\n    let i = parentArr.length;\n    let bIndex = -1;\n\n    while (i) {\n        if (obj === parentArr[i]) {\n            bIndex = i;\n            return bIndex;\n        }\n        i -= 1;\n    }\n\n    return bIndex;\n}\n\nfunction merge(obj1, obj2, skipUndef, tgtArr, srcArr) {\n    var item,\n        srcVal,\n        tgtVal,\n        str,\n        cRef;\n    // check whether obj2 is an array\n    // if array then iterate through it's index\n    // **** MOOTOOLS precution\n\n    if (!srcArr) {\n        tgtArr = [obj1];\n        srcArr = [obj2];\n    }\n    else {\n        tgtArr.push(obj1);\n        srcArr.push(obj2);\n    }\n\n    if (obj2 instanceof Array) {\n        for (item = 0; item < obj2.length; item += 1) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (typeof tgtVal !== OBJECTSTRING) {\n                if (!(skipUndef && tgtVal === undefined)) {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                    srcVal = obj1[item] = tgtVal instanceof Array ? [] : {};\n                }\n                cRef = checkCyclicRef(tgtVal, srcArr);\n                if (cRef !== -1) {\n                    srcVal = obj1[item] = tgtArr[cRef];\n                }\n                else {\n                    merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                }\n            }\n        }\n    }\n    else {\n        for (item in obj2) {\n            try {\n                srcVal = obj1[item];\n                tgtVal = obj2[item];\n            }\n            catch (e) {\n                continue;\n            }\n\n            if (tgtVal !== null && typeof tgtVal === OBJECTSTRING) {\n                // Fix for issue BUG: FWXT-602\n                // IE < 9 Object.prototype.toString.call(null) gives\n                // '[object Object]' instead of '[object Null]'\n                // that's why null value becomes Object in IE < 9\n                str = objectToStrFn.call(tgtVal);\n                if (str === objectToStr) {\n                    if (srcVal === null || typeof srcVal !== OBJECTSTRING) {\n                        srcVal = obj1[item] = {};\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else if (str === arrayToStr) {\n                    if (srcVal === null || !(srcVal instanceof Array)) {\n                        srcVal = obj1[item] = [];\n                    }\n                    cRef = checkCyclicRef(tgtVal, srcArr);\n                    if (cRef !== -1) {\n                        srcVal = obj1[item] = tgtArr[cRef];\n                    }\n                    else {\n                        merge(srcVal, tgtVal, skipUndef, tgtArr, srcArr);\n                    }\n                }\n                else {\n                    obj1[item] = tgtVal;\n                }\n            }\n            else {\n                if (skipUndef && tgtVal === undefined) {\n                    continue;\n                }\n                obj1[item] = tgtVal;\n            }\n        }\n    }\n    return obj1;\n}\n\n\nfunction extend2 (obj1, obj2, skipUndef) {\n    //if none of the arguments are object then return back\n    if (typeof obj1 !== OBJECTSTRING && typeof obj2 !== OBJECTSTRING) {\n        return null;\n    }\n\n    if (typeof obj2 !== OBJECTSTRING || obj2 === null) {\n        return obj1;\n    }\n\n    if (typeof obj1 !== OBJECTSTRING) {\n        obj1 = obj2 instanceof Array ? [] : {};\n    }\n    merge(obj1, obj2, skipUndef);\n    return obj1;\n}\n\nexport { extend2 as default };\n","import { DataFormat } from '../enums';\n\n/**\n * Checks whether the value is an array.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an array otherwise returns false.\n */\nexport function isArray (val) {\n    return Array.isArray(val);\n}\n\n/**\n * Checks whether the value is an object.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is an object otherwise returns false.\n */\nexport function isObject (val) {\n    return val === Object(val);\n}\n\n/**\n * Checks whether the value is a string value.\n *\n * @param  {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is a string value otherwise returns false.\n */\nexport function isString (val) {\n    return typeof val === 'string';\n}\n\n/**\n * Checks whether the value is callable.\n *\n * @param {*} val - The value to be checked.\n * @return {boolean} Returns true if the value is callable otherwise returns false.\n */\nexport function isCallable (val) {\n    return typeof val === 'function';\n}\n\n/**\n * Returns the unique values from the input array.\n *\n * @param {Array} data - The input array.\n * @return {Array} Returns a new array of unique values.\n */\nexport function uniqueValues (data) {\n    return [...new Set(data)];\n}\n\nexport const getUniqueId = () => `id-${new Date().getTime()}${Math.round(Math.random() * 10000)}`;\n\n/**\n * Checks Whether two arrays have same content.\n *\n * @param {Array} arr1 - The first array.\n * @param {Array} arr2 - The 2nd array.\n * @return {boolean} Returns whether two array have same content.\n */\nexport function isArrEqual(arr1, arr2) {\n    if (!isArray(arr1) || !isArray(arr2)) {\n        return arr1 === arr2;\n    }\n\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * It is the default number format function for the measure field type.\n *\n * @param {any} val - The input value.\n * @return {number} Returns a number value.\n */\nexport function formatNumber(val) {\n    return val;\n}\n\n/**\n * Returns the detected data format.\n *\n * @param {any} data - The input data to be tested.\n * @return {string} Returns the data format name.\n */\nexport const detectDataFormat = (data) => {\n    if (isString(data)) {\n        return DataFormat.DSV_STR;\n    } else if (isArray(data) && isArray(data[0])) {\n        return DataFormat.DSV_ARR;\n    } else if (isArray(data) && (data.length === 0 || isObject(data[0]))) {\n        return DataFormat.FLAT_JSON;\n    }\n    return null;\n};\n","import { FieldType } from './enums';\nimport { getUniqueId } from './utils';\n\nconst fieldStore = {\n    data: {},\n\n    createNamespace (fieldArr, name) {\n        const dataId = name || getUniqueId();\n\n        this.data[dataId] = {\n            name: dataId,\n            fields: fieldArr,\n\n            fieldsObj () {\n                let fieldsObj = this._cachedFieldsObj;\n\n                if (!fieldsObj) {\n                    fieldsObj = this._cachedFieldsObj = {};\n                    this.fields.forEach((field) => {\n                        fieldsObj[field.name()] = field;\n                    });\n                }\n                return fieldsObj;\n            },\n            getMeasure () {\n                let measureFields = this._cachedMeasure;\n\n                if (!measureFields) {\n                    measureFields = this._cachedMeasure = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.MEASURE) {\n                            measureFields[field.name()] = field;\n                        }\n                    });\n                }\n                return measureFields;\n            },\n            getDimension () {\n                let dimensionFields = this._cachedDimension;\n\n                if (!this._cachedDimension) {\n                    dimensionFields = this._cachedDimension = {};\n                    this.fields.forEach((field) => {\n                        if (field.schema().type === FieldType.DIMENSION) {\n                            dimensionFields[field.name()] = field;\n                        }\n                    });\n                }\n                return dimensionFields;\n            },\n        };\n        return this.data[dataId];\n    },\n};\n\nexport default fieldStore;\n","/**\n * The wrapper class on top of the primitive value of a field.\n *\n * @todo Need to have support for StringValue, NumberValue, DateTimeValue\n * and GeoValue. These types should expose predicate API mostly.\n */\nclass Value {\n\n  /**\n   * Creates new Value instance.\n   *\n   * @param {*} val - the primitive value from the field cell.\n   * @param {string | Field} field - The field from which the value belongs.\n   */\n    constructor (val, field) {\n        Object.defineProperty(this, '_value', {\n            enumerable: false,\n            configurable: false,\n            writable: false,\n            value: val\n        });\n\n        this.field = field;\n    }\n\n  /**\n   * Returns the field value.\n   *\n   * @return {*} Returns the current value.\n   */\n    get value () {\n        return this._value;\n    }\n\n  /**\n   * Converts to human readable string.\n   *\n   * @override\n   * @return {string} Returns a human readable string of the field value.\n   *\n   */\n    toString () {\n        return String(this.value);\n    }\n\n  /**\n   * Returns the value of the field.\n   *\n   * @override\n   * @return {*} Returns the field value.\n   */\n    valueOf () {\n        return this.value;\n    }\n}\n\nexport default Value;\n","/**\n * Iterates through the diffSet array and call the callback with the current\n * index.\n *\n * @param {string} rowDiffset - The row diffset string e.g. '0-4,6,10-13'.\n * @param {Function} callback - The callback function to be called with every index.\n */\nexport function rowDiffsetIterator (rowDiffset, callback) {\n    if (rowDiffset.length > 0) {\n        const rowDiffArr = rowDiffset.split(',');\n        rowDiffArr.forEach((diffStr) => {\n            const diffStsArr = diffStr.split('-');\n            const start = +(diffStsArr[0]);\n            const end = +(diffStsArr[1] || diffStsArr[0]);\n            if (end >= start) {\n                for (let i = start; i <= end; i += 1) {\n                    callback(i);\n                }\n            }\n        });\n    }\n}\n","import { rowDiffsetIterator } from './row-diffset-iterator';\n\nconst generateBuckets = (binSize, start, end) => {\n    const buckets = [];\n    let next = start;\n\n    while (next < end) {\n        buckets.push(next);\n        next += binSize;\n    }\n    buckets.push(next);\n\n    return buckets;\n};\n\nconst findBucketRange = (bucketRanges, value) => {\n    let leftIdx = 0;\n    let rightIdx = bucketRanges.length - 1;\n    let midIdx;\n    let range;\n\n    // Here use binary search as the bucketRanges is a sorted array\n    while (leftIdx <= rightIdx) {\n        midIdx = leftIdx + Math.floor((rightIdx - leftIdx) / 2);\n        range = bucketRanges[midIdx];\n\n        if (value >= range.start && value < range.end) {\n            return range;\n        } else if (value >= range.end) {\n            leftIdx = midIdx + 1;\n        } else if (value < range.start) {\n            rightIdx = midIdx - 1;\n        }\n    }\n\n    return null;\n};\n\n /**\n  * Creates the bin data from input measure field and supplied configs.\n  *\n  * @param {Measure} measureField - The Measure field instance.\n  * @param {string} rowDiffset - The datamodel rowDiffset values.\n  * @param {Object} config - The config object.\n  * @return {Object} Returns the binned data and the corresponding bins.\n  */\nexport function createBinnedFieldData (measureField, rowDiffset, config) {\n    let { buckets, binsCount, binSize, start, end } = config;\n    const [dMin, dMax] = measureField.domain();\n\n    if (!buckets) {\n        start = (start !== 0 && (!start || start > dMin)) ? dMin : start;\n        end = (end !== 0 && (!end || end < dMax)) ? (dMax + 1) : end;\n\n        if (binsCount) {\n            binSize = Math.ceil(Math.abs(end - start) / binsCount);\n        }\n\n        buckets = generateBuckets(binSize, start, end);\n    }\n\n    if (buckets[0] > dMin) {\n        buckets.unshift(dMin);\n    }\n    if (buckets[buckets.length - 1] <= dMax) {\n        buckets.push(dMax + 1);\n    }\n\n    const bucketRanges = [];\n    for (let i = 0; i < buckets.length - 1; i++) {\n        bucketRanges.push({\n            start: buckets[i],\n            end: buckets[i + 1]\n        });\n    }\n\n    const binnedData = [];\n    rowDiffsetIterator(rowDiffset, (i) => {\n        const datum = measureField.partialField.data[i];\n        if (datum === null) {\n            binnedData.push(null);\n            return;\n        }\n\n        const range = findBucketRange(bucketRanges, datum);\n        binnedData.push(`${range.start}-${range.end}`);\n    });\n\n    return { binnedData, bins: buckets };\n}\n","/**\n * The helper function that returns an array of common schema\n * from two fieldStore instances.\n *\n * @param {FieldStore} fs1 - The first FieldStore instance.\n * @param {FieldStore} fs2 - The second FieldStore instance.\n * @return {Array} An array containing the common schema.\n */\nexport function getCommonSchema (fs1, fs2) {\n    const retArr = [];\n    const fs1Arr = [];\n    fs1.fields.forEach((field) => {\n        fs1Arr.push(field.schema().name);\n    });\n    fs2.fields.forEach((field) => {\n        if (fs1Arr.indexOf(field.schema().name) !== -1) {\n            retArr.push(field.schema().name);\n        }\n    });\n    return retArr;\n}\n","export { DataFormat, FilteringMode } from '../enums';\n/**\n * The event name for data propagation.\n */\nexport const PROPAGATION = 'propagation';\n\n/**\n * The name of the unique row id column in DataModel.\n */\nexport const ROW_ID = '__id__';\n\n/**\n * The enums for operation names performed on DataModel.\n */\nexport const DM_DERIVATIVES = {\n    SELECT: 'select',\n    PROJECT: 'project',\n    GROUPBY: 'group',\n    COMPOSE: 'compose',\n    CAL_VAR: 'calculatedVariable',\n    BIN: 'bin'\n};\n\nexport const JOINS = {\n    CROSS: 'cross',\n    LEFTOUTER: 'leftOuter',\n    RIGHTOUTER: 'rightOuter',\n    NATURAL: 'natural',\n    FULLOUTER: 'fullOuter'\n};\n\nexport const LOGICAL_OPERATORS = {\n    AND: 'and',\n    OR: 'or'\n};\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { getCommonSchema } from './get-common-schema';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { JOINS } from '../constants';\nimport { prepareJoinData } from '../helper';\n/**\n * Default filter function for crossProduct.\n *\n * @return {boolean} Always returns true.\n */\nfunction defaultFilterFn() { return true; }\n\n/**\n * Implementation of cross product operation between two DataModel instances.\n * It internally creates the data and schema for the new DataModel.\n *\n * @param {DataModel} dataModel1 - The left DataModel instance.\n * @param {DataModel} dataModel2 - The right DataModel instance.\n * @param {Function} filterFn - The filter function which is used to filter the tuples.\n * @param {boolean} [replaceCommonSchema=false] - The flag if the common name schema should be there.\n * @return {DataModel} Returns The newly created DataModel instance from the crossProduct operation.\n */\nexport function crossProduct (dm1, dm2, filterFn, replaceCommonSchema = false, jointype = JOINS.CROSS) {\n    const schema = [];\n    const data = [];\n    const applicableFilterFn = filterFn || defaultFilterFn;\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreName = dm1FieldStore.name;\n    const dm2FieldStoreName = dm2FieldStore.name;\n    const name = `${dm1FieldStore.name}.${dm2FieldStore.name}`;\n    const commonSchemaList = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    if (dm1FieldStoreName === dm2FieldStoreName) {\n        throw new Error('DataModels must have different alias names');\n    }\n    // Here prepare the schema\n    dm1FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1 && !replaceCommonSchema) {\n            tmpSchema.name = `${dm1FieldStore.name}.${tmpSchema.name}`;\n        }\n        schema.push(tmpSchema);\n    });\n    dm2FieldStore.fields.forEach((field) => {\n        const tmpSchema = extend2({}, field.schema());\n        if (commonSchemaList.indexOf(tmpSchema.name) !== -1) {\n            if (!replaceCommonSchema) {\n                tmpSchema.name = `${dm2FieldStore.name}.${tmpSchema.name}`;\n                schema.push(tmpSchema);\n            }\n        } else {\n            schema.push(tmpSchema);\n        }\n    });\n\n    // Here prepare Data\n    rowDiffsetIterator(dm1._rowDiffset, (i) => {\n        let rowAdded = false;\n        let rowPosition;\n        rowDiffsetIterator(dm2._rowDiffset, (ii) => {\n            const tuple = [];\n            const userArg = {};\n            userArg[dm1FieldStoreName] = {};\n            userArg[dm2FieldStoreName] = {};\n            dm1FieldStore.fields.forEach((field) => {\n                tuple.push(field.partialField.data[i]);\n                userArg[dm1FieldStoreName][field.name()] = field.partialField.data[i];\n            });\n            dm2FieldStore.fields.forEach((field) => {\n                if (!(commonSchemaList.indexOf(field.schema().name) !== -1 && replaceCommonSchema)) {\n                    tuple.push(field.partialField.data[ii]);\n                }\n                userArg[dm2FieldStoreName][field.name()] = field.partialField.data[ii];\n            });\n\n            let cachedStore = {};\n            let cloneProvider1 = () => dm1.detachedRoot();\n            let cloneProvider2 = () => dm2.detachedRoot();\n\n            const dm1Fields = prepareJoinData(userArg[dm1FieldStoreName]);\n            const dm2Fields = prepareJoinData(userArg[dm2FieldStoreName]);\n            if (applicableFilterFn(dm1Fields, dm2Fields, cloneProvider1, cloneProvider2, cachedStore)) {\n                const tupleObj = {};\n                tuple.forEach((cellVal, iii) => {\n                    tupleObj[schema[iii].name] = cellVal;\n                });\n                if (rowAdded && JOINS.CROSS !== jointype) {\n                    data[rowPosition] = tupleObj;\n                }\n                else {\n                    data.push(tupleObj);\n                    rowAdded = true;\n                    rowPosition = i;\n                }\n            } else if ((jointype === JOINS.LEFTOUTER || jointype === JOINS.RIGHTOUTER) && !rowAdded) {\n                const tupleObj = {};\n                let len = dm1FieldStore.fields.length - 1;\n                tuple.forEach((cellVal, iii) => {\n                    if (iii <= len) {\n                        tupleObj[schema[iii].name] = cellVal;\n                    }\n                    else {\n                        tupleObj[schema[iii].name] = null;\n                    }\n                });\n                rowAdded = true;\n                rowPosition = i;\n                data.push(tupleObj);\n            }\n        });\n    });\n\n    return new DataModel(data, schema, { name });\n}\n","/**\n * The default sort function.\n *\n * @param {*} a - The first value.\n * @param {*} b - The second value.\n * @return {number} Returns the comparison result e.g. 1 or 0 or -1.\n */\nfunction defSortFn (a, b) {\n    const a1 = `${a}`;\n    const b1 = `${b}`;\n    if (a1 < b1) {\n        return -1;\n    }\n    if (a1 > b1) {\n        return 1;\n    }\n    return 0;\n}\n\n/**\n * The helper function for merge sort which creates the sorted array\n * from the two halves of the input array.\n *\n * @param {Array} arr - The target array which needs to be merged.\n * @param {number} lo - The starting index of the first array half.\n * @param {number} mid - The ending index of the first array half.\n * @param {number} hi - The ending index of the second array half.\n * @param {Function} sortFn - The sort function.\n */\nfunction merge (arr, lo, mid, hi, sortFn) {\n    const mainArr = arr;\n    const auxArr = [];\n    for (let i = lo; i <= hi; i += 1) {\n        auxArr[i] = mainArr[i];\n    }\n    let a = lo;\n    let b = mid + 1;\n\n    for (let i = lo; i <= hi; i += 1) {\n        if (a > mid) {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        } else if (b > hi) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else if (sortFn(auxArr[a], auxArr[b]) <= 0) {\n            mainArr[i] = auxArr[a];\n            a += 1;\n        } else {\n            mainArr[i] = auxArr[b];\n            b += 1;\n        }\n    }\n}\n\n/**\n * The helper function for merge sort which would be called\n * recursively for sorting the array halves.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {number} lo - The starting index of the array half.\n * @param {number} hi - The ending index of the array half.\n * @param {Function} sortFn - The sort function.\n * @return {Array} Returns the target array itself.\n */\nfunction sort (arr, lo, hi, sortFn) {\n    if (hi === lo) { return arr; }\n\n    const mid = lo + Math.floor((hi - lo) / 2);\n    sort(arr, lo, mid, sortFn);\n    sort(arr, mid + 1, hi, sortFn);\n    merge(arr, lo, mid, hi, sortFn);\n\n    return arr;\n}\n\n/**\n * The implementation of merge sort.\n * It is used in DataModel for stable sorting as it is not sure\n * what the sorting algorithm used by browsers is stable or not.\n *\n * @param {Array} arr - The target array which needs to be sorted.\n * @param {Function} [sortFn=defSortFn] - The sort function.\n * @return {Array} Returns the input array itself in sorted order.\n */\nexport function mergeSort (arr, sortFn = defSortFn) {\n    if (arr.length > 1) {\n        sort(arr, 0, arr.length - 1, sortFn);\n    }\n    return arr;\n}\n","import { DimensionSubtype, MeasureSubtype } from '../enums';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { mergeSort } from './merge-sort';\nimport { fieldInSchema } from '../helper';\nimport { isCallable, isArray, } from '../utils';\n/**\n * Generates the sorting functions to sort the data of a DataModel instance\n * according to the input data type.\n *\n * @param {string} dataType - The data type e.g. 'measure', 'datetime' etc.\n * @param {string} sortType - The sorting order i.e. 'asc' or 'desc'.\n * @param {integer} index - The index of the data which will be sorted.\n * @return {Function} Returns the the sorting function.\n */\nfunction getSortFn (dataType, sortType, index) {\n    let retFunc;\n    switch (dataType) {\n    case MeasureSubtype.CONTINUOUS:\n    case DimensionSubtype.TEMPORAL:\n        if (sortType === 'desc') {\n            retFunc = (a, b) => b[index] - a[index];\n        } else {\n            retFunc = (a, b) => a[index] - b[index];\n        }\n        break;\n    default:\n        retFunc = (a, b) => {\n            const a1 = `${a[index]}`;\n            const b1 = `${b[index]}`;\n            if (a1 < b1) {\n                return sortType === 'desc' ? 1 : -1;\n            }\n            if (a1 > b1) {\n                return sortType === 'desc' ? -1 : 1;\n            }\n            return 0;\n        };\n    }\n    return retFunc;\n}\n\n/**\n * Groups the data according to the specified target field.\n *\n * @param {Array} data - The input data array.\n * @param {number} fieldIndex - The target field index within schema array.\n * @return {Array} Returns an array containing the grouped data.\n */\nfunction groupData(data, fieldIndex) {\n    const hashMap = new Map();\n    const groupedData = [];\n\n    data.forEach((datum) => {\n        const fieldVal = datum[fieldIndex];\n        if (hashMap.has(fieldVal)) {\n            groupedData[hashMap.get(fieldVal)][1].push(datum);\n        } else {\n            groupedData.push([fieldVal, [datum]]);\n            hashMap.set(fieldVal, groupedData.length - 1);\n        }\n    });\n\n    return groupedData;\n}\n\n/**\n * Creates the argument value used for sorting function when sort is done\n * with another fields.\n *\n * @param {Array} groupedDatum - The grouped datum for a single dimension field value.\n * @param {Array} targetFields - An array of the sorting fields.\n * @param {Array} targetFieldDetails - An array of the sorting field details in schema.\n * @return {Object} Returns an object containing the value of sorting fields and the target field name.\n */\nfunction createSortingFnArg(groupedDatum, targetFields, targetFieldDetails) {\n    const arg = {\n        label: groupedDatum[0]\n    };\n\n    targetFields.reduce((acc, next, idx) => {\n        acc[next] = groupedDatum[1].map(datum => datum[targetFieldDetails[idx].index]);\n        return acc;\n    }, arg);\n\n    return arg;\n}\n\n/**\n * Sorts the data before return in dataBuilder.\n *\n * @param {Object} dataObj - An object containing the data and schema.\n * @param {Array} sortingDetails - An array containing the sorting configs.\n */\nfunction sortData(dataObj, sortingDetails) {\n    const { data, schema } = dataObj;\n    let fieldName;\n    let sortMeta;\n    let fDetails;\n    let i = sortingDetails.length - 1;\n\n    for (; i >= 0; i--) {\n        fieldName = sortingDetails[i][0];\n        sortMeta = sortingDetails[i][1];\n        fDetails = fieldInSchema(schema, fieldName);\n\n        if (!fDetails) {\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        if (isCallable(sortMeta)) {\n            // eslint-disable-next-line no-loop-func\n            mergeSort(data, (a, b) => sortMeta(a[fDetails.index], b[fDetails.index]));\n        } else if (isArray(sortMeta)) {\n            const groupedData = groupData(data, fDetails.index);\n            const sortingFn = sortMeta[sortMeta.length - 1];\n            const targetFields = sortMeta.slice(0, sortMeta.length - 1);\n            const targetFieldDetails = targetFields.map(f => fieldInSchema(schema, f));\n\n            groupedData.forEach((groupedDatum) => {\n                groupedDatum.push(createSortingFnArg(groupedDatum, targetFields, targetFieldDetails));\n            });\n\n            mergeSort(groupedData, (a, b) => {\n                const m = a[2];\n                const n = b[2];\n                return sortingFn(m, n);\n            });\n\n            // Empty the array\n            data.length = 0;\n            groupedData.forEach((datum) => {\n                data.push(...datum[1]);\n            });\n        } else {\n            sortMeta = String(sortMeta).toLowerCase() === 'desc' ? 'desc' : 'asc';\n            mergeSort(data, getSortFn(fDetails.type, sortMeta, fDetails.index));\n        }\n    }\n\n    dataObj.uids = [];\n    data.forEach((value) => {\n        dataObj.uids.push(value.pop());\n    });\n}\n\n\n/**\n * Builds the actual data array.\n *\n * @param {Array} fieldStore - An array of field.\n * @param {string} rowDiffset - A string consisting of which rows to be included eg. '0-2,4,6';\n * @param {string} colIdentifier - A string consisting of the details of which column\n * to be included eg 'date,sales,profit';\n * @param {Object} sortingDetails - An object containing the sorting details of the DataModel instance.\n * @param {Object} options - The options required to create the type of the data.\n * @return {Object} Returns an object containing the multidimensional array and the relative schema.\n */\nexport function dataBuilder (fieldStore, rowDiffset, colIdentifier, sortingDetails, options) {\n    const defOptions = {\n        addUid: false,\n        columnWise: false\n    };\n    options = Object.assign({}, defOptions, options);\n\n    const retObj = {\n        schema: [],\n        data: [],\n        uids: []\n    };\n    const addUid = options.addUid;\n    const reqSorting = sortingDetails && sortingDetails.length > 0;\n    // It stores the fields according to the colIdentifier argument\n    const tmpDataArr = [];\n    // Stores the fields according to the colIdentifier argument\n    const colIArr = colIdentifier.split(',');\n\n    colIArr.forEach((colName) => {\n        for (let i = 0; i < fieldStore.length; i += 1) {\n            if (fieldStore[i].name() === colName) {\n                tmpDataArr.push(fieldStore[i]);\n                break;\n            }\n        }\n    });\n\n    // Inserts the schema to the schema object\n    tmpDataArr.forEach((field) => {\n        /** @todo Need to use extend2 here otherwise user can overwrite the schema. */\n        retObj.schema.push(field.schema());\n    });\n\n    if (addUid) {\n        retObj.schema.push({\n            name: 'uid',\n            type: 'identifier'\n        });\n    }\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        retObj.data.push([]);\n        const insertInd = retObj.data.length - 1;\n        let start = 0;\n        tmpDataArr.forEach((field, ii) => {\n            retObj.data[insertInd][ii + start] = field.partialField.data[i];\n        });\n        if (addUid) {\n            retObj.data[insertInd][tmpDataArr.length] = i;\n        }\n        // Creates an array of unique identifiers for each row\n        retObj.uids.push(i);\n\n        // If sorting needed then there is the need to expose the index\n        // mapping from the old index to its new index\n        if (reqSorting) { retObj.data[insertInd].push(i); }\n    });\n\n    // Handles the sort functionality\n    if (reqSorting) {\n        sortData(retObj, sortingDetails);\n    }\n\n    if (options.columnWise) {\n        const tmpData = Array(...Array(retObj.schema.length)).map(() => []);\n        retObj.data.forEach((tuple) => {\n            tuple.forEach((data, i) => {\n                tmpData[i].push(data);\n            });\n        });\n        retObj.data = tmpData;\n    }\n\n    return retObj;\n}\n","import DataModel from '../datamodel';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n\n/**\n * Performs the union operation between two dm instances.\n *\n * @todo Fix the conflicts between union and difference terminology here.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function difference (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n   // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     * @param {boolean} addData - If true only tuple will be added to the data.\n     */\n    function prepareDataHelper(dm, fieldsObj, addData) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                if (addData) { data.push(tuple); }\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj, false);\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj, true);\n\n    return new DataModel(data, schema, { name });\n}\n\n","import { isArray } from '../utils';\n\n/**\n * Reducer function that returns the sum of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the sum of the array.\n */\nfunction sum (arr) {\n    if (isArray(arr)) {\n        const totalSum = arr.reduce((acc, curr) =>\n            ((curr === null || curr === undefined) ? acc : acc + +curr)\n        , null);\n\n        return Number.isNaN(totalSum) ? null : totalSum;\n    }\n    return null;\n}\n\n/**\n * Reducer function that returns the average of all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the mean value of the array.\n */\nfunction avg (arr) {\n    if (isArray(arr)) {\n        const totalSum = sum(arr);\n        const len = arr.length || 1;\n        return (Number.isNaN(totalSum) || totalSum === null) ? null : totalSum / len;\n    }\n    return null;\n}\n\n/**\n * Reducer function that gives the min value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the minimum value of the array.\n */\nfunction min (arr) {\n    if (isArray(arr)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = arr.filter(num =>\n            !(num === undefined || num === null || Number.isNaN(+num)));\n\n        return (filteredValues.length) ? Math.min(...filteredValues) : null;\n    }\n    return null;\n}\n\n/**\n * Reducer function that gives the max value amongst all the values.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the maximum value of the array.\n */\nfunction max (arr) {\n    if (isArray(arr)) {\n        // Filter out undefined, null and NaN values\n        const filteredValues = arr.filter(num =>\n            !(num === undefined || num === null || Number.isNaN(+num)));\n\n        return (filteredValues.length) ? Math.max(...filteredValues) : null;\n    }\n    return null;\n}\n\n/**\n * Reducer function that gives the first value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the first value of the array.\n */\nfunction first (arr) {\n    return arr[0];\n}\n\n/**\n * Reducer function that gives the last value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the last value of the array.\n */\nfunction last (arr) {\n    return arr[arr.length - 1];\n}\n\n/**\n * Reducer function that gives the count value of the array.\n *\n * @public\n * @param  {Array} arr - The input array.\n * @return {number} Returns the length of the array.\n */\nfunction count (arr) {\n    if (isArray(arr)) {\n        return arr.length;\n    }\n    return null;\n}\n\n/**\n * Calculates the variance of the input array.\n *\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the variance of the input array.\n */\nfunction variance (arr) {\n    let mean = avg(arr);\n    return avg(arr.map(num => (num - mean) ** 2));\n}\n\n/**\n * Calculates the square root of the variance of the input array.\n *\n * @public\n * @param  {Array.<number>} arr - The input array.\n * @return {number} Returns the square root of the variance.\n */\nfunction std (arr) {\n    return Math.sqrt(variance(arr));\n}\n\n\nconst fnList = {\n    sum,\n    avg,\n    min,\n    max,\n    first,\n    last,\n    count,\n    std\n};\n\nconst defaultReducerName = 'sum';\n\nexport {\n    defaultReducerName,\n    sum as defReducer,\n    fnList,\n};\n","import { defReducer, fnList } from '../operator';\n\n/**\n * A page level storage which stores, registers, unregisters reducers for all the datamodel instances. There is only one\n * reducer store available in a page. All the datamodel instances receive same instance of reducer store. DataModel\n * out of the box provides handful of {@link reducer | reducers} which can be used as reducer funciton.\n *\n * @public\n * @namespace DataModel\n */\nclass ReducerStore {\n    constructor () {\n        this.store = new Map();\n        this.store.set('defReducer', defReducer);\n\n        Object.entries(fnList).forEach((key) => {\n            this.store.set(key[0], key[1]);\n        });\n    }\n\n    /**\n     * Changes the `defaultReducer` globally. For all the fields which does not have `defAggFn` mentioned in schema, the\n     * value of `defaultReducer` is used for aggregation.\n     *\n     * @public\n     * @param {string} [reducer='sum'] - The name of the default reducer. It picks up the definition from store by doing\n     * name lookup. If no name is found then it takes `sum` as the default reducer.\n     * @return {ReducerStore} Returns instance of the singleton store in page.\n     */\n    defaultReducer (...params) {\n        if (!params.length) {\n            return this.store.get('defReducer');\n        }\n\n        let reducer = params[0];\n\n        if (typeof reducer === 'function') {\n            this.store.set('defReducer', reducer);\n        } else {\n            reducer = String(reducer);\n            if (Object.keys(fnList).indexOf(reducer) !== -1) {\n                this.store.set('defReducer', fnList[reducer]);\n            } else {\n                throw new Error(`Reducer ${reducer} not found in registry`);\n            }\n        }\n        return this;\n    }\n\n    /**\n     *\n     * Registers a {@link reducer | reducer}.\n     * A {@link reducer | reducer} has to be registered before it is used.\n     *\n     * @example\n     *  // find the mean squared value of a given set\n     *  const reducerStore = DataModel.Reducers();\n     *\n     *  reducers.register('meanSquared', (arr) => {\n     *      const squaredVal = arr.map(item => item * item);\n     *      let sum = 0;\n     *      for (let i = 0, l = squaredVal.length; i < l; i++) {\n     *          sum += squaredVal[i++];\n     *      }\n     *\n     *      return sum;\n     *  })\n     *\n     *  // datamodel (dm) is already prepared with cars.json\n     *  const dm1 = dm.groupBy(['origin'], {\n     *      accleration: 'meanSquared'\n     *  });\n     *\n     * @public\n     *\n     * @param {string} name formal name for a reducer. If the given name already exists in store it is overridden by new\n     *      definition.\n     * @param {Function} reducer definition of {@link reducer} function.\n     *\n     * @return {Function} function for unregistering the reducer.\n     */\n    register (name, reducer) {\n        if (typeof reducer !== 'function') {\n            throw new Error('Reducer should be a function');\n        }\n\n        name = String(name);\n        this.store.set(name, reducer);\n\n        return () => { this.__unregister(name); };\n    }\n\n    __unregister (name) {\n        if (this.store.has(name)) {\n            this.store.delete(name);\n        }\n    }\n\n    resolve (name) {\n        if (name instanceof Function) {\n            return name;\n        }\n        return this.store.get(name);\n    }\n}\n\nconst reducerStore = (function () {\n    let store = null;\n\n    function getStore () {\n        if (store === null) {\n            store = new ReducerStore();\n        }\n        return store;\n    }\n    return getStore();\n}());\n\nexport default reducerStore;\n","import { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport DataModel from '../export';\nimport reducerStore from '../utils/reducer-store';\nimport { defaultReducerName } from './group-by-function';\nimport { FieldType } from '../enums';\n\n/**\n * This function sanitize the user given field and return a common Array structure field\n * list\n * @param  {DataModel} dataModel the dataModel operating on\n * @param  {Array} fieldArr  user input of field Array\n * @return {Array}           arrays of field name\n */\nfunction getFieldArr (dataModel, fieldArr) {\n    const retArr = [];\n    const fieldStore = dataModel.getFieldspace();\n    const dimensions = fieldStore.getDimension();\n\n    Object.entries(dimensions).forEach(([key]) => {\n        if (fieldArr && fieldArr.length) {\n            if (fieldArr.indexOf(key) !== -1) {\n                retArr.push(key);\n            }\n        } else {\n            retArr.push(key);\n        }\n    });\n\n    return retArr;\n}\n\n/**\n * This sanitize the reducer provide by the user and create a common type of object.\n * user can give function Also\n * @param  {DataModel} dataModel     dataModel to worked on\n * @param  {Object|function} [reducers={}] reducer provided by the users\n * @return {Object}               object containing reducer function for every measure\n */\nfunction getReducerObj (dataModel, reducers = {}) {\n    const retObj = {};\n    const fieldStore = dataModel.getFieldspace();\n    const measures = fieldStore.getMeasure();\n    const defReducer = reducerStore.defaultReducer();\n\n    Object.keys(measures).forEach((measureName) => {\n        if (typeof reducers[measureName] !== 'string') {\n            reducers[measureName] = measures[measureName].defAggFn();\n        }\n        const reducerFn = reducerStore.resolve(reducers[measureName]);\n        if (reducerFn) {\n            retObj[measureName] = reducerFn;\n        } else {\n            retObj[measureName] = defReducer;\n            reducers[measureName] = defaultReducerName;\n        }\n    });\n    return retObj;\n}\n\n/**\n * main function which perform the group-by operations which reduce the measures value is the\n * fields are common according to the reducer function provided\n * @param  {DataModel} dataModel the dataModel to worked\n * @param  {Array} fieldArr  fields according to which the groupby should be worked\n * @param  {Object|Function} reducers  reducers function\n * @param {DataModel} existingDataModel Existing datamodel instance\n * @return {DataModel} new dataModel with the group by\n */\nfunction groupBy (dataModel, fieldArr, reducers, existingDataModel) {\n    const sFieldArr = getFieldArr(dataModel, fieldArr);\n    const reducerObj = getReducerObj(dataModel, reducers);\n    const fieldStore = dataModel.getFieldspace();\n    const fieldStoreObj = fieldStore.fieldsObj();\n    const dbName = fieldStore.name;\n    const dimensionArr = [];\n    const measureArr = [];\n    const schema = [];\n    const hashMap = {};\n    const data = [];\n    let newDataModel;\n\n    // Prepare the schema\n    Object.entries(fieldStoreObj).forEach(([key, value]) => {\n        if (sFieldArr.indexOf(key) !== -1 || reducerObj[key]) {\n            schema.push(extend2({}, value.schema()));\n\n            switch (value.schema().type) {\n            case FieldType.MEASURE:\n                measureArr.push(key);\n                break;\n            default:\n            case FieldType.DIMENSION:\n                dimensionArr.push(key);\n            }\n        }\n    });\n    // Prepare the data\n    let rowCount = 0;\n    rowDiffsetIterator(dataModel._rowDiffset, (i) => {\n        let hash = '';\n        dimensionArr.forEach((_) => {\n            hash = `${hash}-${fieldStoreObj[_].partialField.data[i]}`;\n        });\n        if (hashMap[hash] === undefined) {\n            hashMap[hash] = rowCount;\n            data.push({});\n            dimensionArr.forEach((_) => {\n                data[rowCount][_] = fieldStoreObj[_].partialField.data[i];\n            });\n            measureArr.forEach((_) => {\n                data[rowCount][_] = [fieldStoreObj[_].partialField.data[i]];\n            });\n            rowCount += 1;\n        } else {\n            measureArr.forEach((_) => {\n                data[hashMap[hash]][_].push(fieldStoreObj[_].partialField.data[i]);\n            });\n        }\n    });\n\n    // reduction\n    let cachedStore = {};\n    let cloneProvider = () => dataModel.detachedRoot();\n    data.forEach((row) => {\n        const tuple = row;\n        measureArr.forEach((_) => {\n            tuple[_] = reducerObj[_](row[_], cloneProvider, cachedStore);\n        });\n    });\n    if (existingDataModel) {\n        existingDataModel.__calculateFieldspace();\n        newDataModel = existingDataModel;\n    }\n    else {\n        newDataModel = new DataModel(data, schema, { name: dbName });\n    }\n    return newDataModel;\n}\n\nexport { groupBy, getFieldArr, getReducerObj };\n","import { getCommonSchema } from './get-common-schema';\n\n/**\n * The filter function used in natural join.\n * It generates a function that will have the logic to join two\n * DataModel instances by the process of natural join.\n *\n * @param {DataModel} dm1 - The left DataModel instance.\n * @param {DataModel} dm2 - The right DataModel instance.\n * @return {Function} Returns a function that is used in cross-product operation.\n */\nexport function naturalJoinFilter (dm1, dm2) {\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    // const dm1FieldStoreName = dm1FieldStore.name;\n    // const dm2FieldStoreName = dm2FieldStore.name;\n    const commonSchemaArr = getCommonSchema(dm1FieldStore, dm2FieldStore);\n\n    return (dm1Fields, dm2Fields) => {\n        let retainTuple = true;\n        commonSchemaArr.forEach((fieldName) => {\n            if (dm1Fields[fieldName].value ===\n                dm2Fields[fieldName].value && retainTuple) {\n                retainTuple = true;\n            } else {\n                retainTuple = false;\n            }\n        });\n        return retainTuple;\n    };\n}\n","import DataModel from '../export';\nimport { extend2 } from '../utils';\nimport { rowDiffsetIterator } from './row-diffset-iterator';\nimport { isArrEqual } from '../utils/helper';\n/**\n * Performs the union operation between two dm instances.\n *\n * @param {dm} dm1 - The first dm instance.\n * @param {dm} dm2 - The second dm instance.\n * @return {dm} Returns the newly created dm after union operation.\n */\nexport function union (dm1, dm2) {\n    const hashTable = {};\n    const schema = [];\n    const schemaNameArr = [];\n    const data = [];\n    const dm1FieldStore = dm1.getFieldspace();\n    const dm2FieldStore = dm2.getFieldspace();\n    const dm1FieldStoreFieldObj = dm1FieldStore.fieldsObj();\n    const dm2FieldStoreFieldObj = dm2FieldStore.fieldsObj();\n    const name = `${dm1FieldStore.name} union ${dm2FieldStore.name}`;\n\n    // For union the columns should match otherwise return a clone of the dm1\n    if (!isArrEqual(dm1._colIdentifier.split(',').sort(), dm2._colIdentifier.split(',').sort())) {\n        return null;\n    }\n\n    // Prepare the schema\n    (dm1._colIdentifier.split(',')).forEach((fieldName) => {\n        const field = dm1FieldStoreFieldObj[fieldName];\n        schema.push(extend2({}, field.schema()));\n        schemaNameArr.push(field.schema().name);\n    });\n\n    /**\n     * The helper function to create the data.\n     *\n     * @param {dm} dm - The dm instance for which the data is inserted.\n     * @param {Object} fieldsObj - The fieldStore object format.\n     */\n    function prepareDataHelper (dm, fieldsObj) {\n        rowDiffsetIterator(dm._rowDiffset, (i) => {\n            const tuple = {};\n            let hashData = '';\n            schemaNameArr.forEach((schemaName) => {\n                const value = fieldsObj[schemaName].partialField.data[i];\n                hashData += `-${value}`;\n                tuple[schemaName] = value;\n            });\n            if (!hashTable[hashData]) {\n                data.push(tuple);\n                hashTable[hashData] = true;\n            }\n        });\n    }\n\n    // Prepare the data\n    prepareDataHelper(dm1, dm1FieldStoreFieldObj);\n    prepareDataHelper(dm2, dm2FieldStoreFieldObj);\n\n    return new DataModel(data, schema, { name });\n}\n","import { crossProduct } from './cross-product';\nimport { JOINS } from '../constants';\nimport { union } from './union';\n\n\nexport function leftOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel1, dataModel2, filterFn, false, JOINS.LEFTOUTER);\n}\n\nexport function rightOuterJoin (dataModel1, dataModel2, filterFn) {\n    return crossProduct(dataModel2, dataModel1, filterFn, false, JOINS.RIGHTOUTER);\n}\n\nexport function fullOuterJoin (dataModel1, dataModel2, filterFn) {\n    return union(leftOuterJoin(dataModel1, dataModel2, filterFn), rightOuterJoin(dataModel1, dataModel2, filterFn));\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\n\n/**\n * In {@link DataModel}, every tabular data consists of column, a column is stored as field.\n * Field contains all the data for a given column in an array.\n *\n * Each record consists of several fields; the fields of all records form the columns.\n * Examples of fields: name, gender, sex etc.\n *\n * In DataModel, each field can have multiple attributes which describes its data and behaviour.\n * A field can have two types of data: Measure and Dimension.\n *\n * A Dimension Field is the context on which a data is categorized and the measure is the numerical values that\n * quantify the data set.\n * In short a dimension is the lens through which you are looking at your measure data.\n *\n * Refer to {@link Schema} to get info about possible field attributes.\n *\n * @public\n * @class\n */\nexport default class Field {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        this.partialField = partialField;\n        this.rowDiffset = rowDiffset;\n    }\n\n    /**\n     * Generates the field type specific domain.\n     *\n     * @public\n     * @abstract\n     */\n    domain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the the field schema.\n     *\n     * @public\n     * @return {string} Returns the field schema.\n     */\n    schema () {\n        return this.partialField.schema;\n    }\n\n    /**\n     * Returns the name of the field.\n     *\n     * @public\n     * @return {string} Returns the name of the field.\n     */\n    name () {\n        return this.partialField.name;\n    }\n\n    /**\n     * Returns the type of the field.\n     *\n     * @public\n     * @return {string} Returns the type of the field.\n     */\n    type () {\n        return this.partialField.schema.type;\n    }\n\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return this.partialField.schema.subtype;\n    }\n\n    /**\n     * Returns the description of the field.\n     *\n     * @public\n     * @return {string} Returns the description of the field.\n     */\n    description () {\n        return this.partialField.schema.description;\n    }\n\n    /**\n     * Returns the display name of the field.\n     *\n     * @public\n     * @return {string} Returns the display name of the field.\n     */\n    displayName () {\n        return this.partialField.schema.displayName || this.partialField.schema.name;\n    }\n\n    /**\n     * Returns the data associated with the field.\n     *\n     * @public\n     * @return {Array} Returns the data.\n     */\n    data () {\n        const data = [];\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            data.push(this.partialField.data[i]);\n        });\n        return data;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @abstract\n     */\n    formattedData () {\n        throw new Error('Not yet implemented');\n    }\n}\n","import Field from '../field';\n\n/**\n * Represents dimension field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Dimension extends Field {\n    /**\n     * Returns the domain for the dimension field.\n     *\n     * @override\n     * @public\n     * @return {any} Returns the calculated domain.\n     */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @abstract\n     */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n     /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport { DimensionSubtype } from '../../enums';\nimport Dimension from '../dimension';\n\n/**\n * Represents categorical field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Categorical extends Dimension {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return DimensionSubtype.CATEGORICAL;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        const hash = new Set();\n        const domain = [];\n\n        // here don't use this.data() as the iteration will be occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum === null) {\n                return;\n            }\n\n            if (!hash.has(datum)) {\n                hash.add(datum);\n                domain.push(datum);\n            }\n        });\n        return domain;\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport Dimension from '../dimension';\nimport { DateTimeFormatter } from '../../utils';\n\n/**\n * Represents temporal field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Temporal extends Dimension {\n     /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {PartialField} partialField - The partialField instance which holds the whole data.\n     * @param {string} rowDiffset - The data subset definition.\n     */\n    constructor (partialField, rowDiffset) {\n        super(partialField, rowDiffset);\n\n        this._cachedMinDiff = null;\n    }\n\n     /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the unique values.\n     */\n    calculateDataDomain () {\n        const hash = new Set();\n        const domain = [];\n\n        // here don't use this.data() as the iteration will be\n        // occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum === null) {\n                return;\n            }\n\n            if (!hash.has(datum)) {\n                hash.add(datum);\n                domain.push(datum);\n            }\n        });\n\n        return domain;\n    }\n\n\n    /**\n     * Calculates the minimum consecutive difference from the associated field data.\n     *\n     * @public\n     * @return {number} Returns the minimum consecutive diff in milliseconds.\n     */\n    minimumConsecutiveDifference () {\n        if (this._cachedMinDiff) {\n            return this._cachedMinDiff;\n        }\n\n        const sortedData = this.data().sort((a, b) => a - b);\n        const arrLn = sortedData.length;\n        let minDiff = Number.POSITIVE_INFINITY;\n        let prevDatum;\n        let nextDatum;\n        let processedCount = 0;\n\n        for (let i = 1; i < arrLn; i++) {\n            prevDatum = sortedData[i - 1];\n            nextDatum = sortedData[i];\n\n            if (nextDatum === prevDatum) {\n                continue;\n            }\n\n            minDiff = Math.min(minDiff, nextDatum - sortedData[i - 1]);\n            processedCount++;\n        }\n\n        if (!processedCount) {\n            minDiff = null;\n        }\n        this._cachedMinDiff = minDiff;\n\n        return this._cachedMinDiff;\n    }\n\n    /**\n     * Returns the format specified in the input schema while creating field.\n     *\n     * @public\n     * @return {string} Returns the datetime format.\n     */\n    format () {\n        return this.partialField.schema.format;\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        const data = [];\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum === null) {\n                data.push(null);\n            } else {\n                data.push(DateTimeFormatter.formatAs(datum, this.format()));\n            }\n        });\n        return data;\n    }\n}\n\n","import Dimension from '../dimension';\n\n/**\n * Represents binned field subtype.\n *\n * @public\n * @class\n * @extends Dimension\n */\nexport default class Binned extends Dimension {\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the last and first values of bins config array.\n     */\n    calculateDataDomain () {\n        const binsArr = this.partialField.schema.bins;\n        return [binsArr[0], binsArr[binsArr.length - 1]];\n    }\n\n    /**\n     * Returns the bins config provided while creating the field instance.\n     *\n     * @public\n     * @return {Array} Returns the bins array config.\n     */\n    bins () {\n        return this.partialField.schema.bins;\n    }\n}\n","import { formatNumber } from '../../utils';\nimport { defaultReducerName } from '../../operator/group-by-function';\nimport Field from '../field';\n\n/**\n * Represents measure field type.\n *\n * @public\n * @class\n * @extends Field\n */\nexport default class Measure extends Field {\n  /**\n   * Returns the domain for the measure field.\n   *\n   * @override\n   * @public\n   * @return {any} Returns the calculated domain.\n   */\n    domain () {\n        if (!this._cachedDomain) {\n            this._cachedDomain = this.calculateDataDomain();\n        }\n        return this._cachedDomain;\n    }\n\n  /**\n   * Returns the unit of the measure field.\n   *\n   * @public\n   * @return {string} Returns unit of the field.\n   */\n    unit () {\n        return this.partialField.schema.unit;\n    }\n\n  /**\n   * Returns the aggregation function name of the measure field.\n   *\n   * @public\n   * @return {string} Returns aggregation function name of the field.\n   */\n    defAggFn () {\n        return this.partialField.schema.defAggFn || defaultReducerName;\n    }\n\n  /**\n   * Returns the number format of the measure field.\n   *\n   * @public\n   * @return {Function} Returns number format of the field.\n   */\n    numberFormat () {\n        const { numberFormat } = this.partialField.schema;\n        return numberFormat instanceof Function ? numberFormat : formatNumber;\n    }\n\n  /**\n   * Calculates the corresponding field domain.\n   *\n   * @public\n   * @abstract\n   */\n    calculateDataDomain () {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * Returns the formatted version of the underlying field data.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the formatted data.\n     */\n    formattedData () {\n        return this.data();\n    }\n}\n","import { rowDiffsetIterator } from '../../operator/row-diffset-iterator';\nimport { MeasureSubtype } from '../../enums';\nimport Measure from '../measure';\n\n/**\n * Represents continuous field subtype.\n *\n * @public\n * @class\n * @extends Measure\n */\nexport default class Continuous extends Measure {\n    /**\n     * Returns the subtype of the field.\n     *\n     * @public\n     * @override\n     * @return {string} Returns the subtype of the field.\n     */\n    subtype () {\n        return MeasureSubtype.CONTINUOUS;\n    }\n\n    /**\n     * Calculates the corresponding field domain.\n     *\n     * @public\n     * @override\n     * @return {Array} Returns the min and max values.\n     */\n    calculateDataDomain () {\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n\n        // here don't use this.data() as the iteration will be occurred two times on same data.\n        rowDiffsetIterator(this.rowDiffset, (i) => {\n            const datum = this.partialField.data[i];\n            if (datum === null) {\n                return;\n            }\n\n            if (datum < min) {\n                min = datum;\n            }\n            if (datum > max) {\n                max = datum;\n            }\n        });\n\n        return [min, max];\n    }\n}\n","/**\n * A interface to represent a parser which is responsible to parse the field.\n *\n * @public\n * @interface\n */\nexport default class FieldParser {\n    /**\n     * Parses a single value of a field and return the sanitized form.\n     *\n     * @public\n     * @abstract\n     */\n    parse () {\n        throw new Error('Not yet implemented');\n    }\n}\n","import FieldParser from '../field-parser';\n\n/**\n * A FieldParser which parses the categorical values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class CategoricalParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the stringified form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the stringified value.\n   */\n    parse (val) {\n        return (val === undefined || val === null) ? null : String(val).trim();\n    }\n}\n","import { DateTimeFormatter } from '../../../utils';\nimport FieldParser from '../field-parser';\n\n/**\n * A FieldParser which parses the temporal values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class TemporalParser extends FieldParser {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {Object} schema - The schema object for the corresponding field.\n     */\n    constructor (schema) {\n        super();\n        this.schema = schema;\n        this._dtf = null;\n    }\n\n    /**\n     * Parses a single value of a field and returns the millisecond value.\n     *\n     * @public\n     * @param {string|number} val - The value of the field.\n     * @return {number} Returns the millisecond value.\n     */\n    parse (val) {\n        if (val === null || val === undefined) {\n            return null;\n        }\n\n        if (this.schema.format) {\n            this._dtf = this._dtf || new DateTimeFormatter(this.schema.format);\n            return this._dtf.getNativeDate(val).getTime();\n        }\n\n        // If format is not present which means the value is such that\n        // it could be directly passed to Date constructor.\n        return +new Date(val);\n    }\n}\n","import FieldParser from '../field-parser';\n\n/**\n * A FieldParser which parses the binned values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class BinnedParser extends FieldParser {\n  /**\n   * Parses a single binned value of a field and returns the sanitized value.\n   *\n   * @public\n   * @param {string} val - The value of the field.\n   * @return {string} Returns the sanitized value.\n   */\n    parse (val) {\n        if (val === null || val === undefined) {\n            return null;\n        }\n\n        const regex = /^\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*-\\s*([+-]?\\d+(?:\\.\\d+)?)\\s*$/;\n        val = String(val);\n\n        const matched = val.match(regex);\n        if (!matched) {\n            return null;\n        }\n\n        return `${Number.parseFloat(matched[1])}-${Number.parseFloat(matched[2])}`;\n    }\n}\n","import FieldParser from '../field-parser';\n\n/**\n * A FieldParser which parses the continuous values.\n *\n * @public\n * @class\n * @implements {FieldParser}\n */\nexport default class ContinuousParser extends FieldParser {\n  /**\n   * Parses a single value of a field and returns the number form.\n   *\n   * @public\n   * @param {string|number} val - The value of the field.\n   * @return {string} Returns the number value.\n   */\n    parse (val) {\n        val = parseFloat(val, 10);\n        return Number.isNaN(val) ? null : val;\n    }\n}\n","/**\n * Stores the full data and the metadata of a field. It provides\n * a single source of data from which the future Field\n * instance can get a subset of it with a rowDiffset config.\n *\n * @class\n * @public\n */\nexport default class PartialField {\n    /**\n     * Initialize a new instance.\n     *\n     * @public\n     * @param {string} name - The name of the field.\n     * @param {Array} data - The data array.\n     * @param {Object} schema - The schema object of the corresponding field.\n     * @param {FieldParser} parser - The parser instance corresponding to that field.\n     */\n    constructor (name, data, schema, parser) {\n        this.name = name;\n        this.schema = schema;\n        this.parser = parser;\n        this.data = this._sanitize(data);\n    }\n\n    /**\n     * Sanitizes the field data.\n     *\n     * @private\n     * @param {Array} data - The actual input data.\n     * @return {Array} Returns the sanitized data.\n     */\n    _sanitize (data) {\n        return data.map(datum => this.parser.parse(datum));\n    }\n}\n","import { FieldType, DimensionSubtype, MeasureSubtype } from './enums';\nimport {\n    Categorical,\n    Temporal,\n    Binned,\n    Continuous,\n    CategoricalParser,\n    TemporalParser,\n    BinnedParser,\n    ContinuousParser,\n    PartialField\n} from './fields';\n\n/**\n * Creates a field instance according to the provided data and schema.\n *\n * @param {Array} data - The field data array.\n * @param {Object} schema - The field schema object.\n * @return {Field} Returns the newly created field instance.\n */\nfunction createUnitField(data, schema) {\n    data = data || [];\n    let partialField;\n\n    switch (schema.type) {\n    case FieldType.MEASURE:\n        switch (schema.subtype) {\n        case MeasureSubtype.CONTINUOUS:\n            partialField = new PartialField(schema.name, data, schema, new ContinuousParser());\n            return new Continuous(partialField, `0-${data.length - 1}`);\n        default:\n            partialField = new PartialField(schema.name, data, schema, new ContinuousParser());\n            return new Continuous(partialField, `0-${data.length - 1}`);\n        }\n    case FieldType.DIMENSION:\n        switch (schema.subtype) {\n        case DimensionSubtype.CATEGORICAL:\n            partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n            return new Categorical(partialField, `0-${data.length - 1}`);\n        case DimensionSubtype.TEMPORAL:\n            partialField = new PartialField(schema.name, data, schema, new TemporalParser(schema));\n            return new Temporal(partialField, `0-${data.length - 1}`);\n        case DimensionSubtype.BINNED:\n            partialField = new PartialField(schema.name, data, schema, new BinnedParser());\n            return new Binned(partialField, `0-${data.length - 1}`);\n        default:\n            partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n            return new Categorical(partialField, `0-${data.length - 1}`);\n        }\n    default:\n        partialField = new PartialField(schema.name, data, schema, new CategoricalParser());\n        return new Categorical(partialField, `0-${data.length - 1}`);\n    }\n}\n\n\n/**\n * Creates a field instance from partialField and rowDiffset.\n *\n * @param {PartialField} partialField - The corresponding partial field.\n * @param {string} rowDiffset - The data subset config.\n * @return {Field} Returns the newly created field instance.\n */\nexport function createUnitFieldFromPartial(partialField, rowDiffset) {\n    const { schema } = partialField;\n\n    switch (schema.type) {\n    case FieldType.MEASURE:\n        switch (schema.subtype) {\n        case MeasureSubtype.CONTINUOUS:\n            return new Continuous(partialField, rowDiffset);\n        default:\n            return new Continuous(partialField, rowDiffset);\n        }\n    case FieldType.DIMENSION:\n        switch (schema.subtype) {\n        case DimensionSubtype.CATEGORICAL:\n            return new Categorical(partialField, rowDiffset);\n        case DimensionSubtype.TEMPORAL:\n            return new Temporal(partialField, rowDiffset);\n        case DimensionSubtype.BINNED:\n            return new Binned(partialField, rowDiffset);\n        default:\n            return new Categorical(partialField, rowDiffset);\n        }\n    default:\n        return new Categorical(partialField, rowDiffset);\n    }\n}\n\n/**\n * Creates the field instances with input data and schema.\n *\n * @param {Array} dataColumn - The data array for fields.\n * @param {Array} schema - The schema array for fields.\n * @param {Array} headers - The array of header names.\n * @return {Array.<Field>} Returns an array of newly created field instances.\n */\nexport function createFields(dataColumn, schema, headers) {\n    const headersObj = {};\n\n    if (!(headers && headers.length)) {\n        headers = schema.map(item => item.name);\n    }\n\n    headers.forEach((header, i) => {\n        headersObj[header] = i;\n    });\n\n    return schema.map(item => createUnitField(dataColumn[headersObj[item.name]], item));\n}\n","import { DataFormat } from './enums';\n\nexport default {\n    dataFormat: DataFormat.AUTO\n};\n","import { columnMajor } from '../utils';\n\n/**\n * Parses and converts data formatted in DSV array to a manageable internal format.\n *\n * @param {Array.<Array>} arr - A 2D array containing of the DSV data.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv data is header or not.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    [\"a\", \"b\", \"c\"],\n *    [1, 2, 3],\n *    [4, 5, 6],\n *    [7, 8, 9]\n * ];\n */\nfunction DSVArr (arr, options) {\n    const defaultOption = {\n        firstRowHeader: true,\n    };\n    options = Object.assign({}, defaultOption, options);\n\n    let header;\n    const columns = [];\n    const push = columnMajor(columns);\n\n    if (options.firstRowHeader) {\n        // If header present then mutate the array.\n        // Do in-place mutation to save space.\n        header = arr.splice(0, 1)[0];\n    } else {\n        header = [];\n    }\n\n    arr.forEach(field => push(...field));\n\n    return [header, columns];\n}\n\nexport default DSVArr;\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    })).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(text) {\n    return text == null ? \"\"\n        : reFormat.test(text += \"\") ? \"\\\"\" + text.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : text;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatRows = tsv.formatRows;\n","import { dsvFormat as d3Dsv } from 'd3-dsv';\nimport DSVArr from './dsv-arr';\n\n/**\n * Parses and converts data formatted in DSV string to a manageable internal format.\n *\n * @todo Support to be given for https://tools.ietf.org/html/rfc4180.\n * @todo Sample implementation https://github.com/knrz/CSV.js/.\n *\n * @param {string} str - The input DSV string.\n * @param {Object} options - Option to control the behaviour of the parsing.\n * @param {boolean} [options.firstRowHeader=true] - Whether the first row of the dsv string data is header or not.\n * @param {string} [options.fieldSeparator=\",\"] - The separator of two consecutive field.\n * @return {Array} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = `\n * a,b,c\n * 1,2,3\n * 4,5,6\n * 7,8,9\n * `\n */\nfunction DSVStr (str, options) {\n    const defaultOption = {\n        firstRowHeader: true,\n        fieldSeparator: ','\n    };\n    options = Object.assign({}, defaultOption, options);\n\n    const dsv = d3Dsv(options.fieldSeparator);\n    return DSVArr(dsv.parseRows(str), options);\n}\n\nexport default DSVStr;\n","import { columnMajor } from '../utils';\n\n/**\n * Parses and converts data formatted in JSON to a manageable internal format.\n *\n * @param {Array.<Object>} arr - The input data formatted in JSON.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n * @example\n *\n * // Sample input data:\n * const data = [\n *    {\n *      \"a\": 1,\n *      \"b\": 2,\n *      \"c\": 3\n *    },\n *    {\n *      \"a\": 4,\n *      \"b\": 5,\n *      \"c\": 6\n *    },\n *    {\n *      \"a\": 7,\n *      \"b\": 8,\n *      \"c\": 9\n *    }\n * ];\n */\nfunction FlatJSON (arr) {\n    const header = {};\n    let i = 0;\n    let insertionIndex;\n    const columns = [];\n    const push = columnMajor(columns);\n\n    arr.forEach((item) => {\n        const fields = [];\n        for (let key in item) {\n            if (key in header) {\n                insertionIndex = header[key];\n            } else {\n                header[key] = i++;\n                insertionIndex = i - 1;\n            }\n            fields[insertionIndex] = item[key];\n        }\n        push(...fields);\n    });\n\n    return [Object.keys(header), columns];\n}\n\nexport default FlatJSON;\n","import FlatJSON from './flat-json';\nimport DSVArr from './dsv-arr';\nimport DSVStr from './dsv-str';\nimport { detectDataFormat } from '../utils';\n\n/**\n * Parses the input data and detect the format automatically.\n *\n * @param {string|Array} data - The input data.\n * @param {Object} options - An optional config specific to data format.\n * @return {Array.<Object>} Returns an array of headers and column major data.\n */\nfunction Auto (data, options) {\n    const converters = { FlatJSON, DSVStr, DSVArr };\n    const dataFormat = detectDataFormat(data);\n\n    if (!dataFormat) {\n        throw new Error('Couldn\\'t detect the data format');\n    }\n\n    return converters[dataFormat](data, options);\n}\n\nexport default Auto;\n","import { FieldType, FilteringMode, DimensionSubtype, MeasureSubtype, DataFormat } from './enums';\nimport fieldStore from './field-store';\nimport Value from './value';\nimport {\n    rowDiffsetIterator\n} from './operator';\nimport { DM_DERIVATIVES, LOGICAL_OPERATORS } from './constants';\nimport { createFields, createUnitFieldFromPartial } from './field-creator';\nimport defaultConfig from './default-config';\nimport * as converter from './converter';\nimport { extend2, detectDataFormat } from './utils';\n\n/**\n * Prepares the selection data.\n */\nfunction prepareSelectionData (fields, i) {\n    const resp = {};\n    for (let field of fields) {\n        resp[field.name()] = new Value(field.partialField.data[i], field);\n    }\n    return resp;\n}\n\nexport function prepareJoinData (fields) {\n    const resp = {};\n    Object.keys(fields).forEach((key) => { resp[key] = new Value(fields[key], key); });\n    return resp;\n}\n\nexport const updateFields = ([rowDiffset, colIdentifier], partialFieldspace, fieldStoreName) => {\n    let collID = colIdentifier.length ? colIdentifier.split(',') : [];\n    let partialFieldMap = partialFieldspace.fieldsObj();\n    let newFields = collID.map(coll => createUnitFieldFromPartial(partialFieldMap[coll].partialField, rowDiffset));\n    return fieldStore.createNamespace(newFields, fieldStoreName);\n};\n\nexport const persistDerivation = (model, operation, config = {}, criteriaFn) => {\n    let derivative;\n    if (operation !== DM_DERIVATIVES.COMPOSE) {\n        derivative = {\n            op: operation,\n            meta: config,\n            criteria: criteriaFn\n        };\n        model._derivation.push(derivative);\n    }\n    else {\n        derivative = [...criteriaFn];\n        model._derivation.length = 0;\n        model._derivation.push(...derivative);\n    }\n};\n\nexport const selectHelper = (rowDiffset, fields, selectFn, config, sourceDm) => {\n    const newRowDiffSet = [];\n    let lastInsertedValue = -1;\n    let { mode } = config;\n    let li;\n    let cachedStore = {};\n    let cloneProvider = () => sourceDm.detachedRoot();\n    const selectorHelperFn = index => selectFn(\n        prepareSelectionData(fields, index),\n        index,\n        cloneProvider,\n        cachedStore\n    );\n\n    let checker;\n    if (mode === FilteringMode.INVERSE) {\n        checker = index => !selectorHelperFn(index);\n    } else {\n        checker = index => selectorHelperFn(index);\n    }\n\n    rowDiffsetIterator(rowDiffset, (i) => {\n        if (checker(i)) {\n            if (lastInsertedValue !== -1 && i === (lastInsertedValue + 1)) {\n                li = newRowDiffSet.length - 1;\n                newRowDiffSet[li] = `${newRowDiffSet[li].split('-')[0]}-${i}`;\n            } else {\n                newRowDiffSet.push(`${i}`);\n            }\n            lastInsertedValue = i;\n        }\n    });\n    return newRowDiffSet.join(',');\n};\n\nexport const filterPropagationModel = (model, propModels, config = {}) => {\n    const operation = config.operation || LOGICAL_OPERATORS.AND;\n    const filterByMeasure = config.filterByMeasure || false;\n    let fns = [];\n    if (!propModels.length) {\n        fns = [() => false];\n    } else {\n        fns = propModels.map(propModel => ((dataModel) => {\n            const dataObj = dataModel.getData();\n            const schema = dataObj.schema;\n            const fieldsConfig = dataModel.getFieldsConfig();\n            const fieldsSpace = dataModel.getFieldspace().fieldsObj();\n            const data = dataObj.data;\n            const domain = Object.values(fieldsConfig).reduce((acc, v) => {\n                acc[v.def.name] = fieldsSpace[v.def.name].domain();\n                return acc;\n            }, {});\n\n            return (fields) => {\n                const include = !data.length ? false : data.some(row => schema.every((propField) => {\n                    if (!(propField.name in fields)) {\n                        return true;\n                    }\n                    const value = fields[propField.name].valueOf();\n                    if (filterByMeasure && propField.type === FieldType.MEASURE) {\n                        return value >= domain[propField.name][0] && value <= domain[propField.name][1];\n                    }\n\n                    if (propField.type !== FieldType.DIMENSION) {\n                        return true;\n                    }\n                    const idx = fieldsConfig[propField.name].index;\n                    return row[idx] === fields[propField.name].valueOf();\n                }));\n                return include;\n            };\n        })(propModel));\n    }\n\n    let filteredModel;\n    if (operation === LOGICAL_OPERATORS.AND) {\n        const clonedModel = model.clone(false, false);\n        filteredModel = clonedModel.select(fields => fns.every(fn => fn(fields)), {\n            saveChild: false,\n            mode: FilteringMode.ALL\n        });\n    } else {\n        filteredModel = model.clone(false, false).select(fields => fns.some(fn => fn(fields)), {\n            mode: FilteringMode.ALL,\n            saveChild: false\n        });\n    }\n\n    return filteredModel;\n};\n\nexport const cloneWithSelect = (sourceDm, selectFn, selectConfig, cloneConfig) => {\n    const cloned = sourceDm.clone(cloneConfig.saveChild);\n    const rowDiffset = selectHelper(\n        cloned._rowDiffset,\n        cloned.getPartialFieldspace().fields,\n        selectFn,\n        selectConfig,\n        sourceDm\n    );\n    cloned._rowDiffset = rowDiffset;\n    cloned.__calculateFieldspace().calculateFieldsConfig();\n    // Store reference to child model and selector function\n    if (cloneConfig.saveChild) {\n        persistDerivation(cloned, DM_DERIVATIVES.SELECT, { config: selectConfig }, selectFn);\n    }\n\n    return cloned;\n};\n\nexport const cloneWithProject = (sourceDm, projField, config, allFields) => {\n    const cloned = sourceDm.clone(config.saveChild);\n    let projectionSet = projField;\n    if (config.mode === FilteringMode.INVERSE) {\n        projectionSet = allFields.filter(fieldName => projField.indexOf(fieldName) === -1);\n    }\n    // cloned._colIdentifier = sourceDm._colIdentifier.split(',')\n    //                         .filter(coll => projectionSet.indexOf(coll) !== -1).join();\n    cloned._colIdentifier = projectionSet.join(',');\n    cloned.__calculateFieldspace().calculateFieldsConfig();\n    // Store reference to child model and projection fields\n    if (config.saveChild) {\n        persistDerivation(\n            cloned,\n            DM_DERIVATIVES.PROJECT,\n            { projField, config, actualProjField: projectionSet },\n            null\n        );\n    }\n\n    return cloned;\n};\n\nexport const sanitizeUnitSchema = (unitSchema) => {\n    // Do deep clone of the unit schema as the user might change it later.\n    unitSchema = extend2({}, unitSchema);\n    if (!unitSchema.type) {\n        unitSchema.type = FieldType.DIMENSION;\n    }\n\n    if (!unitSchema.subtype) {\n        switch (unitSchema.type) {\n        case FieldType.MEASURE:\n            unitSchema.subtype = MeasureSubtype.CONTINUOUS;\n            break;\n        default:\n        case FieldType.DIMENSION:\n            unitSchema.subtype = DimensionSubtype.CATEGORICAL;\n            break;\n        }\n    }\n\n    return unitSchema;\n};\n\nexport const sanitizeSchema = schema => schema.map(unitSchema => sanitizeUnitSchema(unitSchema));\n\nexport const updateData = (relation, data, schema, options) => {\n    schema = sanitizeSchema(schema);\n    options = Object.assign(Object.assign({}, defaultConfig), options);\n    const converterFn = converter[options.dataFormat];\n\n    if (!(converterFn && typeof converterFn === 'function')) {\n        throw new Error(`No converter function found for ${options.dataFormat} format`);\n    }\n\n    const [header, formattedData] = converterFn(data, options);\n    const fieldArr = createFields(formattedData, schema, header);\n\n    // This will create a new fieldStore with the fields\n    const nameSpace = fieldStore.createNamespace(fieldArr, options.name);\n    relation._partialFieldspace = nameSpace;\n    // If data is provided create the default colIdentifier and rowDiffset\n    relation._rowDiffset = formattedData.length && formattedData[0].length ? `0-${formattedData[0].length - 1}` : '';\n    relation._colIdentifier = (schema.map(_ => _.name)).join();\n    relation._dataFormat = options.dataFormat === DataFormat.AUTO ? detectDataFormat(data) : options.dataFormat;\n    return relation;\n};\n\nexport const fieldInSchema = (schema, field) => {\n    let i = 0;\n\n    for (; i < schema.length; ++i) {\n        if (field === schema[i].name) {\n            return {\n                type: schema[i].subtype || schema[i].type,\n                index: i\n            };\n        }\n    }\n    return null;\n};\n\n\nexport const getOperationArguments = (child) => {\n    const derivation = child._derivation;\n    let params = [];\n    let operation;\n    if (derivation && derivation.length === 1) {\n        operation = derivation[0].op;\n        switch (operation) {\n        case DM_DERIVATIVES.SELECT:\n            params = [derivation[0].criteria];\n            break;\n        case DM_DERIVATIVES.PROJECT:\n            params = [derivation[0].meta.actualProjField];\n            break;\n        case DM_DERIVATIVES.GROUPBY:\n            operation = 'groupBy';\n            params = [derivation[0].meta.groupByString.split(','), derivation[0].criteria];\n            break;\n        default:\n            break;\n        }\n    }\n\n    return {\n        operation,\n        params\n    };\n};\n\nconst applyExistingOperationOnModel = (propModel, dataModel) => {\n    const { operation, params } = getOperationArguments(dataModel);\n    let selectionModel = propModel[0];\n    let rejectionModel = propModel[1];\n    if (operation && params.length) {\n        selectionModel = propModel[0][operation](...params, {\n            saveChild: false\n        });\n        rejectionModel = propModel[1][operation](...params, {\n            saveChild: false\n        });\n    }\n    return [selectionModel, rejectionModel];\n};\n\nconst getFilteredModel = (propModel, path) => {\n    for (let i = 0, len = path.length; i < len; i++) {\n        const model = path[i];\n        propModel = applyExistingOperationOnModel(propModel, model);\n    }\n    return propModel;\n};\n\nconst propagateIdentifiers = (dataModel, propModel, config = {}, propModelInf = {}) => {\n    const nonTraversingModel = propModelInf.nonTraversingModel;\n    const excludeModels = propModelInf.excludeModels || [];\n\n    if (dataModel === nonTraversingModel) {\n        return;\n    }\n\n    const propagate = excludeModels.length ? excludeModels.indexOf(dataModel) === -1 : true;\n\n    propagate && dataModel.handlePropagation(propModel, config);\n\n    const children = dataModel._children;\n    children.forEach((child) => {\n        let [selectionModel, rejectionModel] = applyExistingOperationOnModel(propModel, child);\n        propagateIdentifiers(child, [selectionModel, rejectionModel], config, propModelInf);\n    });\n};\n\nexport const getRootGroupByModel = (model) => {\n    if (model._parent && model._derivation.find(d => d.op !== 'group')) {\n        return getRootGroupByModel(model._parent);\n    }\n    return model;\n};\n\nexport const getRootDataModel = (model) => {\n    if (model._parent) {\n        return getRootDataModel(model._parent);\n    }\n    return model;\n};\n\nexport const getPathToRootModel = (model, path = []) => {\n    if (model._parent !== null) {\n        path.push(model);\n        getPathToRootModel(model._parent, path);\n    }\n    return path;\n};\n\nexport const propagateToAllDataModels = (identifiers, rootModels, propagationInf, config) => {\n    let criteria;\n    let propModel;\n    const { propagationNameSpace, propagateToSource } = propagationInf;\n    const propagationSourceId = propagationInf.sourceId;\n    const propagateInterpolatedValues = config.propagateInterpolatedValues;\n    const filterFn = (entry) => {\n        const filter = config.filterFn || (() => true);\n        return filter(entry, config);\n    };\n\n    let criterias = [];\n\n    if (identifiers === null && config.persistent !== true) {\n        criterias = [{\n            criteria: []\n        }];\n    } else {\n        let actionCriterias = Object.values(propagationNameSpace.mutableActions);\n        if (propagateToSource !== false) {\n            actionCriterias = actionCriterias.filter(d => d.config.sourceId !== propagationSourceId);\n        }\n\n        const filteredCriteria = actionCriterias.filter(filterFn).map(action => action.config.criteria);\n\n        const excludeModels = [];\n\n        if (propagateToSource !== false) {\n            const sourceActionCriterias = Object.values(propagationNameSpace.mutableActions);\n\n            sourceActionCriterias.forEach((actionInf) => {\n                const actionConf = actionInf.config;\n                if (actionConf.applyOnSource === false && actionConf.action === config.action &&\n                        actionConf.sourceId !== propagationSourceId) {\n                    excludeModels.push(actionInf.model);\n                    criteria = sourceActionCriterias.filter(d => d !== actionInf).map(d => d.config.criteria);\n                    criteria.length && criterias.push({\n                        criteria,\n                        models: actionInf.model,\n                        path: getPathToRootModel(actionInf.model)\n                    });\n                }\n            });\n        }\n\n\n        criteria = [].concat(...[...filteredCriteria, identifiers]).filter(d => d !== null);\n        criterias.push({\n            criteria,\n            excludeModels: [...excludeModels, ...config.excludeModels || []]\n        });\n    }\n\n    const rootModel = rootModels.model;\n\n    const propConfig = Object.assign({\n        sourceIdentifiers: identifiers,\n        propagationSourceId\n    }, config);\n\n    const rootGroupByModel = rootModels.groupByModel;\n    if (propagateInterpolatedValues && rootGroupByModel) {\n        propModel = filterPropagationModel(rootGroupByModel, criteria, {\n            filterByMeasure: propagateInterpolatedValues\n        });\n        propagateIdentifiers(rootGroupByModel, propModel, propConfig);\n    }\n\n    criterias.forEach((inf) => {\n        const propagationModel = filterPropagationModel(rootModel, inf.criteria);\n        const path = inf.path;\n\n        if (path) {\n            const filteredModel = getFilteredModel(propagationModel, path.reverse());\n            inf.models.handlePropagation(filteredModel, propConfig);\n        } else {\n            propagateIdentifiers(rootModel, propagationModel, propConfig, {\n                excludeModels: inf.excludeModels,\n                nonTraversingModel: propagateInterpolatedValues && rootGroupByModel\n            });\n        }\n    });\n};\n\nexport const propagateImmutableActions = (propagationNameSpace, rootModels, propagationInf) => {\n    const immutableActions = propagationNameSpace.immutableActions;\n\n    for (const action in immutableActions) {\n        const actionInf = immutableActions[action];\n        const actionConf = actionInf.config;\n        const propagationSourceId = propagationInf.config.sourceId;\n        const filterImmutableAction = propagationInf.propConfig.filterImmutableAction ?\n            propagationInf.propConfig.filterImmutableAction(actionConf, propagationInf.config) : true;\n        if (actionConf.sourceId !== propagationSourceId && filterImmutableAction) {\n            const criteriaModel = actionConf.criteria;\n            propagateToAllDataModels(criteriaModel, rootModels, {\n                propagationNameSpace,\n                propagateToSource: false,\n                sourceId: propagationSourceId\n            }, actionConf);\n        }\n    }\n};\n\nexport const addToPropNamespace = (propagationNameSpace, config = {}, model) => {\n    let sourceNamespace;\n    const isMutableAction = config.isMutableAction;\n    const criteria = config.criteria;\n    const key = `${config.action}-${config.sourceId}`;\n\n    if (isMutableAction) {\n        sourceNamespace = propagationNameSpace.mutableActions;\n    } else {\n        sourceNamespace = propagationNameSpace.immutableActions;\n    }\n\n    if (criteria === null) {\n        delete sourceNamespace[key];\n    } else {\n        sourceNamespace[key] = {\n            model,\n            config\n        };\n    }\n\n    return this;\n};\n","import { FilteringMode } from './enums';\nimport { getUniqueId } from './utils';\nimport { persistDerivation, updateFields, cloneWithSelect, cloneWithProject, updateData } from './helper';\nimport { crossProduct, difference, naturalJoinFilter, union } from './operator';\nimport { DM_DERIVATIVES } from './constants';\n\n/**\n * Relation provides the definitions of basic operators of relational algebra like *selection*, *projection*, *union*,\n * *difference* etc.\n *\n * It is extended by {@link DataModel} to inherit the functionalities of relational algebra concept.\n *\n * @class\n * @public\n * @module Relation\n * @namespace DataModel\n */\nclass Relation {\n\n    /**\n     * Creates a new Relation instance by providing underlying data and schema.\n     *\n     * @private\n     *\n     * @param {Object | string | Relation} data - The input tabular data in dsv or json format or\n     * an existing Relation instance object.\n     * @param {Array} schema - An array of data schema.\n     * @param {Object} [options] - The optional options.\n     */\n    constructor (...params) {\n        let source;\n\n        this._parent = null;\n        this._derivation = [];\n        this._children = [];\n\n        if (params.length === 1 && ((source = params[0]) instanceof Relation)) {\n            // parent datamodel was passed as part of source\n            this._colIdentifier = source._colIdentifier;\n            this._rowDiffset = source._rowDiffset;\n            this._dataFormat = source._dataFormat;\n            this._parent = source;\n            this._partialFieldspace = this._parent._partialFieldspace;\n            this._fieldStoreName = getUniqueId();\n            this.__calculateFieldspace().calculateFieldsConfig();\n        } else {\n            updateData(this, ...params);\n            this._fieldStoreName = this._partialFieldspace.name;\n            this.__calculateFieldspace().calculateFieldsConfig();\n            this._propagationNameSpace = {\n                mutableActions: {},\n                immutableActions: {}\n            };\n        }\n    }\n\n    /**\n     * Retrieves the {@link Schema | schema} details for every {@link Field | field} as an array.\n     *\n     * @public\n     *\n     * @return {Array.<Schema>} Array of fields schema.\n     *      ```\n     *      [\n     *          { name: 'Name', type: 'dimension' },\n     *          { name: 'Miles_per_Gallon', type: 'measure', numberFormat: (val) => `${val} miles / gallon` },\n     *          { name: 'Cylinder', type: 'dimension' },\n     *          { name: 'Displacement', type: 'measure', defAggFn: 'max' },\n     *          { name: 'HorsePower', type: 'measure', defAggFn: 'max' },\n     *          { name: 'Weight_in_lbs', type: 'measure', defAggFn: 'avg',  },\n     *          { name: 'Acceleration', type: 'measure', defAggFn: 'avg' },\n     *          { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *          { name: 'Origin' }\n     *      ]\n     *      ```\n     */\n    getSchema () {\n        return this.getFieldspace().fields.map(d => d.schema());\n    }\n\n    /**\n     * Returns the name of the {@link DataModel} instance. If no name was specified during {@link DataModel}\n     * initialization, then it returns a auto-generated name.\n     *\n     * @public\n     *\n     * @return {string} Name of the DataModel instance.\n     */\n    getName() {\n        return this._fieldStoreName;\n    }\n\n    getFieldspace () {\n        return this._fieldspace;\n    }\n\n    __calculateFieldspace () {\n        this._fieldspace = updateFields([this._rowDiffset, this._colIdentifier],\n             this.getPartialFieldspace(), this._fieldStoreName);\n        return this;\n    }\n\n    getPartialFieldspace () {\n        return this._partialFieldspace;\n    }\n\n    /**\n     * Performs {@link link_of_cross_product | cross-product} between two {@link DataModel} instances and returns a\n     * new {@link DataModel} instance containing the results. This operation is also called theta join.\n     *\n     * Cross product takes two set and create one set where each value of one set is paired with each value of another\n     * set.\n     *\n     * This method takes an optional predicate which filters the generated result rows. If the predicate returns true\n     * the combined row is included in the resulatant table.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.join(originDM)));\n     *\n     *  console.log(carsDM.join(originDM,\n     *      obj => obj.[originDM.getName()].Origin === obj.[carsDM.getName()].Origin));\n     *\n     * @text\n     * This is chained version of `join` operator. `join` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel to be joined with the current instance DataModel.\n     * @param {SelectionPredicate} filterFn - The predicate function that will filter the result of the crossProduct.\n     *\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    join (joinWith, filterFn) {\n        return crossProduct(this, joinWith, filterFn);\n    }\n\n    /**\n     * {@link natural_join | Natural join} is a special kind of cross-product join where filtering of rows are performed\n     * internally by resolving common fields are from both table and the rows with common value are included.\n     *\n     * @example\n     *  let originDM = dm.project(['Origin','Origin_Formal_Name']);\n     *  let carsDM = dm.project(['Name','Miles_per_Gallon','Origin'])\n     *\n     *  console.log(carsDM.naturalJoin(originDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} joinWith - The DataModel with which the current instance of DataModel on which the method is\n     *      called will be joined.\n     * @return {DataModel} New DataModel instance created after joining.\n     */\n    naturalJoin (joinWith) {\n        return crossProduct(this, joinWith, naturalJoinFilter(this, joinWith), true);\n    }\n\n    /**\n     * {@link link_to_union | Union} operation can be termed as vertical stacking of all rows from both the DataModel\n     * instances, provided that both of the {@link DataModel} instances should have same column names.\n     *\n     * @example\n     * console.log(EuropeanMakerDM.union(USAMakerDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} unionWith - DataModel instance for which union has to be applied with the instance on which\n     *      the method is called\n     *\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    union (unionWith) {\n        return union(this, unionWith);\n    }\n\n    /**\n     * {@link link_to_difference | Difference } operation only include rows which are present in the datamodel on which\n     * it was called but not on the one passed as argument.\n     *\n     * @example\n     * console.log(highPowerDM.difference(highExpensiveDM));\n     *\n     * @text\n     * This is chained version of `naturalJoin` operator. `naturalJoin` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {DataModel} differenceWith - DataModel instance for which difference has to be applied with the instance\n     *      on which the method is called\n     * @return {DataModel} New DataModel instance with the result of the operation\n     */\n    difference (differenceWith) {\n        return difference(this, differenceWith);\n    }\n\n    /**\n     * {@link link_to_selection | Selection} is a row filtering operation. It expects a predicate and an optional mode\n     * which control which all rows should be included in the resultant DataModel instance.\n     *\n     * {@link SelectionPredicate} is a function which returns a boolean value. For selection operation the selection\n     * function is called for each row of DataModel instance with the current row passed as argument.\n     *\n     * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n     * of rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resultant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  // with selection mode NORMAL:\n     *  const normDt = dt.select(fields => fields.Origin.value === \"USA\")\n     *  console.log(normDt));\n     *\n     * // with selection mode INVERSE:\n     * const inverDt = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.INVERSE })\n     * console.log(inverDt);\n     *\n     * // with selection mode ALL:\n     * const dtArr = dt.select(fields => fields.Origin.value === \"USA\", { mode: DataModel.FilteringMode.ALL })\n     * // print the selected parts\n     * console.log(dtArr[0]);\n     * // print the inverted parts\n     * console.log(dtArr[1]);\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Function} selectFn - The predicate function which is called for each row with the current row.\n     * ```\n     *  function (row, i, cloneProvider, store)  { ... }\n     * ```\n     * @param {Object} config - The configuration object to control the inclusion exclusion of a row in resultant\n     * DataModel instance.\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection.\n     * @return {DataModel} Returns the new DataModel instance(s) after operation.\n     */\n    select (selectFn, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n\n        const cloneConfig = { saveChild: config.saveChild };\n        let oDm;\n\n        if (config.mode === FilteringMode.ALL) {\n            const selectDm = cloneWithSelect(\n                this,\n                selectFn,\n                { mode: FilteringMode.NORMAL },\n                cloneConfig\n            );\n            const rejectDm = cloneWithSelect(\n                this,\n                selectFn,\n                { mode: FilteringMode.INVERSE },\n                cloneConfig\n            );\n            oDm = [selectDm, rejectDm];\n        } else {\n            oDm = cloneWithSelect(\n                this,\n                selectFn,\n                config,\n                cloneConfig\n            );\n        }\n\n        return oDm;\n    }\n\n    /**\n     * Retrieves a boolean value if the current {@link DataModel} instance has data.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'CarName', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     * const data = [];\n     *\n     * const dt = new DataModel(data, schema);\n     * console.log(dt.isEmpty());\n     *\n     * @public\n     *\n     * @return {Boolean} True if the datamodel has no data, otherwise false.\n     */\n    isEmpty () {\n        return !this._rowDiffset.length || !this._colIdentifier.length;\n    }\n\n    /**\n     * Creates a clone from the current DataModel instance with child parent relationship.\n     *\n     * @private\n     * @param {boolean} [saveChild=true] - Whether the cloned instance would be recorded in the parent instance.\n     * @return {DataModel} - Returns the newly cloned DataModel instance.\n     */\n    clone (saveChild = true, linkParent = true) {\n        let retDataModel;\n        if (linkParent === false) {\n            const dataObj = this.getData({\n                getAllFields: true\n            });\n            const data = dataObj.data;\n            const schema = dataObj.schema;\n            const jsonData = data.map((row) => {\n                const rowObj = {};\n                schema.forEach((field, i) => {\n                    rowObj[field.name] = row[i];\n                });\n                return rowObj;\n            });\n            retDataModel = new this.constructor(jsonData, schema);\n        }\n        else {\n            retDataModel = new this.constructor(this);\n        }\n\n        if (saveChild) {\n            this._children.push(retDataModel);\n        }\n        return retDataModel;\n    }\n\n    /**\n     * {@link Projection} is filter column (field) operation. It expects list of fields' name and either include those\n     * or exclude those based on {@link FilteringMode} on the resultant variable.\n     *\n     * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n     * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n     *\n     * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n     * resulatant datamodel.\n     *\n     * @warning\n     * Selection and rejection set is only a logical idea for concept explanation purpose.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *\n     *  // with projection mode NORMAL:\n     *  const normDt = dt.project([\"Name\", \"HorsePower\"]);\n     *  console.log(normDt.getData());\n     *\n     *  // with projection mode INVERSE:\n     *  const inverDt = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.INVERSE })\n     *  console.log(inverDt.getData());\n     *\n     *  // with selection mode ALL:\n     *  const dtArr = dt.project([\"Name\", \"HorsePower\"], { mode: DataModel.FilteringMode.ALL })\n     *  // print the normal parts\n     *  console.log(dtArr[0].getData());\n     *  // print the inverted parts\n     *  console.log(dtArr[1].getData());\n     *\n     * @text\n     * This is chained version of `select` operator. `select` can also be used as\n     * {@link link_to_join_op | functional operator}.\n     *\n     * @public\n     *\n     * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n     * @param {Object} [config] - An optional config to control the creation of new DataModel\n     * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n     *\n     * @return {DataModel} Returns the new DataModel instance after operation.\n     */\n    project (projField, config) {\n        const defConfig = {\n            mode: FilteringMode.NORMAL,\n            saveChild: true\n        };\n        config = Object.assign({}, defConfig, config);\n        const fieldConfig = this.getFieldsConfig();\n        const allFields = Object.keys(fieldConfig);\n        const { mode } = config;\n\n        let normalizedProjField = projField.reduce((acc, field) => {\n            if (field.constructor.name === 'RegExp') {\n                acc.push(...allFields.filter(fieldName => fieldName.search(field) !== -1));\n            } else if (field in fieldConfig) {\n                acc.push(field);\n            }\n            return acc;\n        }, []);\n\n        normalizedProjField = Array.from(new Set(normalizedProjField)).map(field => field.trim());\n        let dataModel;\n\n        if (mode === FilteringMode.ALL) {\n            let projectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.NORMAL,\n                saveChild: config.saveChild\n            }, allFields);\n            let rejectionClone = cloneWithProject(this, normalizedProjField, {\n                mode: FilteringMode.INVERSE,\n                saveChild: config.saveChild\n            }, allFields);\n            dataModel = [projectionClone, rejectionClone];\n        } else {\n            let projectionClone = cloneWithProject(this, normalizedProjField, config, allFields);\n            dataModel = projectionClone;\n        }\n\n        return dataModel;\n    }\n\n    getFieldsConfig () {\n        return this._fieldConfig;\n    }\n\n    calculateFieldsConfig () {\n        this._fieldConfig = this._fieldspace.fields.reduce((acc, fieldDef, i) => {\n            acc[fieldDef.name()] = {\n                index: i,\n                def: { name: fieldDef.name(), type: fieldDef.type(), subtype: fieldDef.subtype() }\n            };\n            return acc;\n        }, {});\n        return this;\n    }\n\n\n    /**\n     * Frees up the resources associated with the current DataModel instance and breaks all the links instance has in\n     * the DAG.\n     *\n     * @public\n     */\n    dispose () {\n        this._parent.removeChild(this);\n        this._parent = null;\n    }\n\n    /**\n     * Removes the specified child {@link DataModel} from the child list of the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\")\n     * dt.removeChild(dt2);\n     *\n     * @private\n     *\n     * @param {DataModel} child - Delegates the parent to remove this child.\n     */\n    removeChild (child) {\n        let idx = this._children.findIndex(sibling => sibling === child);\n        idx !== -1 ? this._children.splice(idx, 1) : true;\n    }\n\n    /**\n     * Adds the specified {@link DataModel} as a parent for the current {@link DataModel} instance.\n     *\n     * The optional criteriaQueue is an array containing the history of transaction performed on parent\n     *  {@link DataModel} to get the current one.\n     *\n     * @param {DataModel} parent - The datamodel instance which will act as parent.\n     * @param {Array} criteriaQueue - Queue contains in-between operation meta-data.\n     */\n    addParent (parent, criteriaQueue = []) {\n        persistDerivation(this, DM_DERIVATIVES.COMPOSE, null, criteriaQueue);\n        this._parent = parent;\n        parent._children.push(this);\n    }\n\n    /**\n     * Returns the parent {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const parentDm = dt2.getParent();\n     *\n     * @return {DataModel} Returns the parent DataModel instance.\n     */\n    getParent () {\n        return this._parent;\n    }\n\n    /**\n     * Returns the immediate child {@link DataModel} instances.\n     *\n     * @example\n     * const schema = [\n     *    { name: 'Name', type: 'dimension' },\n     *    { name: 'HorsePower', type: 'measure' },\n     *    { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *    { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *    { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *    { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *    { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     *\n     * const childDm1 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const childDm2 = dt.select(fields => fields.Origin.value === \"Japan\");\n     * const childDm3 = dt.groupBy([\"Origin\"]);\n     *\n     * @return {DataModel[]} Returns the immediate child DataModel instances.\n     */\n    getChildren() {\n        return this._children;\n    }\n\n    /**\n     * Returns the in-between operation meta data while creating the current {@link DataModel} instance.\n     *\n     * @example\n     * const schema = [\n     *   { name: 'Name', type: 'dimension' },\n     *   { name: 'HorsePower', type: 'measure' },\n     *   { name: \"Origin\", type: 'dimension' }\n     * ];\n     *\n     * const data = [\n     *   { Name: \"chevrolet chevelle malibu\", Horsepower: 130, Origin: \"USA\" },\n     *   { Name: \"citroen ds-21 pallas\", Horsepower: 115, Origin: \"Europe\" },\n     *   { Name: \"datsun pl510\", Horsepower: 88, Origin: \"Japan\" },\n     *   { Name: \"amc rebel sst\", Horsepower: 150, Origin: \"USA\"},\n     * ]\n     *\n     * const dt = new DataModel(data, schema);\n     * const dt2 = dt.select(fields => fields.Origin.value === \"USA\");\n     * const dt3 = dt2.groupBy([\"Origin\"]);\n     * const derivations = dt3.getDerivations();\n     *\n     * @return {Any[]} Returns the derivation meta data.\n     */\n    getDerivations() {\n        return this._derivation;\n    }\n}\n\nexport default Relation;\n","/* eslint-disable default-case */\n\nimport { FieldType, DimensionSubtype, DataFormat } from './enums';\nimport {\n    persistDerivation,\n    getRootGroupByModel,\n    propagateToAllDataModels,\n    getRootDataModel,\n    propagateImmutableActions,\n    addToPropNamespace,\n    sanitizeUnitSchema\n} from './helper';\nimport { DM_DERIVATIVES, PROPAGATION } from './constants';\nimport {\n    dataBuilder,\n    rowDiffsetIterator,\n    groupBy\n} from './operator';\nimport { createBinnedFieldData } from './operator/bucket-creator';\nimport Relation from './relation';\nimport reducerStore from './utils/reducer-store';\nimport { createFields } from './field-creator';\n\n/**\n * DataModel is an in-browser representation of tabular data. It supports\n * {@link https://en.wikipedia.org/wiki/Relational_algebra | relational algebra} operators as well as generic data\n * processing opearators.\n * DataModel extends {@link Relation} class which defines all the relational algebra opreators. DataModel gives\n * definition of generic data processing operators which are not relational algebra complient.\n *\n * @public\n * @class\n * @extends Relation\n * @memberof Datamodel\n */\nclass DataModel extends Relation {\n    /**\n     * Creates a new DataModel instance by providing data and schema. Data could be in the form of\n     * - Flat JSON\n     * - DSV String\n     * - 2D Array\n     *\n     * By default DataModel finds suitable adapter to serialize the data. DataModel also expects a\n     * {@link Schema | schema} for identifying the variables present in data.\n     *\n     * @constructor\n     * @example\n     * const data = loadData('cars.csv');\n     * const schema = [\n     *      { name: 'Name', type: 'dimension' },\n     *      { name: 'Miles_per_Gallon', type: 'measure', unit : 'cm', scale: '1000', numberformat: val => `${val}G`},\n     *      { name: 'Cylinders', type: 'dimension' },\n     *      { name: 'Displacement', type: 'measure' },\n     *      { name: 'Horsepower', type: 'measure' },\n     *      { name: 'Weight_in_lbs', type: 'measure' },\n     *      { name: 'Acceleration', type: 'measure' },\n     *      { name: 'Year', type: 'dimension', subtype: 'datetime', format: '%Y' },\n     *      { name: 'Origin', type: 'dimension' }\n     * ];\n     * const dm = new DataModel(data, schema, { name: 'Cars' });\n     * table(dm);\n     *\n     * @public\n     *\n     * @param {Array.<Object> | string | Array.<Array>} data Input data in any of the mentioned formats\n     * @param {Array.<Schema>} schema Defination of the variables. Order of the variables in data and order of the\n     *      variables in schema has to be same.\n     * @param {object} [options] Optional arguments to specify more settings regarding the creation part\n     * @param {string} [options.name] Name of the datamodel instance. If no name is given an auto generated name is\n     *      assigned to the instance.\n     * @param {string} [options.fieldSeparator=','] specify field separator type if the data is of type dsv string.\n     */\n    constructor (...args) {\n        super(...args);\n\n        this._onPropagation = [];\n        this._sortingDetails = [];\n    }\n\n    /**\n     * Reducers are simple functions which reduces an array of numbers to a representative number of the set.\n     * Like an array of numbers `[10, 20, 5, 15]` can be reduced to `12.5` if average / mean reducer function is\n     * applied. All the measure fields in datamodel (variables in data) needs a reducer to handle aggregation.\n     *\n     * @public\n     *\n     * @return {ReducerStore} Singleton instance of {@link ReducerStore}.\n     */\n    static get Reducers () {\n        return reducerStore;\n    }\n\n    /**\n     * Retrieve the data attached to an instance in JSON format.\n     *\n     * @example\n     * // DataModel instance is already prepared and assigned to dm variable\n     *  const data = dm.getData({\n     *      order: 'column',\n     *      formatter: {\n     *          origin: (val) => val === 'European Union' ? 'EU' : val;\n     *      }\n     *  });\n     *  console.log(data);\n     *\n     * @public\n     *\n     * @param {Object} [options] Options to control how the raw data is to be returned.\n     * @param {string} [options.order='row'] Defines if data is retieved in row order or column order. Possible values\n     *      are `'rows'` and `'columns'`\n     * @param {Function} [options.formatter=null] Formats the output data. This expects an object, where the keys are\n     *      the name of the variable needs to be formatted. The formatter function is called for each row passing the\n     *      value of the cell for a particular row as arguments. The formatter is a function in the form of\n     *      `function (value, rowId, schema) => { ... }`\n     *      Know more about {@link Fomatter}.\n     *\n     * @return {Array} Returns a multidimensional array of the data with schema. The return format looks like\n     *      ```\n     *          {\n     *              data,\n     *              schema\n     *          }\n     *      ```\n     */\n    getData (options) {\n        const defOptions = {\n            order: 'row',\n            formatter: null,\n            withUid: false,\n            getAllFields: false,\n            sort: []\n        };\n        options = Object.assign({}, defOptions, options);\n        const fields = this.getPartialFieldspace().fields;\n\n        const dataGenerated = dataBuilder.call(\n            this,\n            this.getPartialFieldspace().fields,\n            this._rowDiffset,\n            options.getAllFields ? fields.map(d => d.name()).join() : this._colIdentifier,\n            options.sort,\n            {\n                columnWise: options.order === 'column',\n                addUid: !!options.withUid\n            }\n        );\n\n        if (!options.formatter) {\n            return dataGenerated;\n        }\n\n        const { formatter } = options;\n        const { data, schema, uids } = dataGenerated;\n        const fieldNames = schema.map((e => e.name));\n        const fmtFieldNames = Object.keys(formatter);\n        const fmtFieldIdx = fmtFieldNames.reduce((acc, next) => {\n            const idx = fieldNames.indexOf(next);\n            if (idx !== -1) {\n                acc.push([idx, formatter[next]]);\n            }\n            return acc;\n        }, []);\n\n        if (options.order === 'column') {\n            fmtFieldIdx.forEach((elem) => {\n                const fIdx = elem[0];\n                const fmtFn = elem[1];\n\n                data[fIdx].forEach((datum, datumIdx) => {\n                    data[fIdx][datumIdx] = fmtFn.call(\n                        undefined,\n                        datum,\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        } else {\n            data.forEach((datum, datumIdx) => {\n                fmtFieldIdx.forEach((elem) => {\n                    const fIdx = elem[0];\n                    const fmtFn = elem[1];\n\n                    datum[fIdx] = fmtFn.call(\n                        undefined,\n                        datum[fIdx],\n                        uids[datumIdx],\n                        schema[fIdx]\n                    );\n                });\n            });\n        }\n\n        return dataGenerated;\n    }\n\n    /**\n     * Groups the data using particular dimensions and by reducing measures. It expects a list of dimensions using which\n     * it projects the datamodel and perform aggregations to reduce the duplicate tuples. Refer this\n     * {@link link_to_one_example_with_group_by | document} to know the intuition behind groupBy.\n     *\n     * DataModel by default provides definition of few {@link reducer | Reducers}.\n     * {@link ReducerStore | User defined reducers} can also be registered.\n     *\n     * This is the chained implementation of `groupBy`.\n     * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n     *\n     * @example\n     * const groupedDM = dm.groupBy(['Year'], { horsepower: 'max' } );\n     * console.log(groupedDm);\n     *\n     * @public\n     *\n     * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n     * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n     *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n     *      schema of the variable.\n     *\n     * @return {DataModel} Returns a new DataModel instance after performing the groupby.\n     */\n    groupBy (fieldsArr, reducers = {}, config = { saveChild: true }) {\n        const groupByString = `${fieldsArr.join()}`;\n        let params = [this, fieldsArr, reducers];\n        const newDataModel = groupBy(...params);\n\n        if (config.saveChild) {\n            this._children.push(newDataModel);\n            persistDerivation(\n                newDataModel,\n                DM_DERIVATIVES.GROUPBY,\n                { fieldsArr, groupByString, defaultReducer: reducerStore.defaultReducer() },\n                reducers\n            );\n        }\n\n        newDataModel._parent = this;\n        return newDataModel;\n    }\n\n    /**\n     * Performs sorting operation on the current {@link DataModel} instance according to the specified sorting details.\n     * Like every other operator it doesn't mutate the current DataModel instance on which it was called, instead\n     * returns a new DataModel instance containing the sorted data.\n     *\n     * DataModel support multi level sorting by listing the variables using which sorting needs to be performed and\n     * the type of sorting `ASC` or `DESC`.\n     *\n     * In the following example, data is sorted by `Origin` field in `DESC` order in first level followed by another\n     * level of sorting by `Acceleration` in `ASC` order.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * let sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\"] // Default value is ASC\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * // Sort with a custom sorting function\n     * sortedDm = dm.sort([\n     *    [\"Origin\", \"DESC\"]\n     *    [\"Acceleration\", (a, b) => a - b] // Custom sorting function\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @text\n     * DataModel also provides another sorting mechanism out of the box where sort is applied to a variable using\n     * another variable which determines the order.\n     * Like the above DataModel contains three fields `Origin`, `Name` and `Acceleration`. Now, the data in this\n     * model can be sorted by `Origin` field according to the average value of all `Acceleration` for a\n     * particular `Origin` value.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance containing the data of 'cars.json' file\n     * const sortedDm = dm.sort([\n     *     ['Origin', ['Acceleration', (a, b) => avg(...a.Acceleration) - avg(...b.Acceleration)]]\n     * ]);\n     *\n     * console.log(dm.getData());\n     * console.log(sortedDm.getData());\n     *\n     * @public\n     *\n     * @param {Array.<Array>} sortingDetails - Sorting details based on which the sorting will be performed.\n     * @return {DataModel} Returns a new instance of DataModel with sorted data.\n     */\n    sort (sortingDetails) {\n        const rawData = this.getData({\n            order: 'row',\n            sort: sortingDetails\n        });\n        const header = rawData.schema.map(field => field.name);\n        const dataInCSVArr = [header].concat(rawData.data);\n\n        const sortedDm = new this.constructor(dataInCSVArr, rawData.schema, { dataFormat: 'DSVArr' });\n        sortedDm._sortingDetails = sortingDetails;\n        return sortedDm;\n    }\n\n    /**\n     * Performs the serialization operation on the current {@link DataModel} instance according to the specified data\n     * type. When an {@link DataModel} instance is created, it de-serializes the input data into its internal format,\n     * and during its serialization process, it converts its internal data format to the specified data type and returns\n     * that data regardless what type of data is used during the {@link DataModel} initialization.\n     *\n     * @example\n     * // here dm is the pre-declared DataModel instance.\n     * const csvData = dm.serialize(DataModel.DataFormat.DSV_STR, { fieldSeparator: \",\" });\n     * console.log(csvData); // The csv formatted data.\n     *\n     * const jsonData = dm.serialize(DataModel.DataFormat.FLAT_JSON);\n     * console.log(jsonData); // The json data.\n     *\n     * @public\n     *\n     * @param {string} type - The data type name for serialization.\n     * @param {Object} options - The optional option object.\n     * @param {string} options.fieldSeparator - The field separator character for DSV data type.\n     * @return {Array|string} Returns the serialized data.\n     */\n    serialize (type, options) {\n        type = type || this._dataFormat;\n        options = Object.assign({}, { fieldSeparator: ',' }, options);\n\n        const fields = this.getFieldspace().fields;\n        const colData = fields.map(f => f.formattedData());\n        const rowsCount = colData[0].length;\n        let serializedData;\n        let rowIdx;\n        let colIdx;\n\n        if (type === DataFormat.FLAT_JSON) {\n            serializedData = [];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = {};\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row[fields[colIdx].name()] = colData[colIdx][rowIdx];\n                }\n                serializedData.push(row);\n            }\n        } else if (type === DataFormat.DSV_STR) {\n            serializedData = [fields.map(f => f.name()).join(options.fieldSeparator)];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row.join(options.fieldSeparator));\n            }\n            serializedData = serializedData.join('\\n');\n        } else if (type === DataFormat.DSV_ARR) {\n            serializedData = [fields.map(f => f.name())];\n            for (rowIdx = 0; rowIdx < rowsCount; rowIdx++) {\n                const row = [];\n                for (colIdx = 0; colIdx < fields.length; colIdx++) {\n                    row.push(colData[colIdx][rowIdx]);\n                }\n                serializedData.push(row);\n            }\n        } else {\n            throw new Error(`Data type ${type} is not supported`);\n        }\n\n        return serializedData;\n    }\n\n    addField (field) {\n        const fieldName = field.name();\n        this._colIdentifier += `,${fieldName}`;\n        const partialFieldspace = this._partialFieldspace;\n\n        if (!partialFieldspace.fieldsObj()[field.name()]) {\n            partialFieldspace.fields.push(field);\n        } else {\n            const fieldIndex = partialFieldspace.fields.findIndex(fieldinst => fieldinst.name() === fieldName);\n            fieldIndex >= 0 && (partialFieldspace.fields[fieldIndex] = field);\n        }\n\n        // flush out cached namespace values on addition of new fields\n        partialFieldspace._cachedFieldsObj = null;\n        partialFieldspace._cachedDimension = null;\n        partialFieldspace._cachedMeasure = null;\n\n        this.__calculateFieldspace().calculateFieldsConfig();\n        return this;\n    }\n\n    /**\n    * Creates a new variable calculated from existing variables. This method expects the definition of the newly created\n    * variable and a function which resolves the value of the new variable from existing variables.\n    *\n    * Can create a new measure based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const newDm = dataModel.calculateVariable({\n    *      name: 'powerToWeight',\n    *      type: 'measure'\n    *  }, ['horsepower', 'weight_in_lbs', (hp, weight) => hp / weight ]);\n    *\n    *\n    * Can create a new dimension based on existing variables:\n    * @example\n    *  // DataModel already prepared and assigned to dm variable;\n    *  const child = dataModel.calculateVariable(\n    *     {\n    *       name: 'Efficiency',\n    *       type: 'dimension'\n    *     }, ['horsepower', (hp) => {\n    *      if (hp < 80) { return 'low'; },\n    *      else if (hp < 120) { return 'moderate'; }\n    *      else { return 'high' }\n    *  }]);\n    *\n    * @public\n    *\n    * @param {Object} schema - The schema of newly defined variable.\n    * @param {Array.<string|function>} dependency - An array containing the dependency variable names and a resolver\n    * function as the last element.\n    * @param {Object} config - An optional config object.\n    * @param {boolean} [config.saveChild] - Whether the newly created DataModel will be a child.\n    * @param {boolean} [config.replaceVar] - Whether the newly created variable will replace the existing variable.\n    * @return {DataModel} Returns an instance of DataModel with the new field.\n    */\n    calculateVariable (schema, dependency, config) {\n        schema = sanitizeUnitSchema(schema);\n        config = Object.assign({}, { saveChild: true, replaceVar: false }, config);\n\n        const fieldsConfig = this.getFieldsConfig();\n        const depVars = dependency.slice(0, dependency.length - 1);\n        const retrieveFn = dependency[dependency.length - 1];\n\n        if (fieldsConfig[schema.name] && !config.replaceVar) {\n            throw new Error(`${schema.name} field already exists in datamodel`);\n        }\n\n        const depFieldIndices = depVars.map((field) => {\n            const fieldSpec = fieldsConfig[field];\n            if (!fieldSpec) {\n                // @todo dont throw error here, use warning in production mode\n                throw new Error(`${field} is not a valid column name.`);\n            }\n            return fieldSpec.index;\n        });\n\n        const clone = this.clone();\n\n        const fs = clone.getFieldspace().fields;\n        const suppliedFields = depFieldIndices.map(idx => fs[idx]);\n\n        let cachedStore = {};\n        let cloneProvider = () => this.detachedRoot();\n\n        const computedValues = [];\n        rowDiffsetIterator(clone._rowDiffset, (i) => {\n            const fieldsData = suppliedFields.map(field => field.partialField.data[i]);\n            computedValues[i] = retrieveFn(...fieldsData, i, cloneProvider, cachedStore);\n        });\n        const [field] = createFields([computedValues], [schema], [schema.name]);\n        clone.addField(field);\n\n        if (config.saveChild) {\n            persistDerivation(clone, DM_DERIVATIVES.CAL_VAR, { config: schema, fields: depVars }, retrieveFn);\n        }\n\n        return clone;\n    }\n\n    /**\n     * Propagates changes across all the connected DataModel instances.\n     *\n     * @param {Array} identifiers - A list of identifiers that were interacted with.\n     * @param {Object} payload - The interaction specific details.\n     *\n     * @return {DataModel} DataModel instance.\n     */\n    propagate (identifiers, config = {}, addToNameSpace, propConfig = {}) {\n        const isMutableAction = config.isMutableAction;\n        const propagationSourceId = config.sourceId;\n        const payload = config.payload;\n        const rootModel = getRootDataModel(this);\n        const propagationNameSpace = rootModel._propagationNameSpace;\n        const rootGroupByModel = getRootGroupByModel(this);\n        const rootModels = {\n            groupByModel: rootGroupByModel,\n            model: rootModel\n        };\n\n        addToNameSpace && addToPropNamespace(propagationNameSpace, config, this);\n        propagateToAllDataModels(identifiers, rootModels, { propagationNameSpace, sourceId: propagationSourceId },\n            Object.assign({\n                payload\n            }, config));\n\n        if (isMutableAction) {\n            propagateImmutableActions(propagationNameSpace, rootModels, {\n                config,\n                propConfig\n            }, this);\n        }\n\n        return this;\n    }\n\n    /**\n     * Associates a callback with an event name.\n     *\n     * @param {string} eventName - The name of the event.\n     * @param {Function} callback - The callback to invoke.\n     * @return {DataModel} Returns this current DataModel instance itself.\n     */\n    on (eventName, callback) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation.push(callback);\n            break;\n        }\n        return this;\n    }\n\n    /**\n     * Unsubscribes the callbacks for the provided event name.\n     *\n     * @param {string} eventName - The name of the event to unsubscribe.\n     * @return {DataModel} Returns the current DataModel instance itself.\n     */\n    unsubscribe (eventName) {\n        switch (eventName) {\n        case PROPAGATION:\n            this._onPropagation = [];\n            break;\n\n        }\n        return this;\n    }\n\n    /**\n     * This method is used to invoke the method associated with propagation.\n     *\n     * @param {Object} payload The interaction payload.\n     * @param {DataModel} identifiers The propagated DataModel.\n     * @memberof DataModel\n     */\n    handlePropagation (propModel, payload) {\n        let propListeners = this._onPropagation;\n        propListeners.forEach(fn => fn.call(this, propModel, payload));\n    }\n\n    /**\n     * Performs the binning operation on a measure field based on the binning configuration. Binning means discretizing\n     * values of a measure. Binning configuration contains an array; subsequent values from the array marks the boundary\n     * of buckets in [inclusive, exclusive) range format. This operation does not mutate the subject measure field,\n     * instead, it creates a new field (variable) of type dimension and subtype binned.\n     *\n     * Binning can be configured by\n     * - providing custom bin configuration with non-uniform buckets,\n     * - providing bins count,\n     * - providing each bin size,\n     *\n     * When custom `buckets` are provided as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', buckets: [30, 80, 100, 110] }\n     *  const binnedDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binsCount` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHP', binsCount: 5, start: 0, end: 100 }\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @text\n     * When `binSize` is defined as part of binning configuration:\n     * @example\n     *  // DataModel already prepared and assigned to dm variable\n     *  const config = { name: 'binnedHorsepower', binSize: 20, start: 5}\n     *  const binDM = dataModel.bin('horsepower', config);\n     *\n     * @public\n     *\n     * @param {string} measureFieldName - The name of the target measure field.\n     * @param {Object} config - The config object.\n     * @param {string} [config.name] - The name of the new field which will be created.\n     * @param {string} [config.buckets] - An array containing the bucket ranges.\n     * @param {string} [config.binSize] - The size of each bin. It is ignored when buckets are given.\n     * @param {string} [config.binsCount] - The total number of bins to generate. It is ignored when buckets are given.\n     * @param {string} [config.start] - The start value of the bucket ranges. It is ignored when buckets are given.\n     * @param {string} [config.end] - The end value of the bucket ranges. It is ignored when buckets are given.\n     * @return {DataModel} Returns a new {@link DataModel} instance with the new field.\n     */\n    bin (measureFieldName, config) {\n        const fieldsConfig = this.getFieldsConfig();\n\n        if (!fieldsConfig[measureFieldName]) {\n            throw new Error(`Field ${measureFieldName} doesn't exist`);\n        }\n\n        const binFieldName = config.name || `${measureFieldName}_binned`;\n\n        if (fieldsConfig[binFieldName]) {\n            throw new Error(`Field ${binFieldName} already exists`);\n        }\n\n        const measureField = this.getFieldspace().fieldsObj()[measureFieldName];\n        const { binnedData, bins } = createBinnedFieldData(measureField, this._rowDiffset, config);\n\n        const binField = createFields([binnedData], [\n            {\n                name: binFieldName,\n                type: FieldType.DIMENSION,\n                subtype: DimensionSubtype.BINNED,\n                bins\n            }], [binFieldName])[0];\n\n        const clone = this.clone();\n        clone.addField(binField);\n\n        persistDerivation(clone, DM_DERIVATIVES.BIN, { measureFieldName, config, binFieldName }, null);\n\n        return clone;\n    }\n\n    /**\n     * Creates a new {@link DataModel} instance with completely detached root from current {@link DataModel} instance,\n     * the new {@link DataModel} instance has no parent-children relationship with the current one, but has same data as\n     * the current one.\n     * This API is useful when a completely different {@link DataModel} but with same data as the current instance is\n     * needed.\n     *\n     * @example\n     *  const dm = new DataModel(data, schema);\n     *  const detachedDm = dm.detachedRoot();\n     *\n     * // has different namespace\n     * console.log(dm.getPartialFieldspace().name);\n     * console.log(detachedDm.getPartialFieldspace().name);\n     *\n     * // has same data\n     * console.log(dm.getData());\n     * console.log(detachedDm.getData());\n     *\n     * @public\n     *\n     * @return {DataModel} Returns a detached {@link DataModel} instance.\n     */\n    detachedRoot () {\n        const data = this.serialize(DataFormat.FLAT_JSON);\n        const schema = this.getSchema();\n\n        return new DataModel(data, schema);\n    }\n}\n\nexport default DataModel;\n","import { fnList } from '../operator/group-by-function';\n\nexport const { sum, avg, min, max, first, last, count, std: sd } = fnList;\n","import DataModel from './datamodel';\nimport {\n  compose,\n  bin,\n  select,\n  project,\n  groupby as groupBy,\n  calculateVariable,\n  sort,\n  crossProduct,\n  difference,\n  naturalJoin,\n  leftOuterJoin,\n  rightOuterJoin,\n  fullOuterJoin,\n  union\n} from './operator';\nimport * as Stats from './stats';\nimport * as enums from './enums';\nimport { DateTimeFormatter } from './utils';\nimport { DataFormat, FilteringMode } from './constants';\nimport pkg from '../package.json';\n\nDataModel.Operators = {\n    compose,\n    bin,\n    select,\n    project,\n    groupBy,\n    calculateVariable,\n    sort,\n    crossProduct,\n    difference,\n    naturalJoin,\n    leftOuterJoin,\n    rightOuterJoin,\n    fullOuterJoin,\n    union\n};\nDataModel.Stats = Stats;\nObject.assign(DataModel, enums);\nDataModel.DateTimeFormatter = DateTimeFormatter;\nDataModel.DataFormat = DataFormat;\nDataModel.FilteringMode = FilteringMode;\nDataModel.version = pkg.version;\n\nexport default DataModel;\n","\n/**\n * DataModel's opearators are exposed as composable functional operators as well as chainable operators. Chainable\n * operators are called on the instances of {@link Datamodel} and {@link Relation} class.\n *\n * Those same operators can be used as composable operators from `DataModel.Operators` namespace.\n *\n * All these operators have similar behaviour. All these operators when called with the argument returns a function\n * which expects a DataModel instance.\n *\n * @public\n * @module Operators\n * @namespace DataModel\n */\n\n/**\n * This is functional version of selection operator. {@link link_to_selection | Selection} is a row filtering operation.\n * It takes {@link SelectionPredicate | predicate} for filtering criteria and returns a function.\n * The returned function is called with the DataModel instance on which the action needs to be performed.\n *\n * {@link SelectionPredicate} is a function which returns a boolean value. For selection opearation the selection\n * function is called for each row of DataModel instance with the current row passed as argument.\n *\n * After executing {@link SelectionPredicate} the rows are labeled as either an entry of selection set or an entry\n * of rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * [Warn] Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * [Error] `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @example\n * const select = DataModel.Operators.select;\n * usaCarsFn = select(fields => fields.Origin.value === 'USA');\n * usaCarsDm = usaCarsFn(dm);\n * console.log(usaCarsDm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {SelectionPredicate} selectFn - Predicate funciton which is called for each row with the current row\n *      ```\n *          function (row, i)  { ... }\n *      ```\n * @param {Object} [config] - The configuration object to control the inclusion exclusion of a row in resultant\n *      DataModel instance\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - The mode of the selection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const select = (...args) => dm => dm.select(...args);\n\n/**\n * This is functional version of projection operator. {@link link_to_projection | Projection} is a column filtering\n * operation.It expects list of fields name and either include those or exclude those based on {@link FilteringMode} on\n * the  resultant variable.It returns a function which is called with the DataModel instance on which the action needs\n * to be performed.\n *\n * Projection expects array of fields name based on which it creates the selection and rejection set. All the field\n * whose name is present in array goes in selection set and rest of the fields goes in rejection set.\n *\n * {@link FilteringMode} operates on the selection and rejection set to determine which one would reflect in the\n * resulatant datamodel.\n *\n * @warning\n * Selection and rejection set is only a logical idea for concept explanation purpose.\n *\n * @error\n * `FilteringMode.ALL` is not a valid working mode for functional version of `select`. Its only avialable on the\n * chained version.\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<string | Regexp>} projField - An array of column names in string or regular expression.\n * @param {Object} [config] - An optional config to control the creation of new DataModel\n * @param {FilteringMode} [config.mode=FilteringMode.NORMAL] - Mode of the projection\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const project = (...args) => dm => dm.project(...args);\n\n/**\n * This is functional version of binnig operator. Binning happens on a measure field based on a binning configuration.\n * Binning in DataModel does not aggregate the number of rows present in DataModel instance after binning, it just adds\n * a new field with the binned value. Refer binning {@link example_of_binning | example} to have a intuition of what\n * binning is and the use case.\n *\n * Binning can be configured by\n * - providing custom bin configuration with non uniform buckets\n * - providing bin count\n * - providing each bin size\n *\n * When custom buckets are provided as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const buckets = {\n *      start: 30\n *      stops: [80, 100, 110]\n *  };\n *  const config = { buckets, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(dm);\n *\n * @text\n * When `binCount` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binCount: 5, name: 'binnedHP' }\n *  const binFn = bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @text\n * When `binSize` is defined as part of binning configuration\n * @example\n *  // DataModel already prepared and assigned to dm vairable\n *  const config = { binSize: 200, name: 'binnedHorsepower' }\n *  const binnedDm = dataModel.bin('horsepower', config);\n *  const binnedDm = binFn(Dm);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {String} name Name of measure which will be used to create bin\n * @param {Object} config Config required for bin creation\n * @param {Array.<Number>} config.bucketObj.stops Defination of bucket ranges. Two subsequent number from arrays\n *      are picked and a range is created. The first number from range is inclusive and the second number from range\n *      is exclusive.\n * @param {Number} [config.bucketObj.startAt] Force the start of the bin from a particular number.\n *      If not mentioned, the start of the bin or the lower domain of the data if stops is not mentioned, else its\n *      the first value of the stop.\n * @param {Number} config.binSize Bucket size for each bin\n * @param {Number} config.binCount Number of bins which will be created\n * @param {String} config.name Name of the new binned field to be created\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const bin = (...args) => dm => dm.bin(...args);\n\n/**\n * This is functional version of `groupBy` operator.Groups the data using particular dimensions and by reducing\n * measures. It expects a list of dimensions using which it projects the datamodel and perform aggregations to reduce\n * the duplicate tuples. Refer this {@link link_to_one_example_with_group_by | document} to know the intuition behind\n * groupBy.\n *\n * DataModel by default provides definition of few {@link reducer | Reducers}.\n * {@link ReducerStore | User defined reducers} can also be registered.\n *\n * This is the chained implementation of `groupBy`.\n * `groupBy` also supports {@link link_to_compose_groupBy | composability}\n *\n * @example\n * const groupBy = DataModel.Operators.groupBy;\n * const groupedFn = groupBy(['Year'], { horsepower: 'max' } );\n * groupedDM = groupByFn(dm);\n *\n * @public\n *\n * @param {Array.<string>} fieldsArr - Array containing the name of dimensions\n * @param {Object} [reducers={}] - A map whose key is the variable name and value is the name of the reducer. If its\n *      not passed, or any variable is ommitted from the object, default aggregation function is used from the\n *      schema of the variable.\n *\n * @return {PreparatorFunction} Function which expects an instance of DataModel on which the operator needs to be\n *      applied.\n */\nexport const groupBy = (...args) => dm => dm.groupBy(...args);\n\n/**\n * Enables composing operators to run multiple operations and save group of operataion as named opration on a DataModel.\n * The resulting DataModel will be the result of all the operation provided. The operations provided will be executed in\n * a serial manner ie. result of one operation will be the input for the next operations (like pipe operator in unix).\n *\n * Suported operations in compose are\n * - `select`\n * - `project`\n * - `groupBy`\n * - `bin`\n * - `compose`\n *\n * @example\n * const compose = DataModel.Operators.compose;\n * const select = DataModel.Operators.select;\n * const project = DataModel.Operators.project;\n *\n * let composedFn = compose(\n *    select(fields => fields.netprofit.value <= 15),\n *    project(['netprofit', 'netsales']));\n *\n * const dataModel = new DataModel(data1, schema1);\n *\n * let composedDm = composedFn(dataModel);\n *\n * @public\n * @namespace DataModel\n * @module Operators\n *\n * @param {Array.<Operators>} operators: An array of operation that will be applied on the\n * datatable.\n *\n * @returns {DataModel} Instance of resultant DataModel\n */\nexport const compose = (...operations) =>\n    (dm, config = { saveChild: true }) => {\n        let currentDM = dm;\n        let frstChild;\n        const derivations = [];\n        const saveChild = config.saveChild;\n\n        operations.forEach((operation) => {\n            currentDM = operation(currentDM);\n            derivations.push(...currentDM._derivation);\n            if (!frstChild) {\n                frstChild = currentDM;\n            }\n        });\n\n        saveChild && currentDM.addParent(dm, derivations);\n        if (derivations.length > 1) {\n            frstChild.dispose();\n        }\n\n        return currentDM;\n    };\n","/**\n * Wrapper on calculateVariable() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const calculateVariable = (...args) => dm => dm.calculateVariable(...args);\n\n/**\n * Wrapper on sort() method of DataModel to behave\n * the pure-function functionality.\n *\n * @param {Array} args - The argument list.\n * @return {any} Returns the returned value of calling function.\n */\nexport const sort = (...args) => dm => dm.sort(...args);\n","import { crossProduct } from './cross-product';\nimport { naturalJoinFilter } from './natural-join-filter-function';\n\nexport function naturalJoin (dataModel1, dataModel2) {\n    return crossProduct(dataModel1, dataModel2, naturalJoinFilter(dataModel1, dataModel2), true);\n}\n"],"sourceRoot":""}